/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/aws4";
exports.ids = ["vendor-chunks/aws4"];
exports.modules = {

/***/ "(action-browser)/./node_modules/aws4/aws4.js":
/*!***********************************!*\
  !*** ./node_modules/aws4/aws4.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var aws4 = exports, url = __webpack_require__(/*! url */ \"url\"), querystring = __webpack_require__(/*! querystring */ \"querystring\"), crypto = __webpack_require__(/*! crypto */ \"crypto\"), lru = __webpack_require__(/*! ./lru */ \"(action-browser)/./node_modules/aws4/lru.js\"), credentialsCache = lru(1000);\n// http://docs.amazonwebservices.com/general/latest/gr/signature-version-4.html\nfunction hmac(key, string, encoding) {\n    return crypto.createHmac(\"sha256\", key).update(string, \"utf8\").digest(encoding);\n}\nfunction hash(string, encoding) {\n    return crypto.createHash(\"sha256\").update(string, \"utf8\").digest(encoding);\n}\n// This function assumes the string has already been percent encoded\nfunction encodeRfc3986(urlEncodedString) {\n    return urlEncodedString.replace(/[!'()*]/g, function(c) {\n        return \"%\" + c.charCodeAt(0).toString(16).toUpperCase();\n    });\n}\nfunction encodeRfc3986Full(str) {\n    return encodeRfc3986(encodeURIComponent(str));\n}\n// A bit of a combination of:\n// https://github.com/aws/aws-sdk-java-v2/blob/dc695de6ab49ad03934e1b02e7263abbd2354be0/core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/AbstractAws4Signer.java#L59\n// https://github.com/aws/aws-sdk-js/blob/18cb7e5b463b46239f9fdd4a65e2ff8c81831e8f/lib/signers/v4.js#L191-L199\n// https://github.com/mhart/aws4fetch/blob/b3aed16b6f17384cf36ea33bcba3c1e9f3bdfefd/src/main.js#L25-L34\nvar HEADERS_TO_IGNORE = {\n    \"authorization\": true,\n    \"connection\": true,\n    \"x-amzn-trace-id\": true,\n    \"user-agent\": true,\n    \"expect\": true,\n    \"presigned-expires\": true,\n    \"range\": true\n};\n// request: { path | body, [host], [method], [headers], [service], [region] }\n// credentials: { accessKeyId, secretAccessKey, [sessionToken] }\nfunction RequestSigner(request, credentials) {\n    if (typeof request === \"string\") request = url.parse(request);\n    var headers = request.headers = Object.assign({}, request.headers || {}), hostParts = (!this.service || !this.region) && this.matchHost(request.hostname || request.host || headers.Host || headers.host);\n    this.request = request;\n    this.credentials = credentials || this.defaultCredentials();\n    this.service = request.service || hostParts[0] || \"\";\n    this.region = request.region || hostParts[1] || \"us-east-1\";\n    // SES uses a different domain from the service name\n    if (this.service === \"email\") this.service = \"ses\";\n    if (!request.method && request.body) request.method = \"POST\";\n    if (!headers.Host && !headers.host) {\n        headers.Host = request.hostname || request.host || this.createHost();\n        // If a port is specified explicitly, use it as is\n        if (request.port) headers.Host += \":\" + request.port;\n    }\n    if (!request.hostname && !request.host) request.hostname = headers.Host || headers.host;\n    this.isCodeCommitGit = this.service === \"codecommit\" && request.method === \"GIT\";\n    this.extraHeadersToIgnore = request.extraHeadersToIgnore || Object.create(null);\n    this.extraHeadersToInclude = request.extraHeadersToInclude || Object.create(null);\n}\nRequestSigner.prototype.matchHost = function(host) {\n    var match = (host || \"\").match(/([^\\.]{1,63})\\.(?:([^\\.]{0,63})\\.)?amazonaws\\.com(\\.cn)?$/);\n    var hostParts = (match || []).slice(1, 3);\n    // ES's hostParts are sometimes the other way round, if the value that is expected\n    // to be region equals ‘es’ switch them back\n    // e.g. search-cluster-name-aaaa00aaaa0aaa0aaaaaaa0aaa.us-east-1.es.amazonaws.com\n    if (hostParts[1] === \"es\" || hostParts[1] === \"aoss\") hostParts = hostParts.reverse();\n    if (hostParts[1] == \"s3\") {\n        hostParts[0] = \"s3\";\n        hostParts[1] = \"us-east-1\";\n    } else {\n        for(var i = 0; i < 2; i++){\n            if (/^s3-/.test(hostParts[i])) {\n                hostParts[1] = hostParts[i].slice(3);\n                hostParts[0] = \"s3\";\n                break;\n            }\n        }\n    }\n    return hostParts;\n};\n// http://docs.aws.amazon.com/general/latest/gr/rande.html\nRequestSigner.prototype.isSingleRegion = function() {\n    // Special case for S3 and SimpleDB in us-east-1\n    if ([\n        \"s3\",\n        \"sdb\"\n    ].indexOf(this.service) >= 0 && this.region === \"us-east-1\") return true;\n    return [\n        \"cloudfront\",\n        \"ls\",\n        \"route53\",\n        \"iam\",\n        \"importexport\",\n        \"sts\"\n    ].indexOf(this.service) >= 0;\n};\nRequestSigner.prototype.createHost = function() {\n    var region = this.isSingleRegion() ? \"\" : \".\" + this.region, subdomain = this.service === \"ses\" ? \"email\" : this.service;\n    return subdomain + region + \".amazonaws.com\";\n};\nRequestSigner.prototype.prepareRequest = function() {\n    this.parsePath();\n    var request = this.request, headers = request.headers, query;\n    if (request.signQuery) {\n        this.parsedPath.query = query = this.parsedPath.query || {};\n        if (this.credentials.sessionToken) query[\"X-Amz-Security-Token\"] = this.credentials.sessionToken;\n        if (this.service === \"s3\" && !query[\"X-Amz-Expires\"]) query[\"X-Amz-Expires\"] = 86400;\n        if (query[\"X-Amz-Date\"]) this.datetime = query[\"X-Amz-Date\"];\n        else query[\"X-Amz-Date\"] = this.getDateTime();\n        query[\"X-Amz-Algorithm\"] = \"AWS4-HMAC-SHA256\";\n        query[\"X-Amz-Credential\"] = this.credentials.accessKeyId + \"/\" + this.credentialString();\n        query[\"X-Amz-SignedHeaders\"] = this.signedHeaders();\n    } else {\n        if (!request.doNotModifyHeaders && !this.isCodeCommitGit) {\n            if (request.body && !headers[\"Content-Type\"] && !headers[\"content-type\"]) headers[\"Content-Type\"] = \"application/x-www-form-urlencoded; charset=utf-8\";\n            if (request.body && !headers[\"Content-Length\"] && !headers[\"content-length\"]) headers[\"Content-Length\"] = Buffer.byteLength(request.body);\n            if (this.credentials.sessionToken && !headers[\"X-Amz-Security-Token\"] && !headers[\"x-amz-security-token\"]) headers[\"X-Amz-Security-Token\"] = this.credentials.sessionToken;\n            if (this.service === \"s3\" && !headers[\"X-Amz-Content-Sha256\"] && !headers[\"x-amz-content-sha256\"]) headers[\"X-Amz-Content-Sha256\"] = hash(this.request.body || \"\", \"hex\");\n            if (headers[\"X-Amz-Date\"] || headers[\"x-amz-date\"]) this.datetime = headers[\"X-Amz-Date\"] || headers[\"x-amz-date\"];\n            else headers[\"X-Amz-Date\"] = this.getDateTime();\n        }\n        delete headers.Authorization;\n        delete headers.authorization;\n    }\n};\nRequestSigner.prototype.sign = function() {\n    if (!this.parsedPath) this.prepareRequest();\n    if (this.request.signQuery) {\n        this.parsedPath.query[\"X-Amz-Signature\"] = this.signature();\n    } else {\n        this.request.headers.Authorization = this.authHeader();\n    }\n    this.request.path = this.formatPath();\n    return this.request;\n};\nRequestSigner.prototype.getDateTime = function() {\n    if (!this.datetime) {\n        var headers = this.request.headers, date = new Date(headers.Date || headers.date || new Date);\n        this.datetime = date.toISOString().replace(/[:\\-]|\\.\\d{3}/g, \"\");\n        // Remove the trailing 'Z' on the timestamp string for CodeCommit git access\n        if (this.isCodeCommitGit) this.datetime = this.datetime.slice(0, -1);\n    }\n    return this.datetime;\n};\nRequestSigner.prototype.getDate = function() {\n    return this.getDateTime().substr(0, 8);\n};\nRequestSigner.prototype.authHeader = function() {\n    return [\n        \"AWS4-HMAC-SHA256 Credential=\" + this.credentials.accessKeyId + \"/\" + this.credentialString(),\n        \"SignedHeaders=\" + this.signedHeaders(),\n        \"Signature=\" + this.signature()\n    ].join(\", \");\n};\nRequestSigner.prototype.signature = function() {\n    var date = this.getDate(), cacheKey = [\n        this.credentials.secretAccessKey,\n        date,\n        this.region,\n        this.service\n    ].join(), kDate, kRegion, kService, kCredentials = credentialsCache.get(cacheKey);\n    if (!kCredentials) {\n        kDate = hmac(\"AWS4\" + this.credentials.secretAccessKey, date);\n        kRegion = hmac(kDate, this.region);\n        kService = hmac(kRegion, this.service);\n        kCredentials = hmac(kService, \"aws4_request\");\n        credentialsCache.set(cacheKey, kCredentials);\n    }\n    return hmac(kCredentials, this.stringToSign(), \"hex\");\n};\nRequestSigner.prototype.stringToSign = function() {\n    return [\n        \"AWS4-HMAC-SHA256\",\n        this.getDateTime(),\n        this.credentialString(),\n        hash(this.canonicalString(), \"hex\")\n    ].join(\"\\n\");\n};\nRequestSigner.prototype.canonicalString = function() {\n    if (!this.parsedPath) this.prepareRequest();\n    var pathStr = this.parsedPath.path, query = this.parsedPath.query, headers = this.request.headers, queryStr = \"\", normalizePath = this.service !== \"s3\", decodePath = this.service === \"s3\" || this.request.doNotEncodePath, decodeSlashesInPath = this.service === \"s3\", firstValOnly = this.service === \"s3\", bodyHash;\n    if (this.service === \"s3\" && this.request.signQuery) {\n        bodyHash = \"UNSIGNED-PAYLOAD\";\n    } else if (this.isCodeCommitGit) {\n        bodyHash = \"\";\n    } else {\n        bodyHash = headers[\"X-Amz-Content-Sha256\"] || headers[\"x-amz-content-sha256\"] || hash(this.request.body || \"\", \"hex\");\n    }\n    if (query) {\n        var reducedQuery = Object.keys(query).reduce(function(obj, key) {\n            if (!key) return obj;\n            obj[encodeRfc3986Full(key)] = !Array.isArray(query[key]) ? query[key] : firstValOnly ? query[key][0] : query[key];\n            return obj;\n        }, {});\n        var encodedQueryPieces = [];\n        Object.keys(reducedQuery).sort().forEach(function(key) {\n            if (!Array.isArray(reducedQuery[key])) {\n                encodedQueryPieces.push(key + \"=\" + encodeRfc3986Full(reducedQuery[key]));\n            } else {\n                reducedQuery[key].map(encodeRfc3986Full).sort().forEach(function(val) {\n                    encodedQueryPieces.push(key + \"=\" + val);\n                });\n            }\n        });\n        queryStr = encodedQueryPieces.join(\"&\");\n    }\n    if (pathStr !== \"/\") {\n        if (normalizePath) pathStr = pathStr.replace(/\\/{2,}/g, \"/\");\n        pathStr = pathStr.split(\"/\").reduce(function(path, piece) {\n            if (normalizePath && piece === \"..\") {\n                path.pop();\n            } else if (!normalizePath || piece !== \".\") {\n                if (decodePath) piece = decodeURIComponent(piece.replace(/\\+/g, \" \"));\n                path.push(encodeRfc3986Full(piece));\n            }\n            return path;\n        }, []).join(\"/\");\n        if (pathStr[0] !== \"/\") pathStr = \"/\" + pathStr;\n        if (decodeSlashesInPath) pathStr = pathStr.replace(/%2F/g, \"/\");\n    }\n    return [\n        this.request.method || \"GET\",\n        pathStr,\n        queryStr,\n        this.canonicalHeaders() + \"\\n\",\n        this.signedHeaders(),\n        bodyHash\n    ].join(\"\\n\");\n};\nRequestSigner.prototype.filterHeaders = function() {\n    var headers = this.request.headers, extraHeadersToInclude = this.extraHeadersToInclude, extraHeadersToIgnore = this.extraHeadersToIgnore;\n    this.filteredHeaders = Object.keys(headers).map(function(key) {\n        return [\n            key.toLowerCase(),\n            headers[key]\n        ];\n    }).filter(function(entry) {\n        return extraHeadersToInclude[entry[0]] || HEADERS_TO_IGNORE[entry[0]] == null && !extraHeadersToIgnore[entry[0]];\n    }).sort(function(a, b) {\n        return a[0] < b[0] ? -1 : 1;\n    });\n};\nRequestSigner.prototype.canonicalHeaders = function() {\n    if (!this.filteredHeaders) this.filterHeaders();\n    return this.filteredHeaders.map(function(entry) {\n        return entry[0] + \":\" + entry[1].toString().trim().replace(/\\s+/g, \" \");\n    }).join(\"\\n\");\n};\nRequestSigner.prototype.signedHeaders = function() {\n    if (!this.filteredHeaders) this.filterHeaders();\n    return this.filteredHeaders.map(function(entry) {\n        return entry[0];\n    }).join(\";\");\n};\nRequestSigner.prototype.credentialString = function() {\n    return [\n        this.getDate(),\n        this.region,\n        this.service,\n        \"aws4_request\"\n    ].join(\"/\");\n};\nRequestSigner.prototype.defaultCredentials = function() {\n    var env = process.env;\n    return {\n        accessKeyId: env.AWS_ACCESS_KEY_ID || env.AWS_ACCESS_KEY,\n        secretAccessKey: env.AWS_SECRET_ACCESS_KEY || env.AWS_SECRET_KEY,\n        sessionToken: env.AWS_SESSION_TOKEN\n    };\n};\nRequestSigner.prototype.parsePath = function() {\n    var path = this.request.path || \"/\";\n    // S3 doesn't always encode characters > 127 correctly and\n    // all services don't encode characters > 255 correctly\n    // So if there are non-reserved chars (and it's not already all % encoded), just encode them all\n    if (/[^0-9A-Za-z;,/?:@&=+$\\-_.!~*'()#%]/.test(path)) {\n        path = encodeURI(decodeURI(path));\n    }\n    var queryIx = path.indexOf(\"?\"), query = null;\n    if (queryIx >= 0) {\n        query = querystring.parse(path.slice(queryIx + 1));\n        path = path.slice(0, queryIx);\n    }\n    this.parsedPath = {\n        path: path,\n        query: query\n    };\n};\nRequestSigner.prototype.formatPath = function() {\n    var path = this.parsedPath.path, query = this.parsedPath.query;\n    if (!query) return path;\n    // Services don't support empty query string keys\n    if (query[\"\"] != null) delete query[\"\"];\n    return path + \"?\" + encodeRfc3986(querystring.stringify(query));\n};\naws4.RequestSigner = RequestSigner;\naws4.sign = function(request, credentials) {\n    return new RequestSigner(request, credentials).sign();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/aws4/aws4.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/aws4/lru.js":
/*!**********************************!*\
  !*** ./node_modules/aws4/lru.js ***!
  \**********************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = function(size) {\n    return new LruCache(size);\n};\nfunction LruCache(size) {\n    this.capacity = size | 0;\n    this.map = Object.create(null);\n    this.list = new DoublyLinkedList();\n}\nLruCache.prototype.get = function(key) {\n    var node = this.map[key];\n    if (node == null) return undefined;\n    this.used(node);\n    return node.val;\n};\nLruCache.prototype.set = function(key, val) {\n    var node = this.map[key];\n    if (node != null) {\n        node.val = val;\n    } else {\n        if (!this.capacity) this.prune();\n        if (!this.capacity) return false;\n        node = new DoublyLinkedNode(key, val);\n        this.map[key] = node;\n        this.capacity--;\n    }\n    this.used(node);\n    return true;\n};\nLruCache.prototype.used = function(node) {\n    this.list.moveToFront(node);\n};\nLruCache.prototype.prune = function() {\n    var node = this.list.pop();\n    if (node != null) {\n        delete this.map[node.key];\n        this.capacity++;\n    }\n};\nfunction DoublyLinkedList() {\n    this.firstNode = null;\n    this.lastNode = null;\n}\nDoublyLinkedList.prototype.moveToFront = function(node) {\n    if (this.firstNode == node) return;\n    this.remove(node);\n    if (this.firstNode == null) {\n        this.firstNode = node;\n        this.lastNode = node;\n        node.prev = null;\n        node.next = null;\n    } else {\n        node.prev = null;\n        node.next = this.firstNode;\n        node.next.prev = node;\n        this.firstNode = node;\n    }\n};\nDoublyLinkedList.prototype.pop = function() {\n    var lastNode = this.lastNode;\n    if (lastNode != null) {\n        this.remove(lastNode);\n    }\n    return lastNode;\n};\nDoublyLinkedList.prototype.remove = function(node) {\n    if (this.firstNode == node) {\n        this.firstNode = node.next;\n    } else if (node.prev != null) {\n        node.prev.next = node.next;\n    }\n    if (this.lastNode == node) {\n        this.lastNode = node.prev;\n    } else if (node.next != null) {\n        node.next.prev = node.prev;\n    }\n};\nfunction DoublyLinkedNode(key, val) {\n    this.key = key;\n    this.val = val;\n    this.prev = null;\n    this.next = null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9hd3M0L2xydS5qcyIsIm1hcHBpbmdzIjoiO0FBQUFBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxJQUFJO0lBQzVCLE9BQU8sSUFBSUMsU0FBU0Q7QUFDdEI7QUFFQSxTQUFTQyxTQUFTRCxJQUFJO0lBQ3BCLElBQUksQ0FBQ0UsUUFBUSxHQUFHRixPQUFPO0lBQ3ZCLElBQUksQ0FBQ0csR0FBRyxHQUFHQyxPQUFPQyxNQUFNLENBQUM7SUFDekIsSUFBSSxDQUFDQyxJQUFJLEdBQUcsSUFBSUM7QUFDbEI7QUFFQU4sU0FBU08sU0FBUyxDQUFDQyxHQUFHLEdBQUcsU0FBU0MsR0FBRztJQUNuQyxJQUFJQyxPQUFPLElBQUksQ0FBQ1IsR0FBRyxDQUFDTyxJQUFJO0lBQ3hCLElBQUlDLFFBQVEsTUFBTSxPQUFPQztJQUN6QixJQUFJLENBQUNDLElBQUksQ0FBQ0Y7SUFDVixPQUFPQSxLQUFLRyxHQUFHO0FBQ2pCO0FBRUFiLFNBQVNPLFNBQVMsQ0FBQ08sR0FBRyxHQUFHLFNBQVNMLEdBQUcsRUFBRUksR0FBRztJQUN4QyxJQUFJSCxPQUFPLElBQUksQ0FBQ1IsR0FBRyxDQUFDTyxJQUFJO0lBQ3hCLElBQUlDLFFBQVEsTUFBTTtRQUNoQkEsS0FBS0csR0FBRyxHQUFHQTtJQUNiLE9BQU87UUFDTCxJQUFJLENBQUMsSUFBSSxDQUFDWixRQUFRLEVBQUUsSUFBSSxDQUFDYyxLQUFLO1FBQzlCLElBQUksQ0FBQyxJQUFJLENBQUNkLFFBQVEsRUFBRSxPQUFPO1FBQzNCUyxPQUFPLElBQUlNLGlCQUFpQlAsS0FBS0k7UUFDakMsSUFBSSxDQUFDWCxHQUFHLENBQUNPLElBQUksR0FBR0M7UUFDaEIsSUFBSSxDQUFDVCxRQUFRO0lBQ2Y7SUFDQSxJQUFJLENBQUNXLElBQUksQ0FBQ0Y7SUFDVixPQUFPO0FBQ1Q7QUFFQVYsU0FBU08sU0FBUyxDQUFDSyxJQUFJLEdBQUcsU0FBU0YsSUFBSTtJQUNyQyxJQUFJLENBQUNMLElBQUksQ0FBQ1ksV0FBVyxDQUFDUDtBQUN4QjtBQUVBVixTQUFTTyxTQUFTLENBQUNRLEtBQUssR0FBRztJQUN6QixJQUFJTCxPQUFPLElBQUksQ0FBQ0wsSUFBSSxDQUFDYSxHQUFHO0lBQ3hCLElBQUlSLFFBQVEsTUFBTTtRQUNoQixPQUFPLElBQUksQ0FBQ1IsR0FBRyxDQUFDUSxLQUFLRCxHQUFHLENBQUM7UUFDekIsSUFBSSxDQUFDUixRQUFRO0lBQ2Y7QUFDRjtBQUdBLFNBQVNLO0lBQ1AsSUFBSSxDQUFDYSxTQUFTLEdBQUc7SUFDakIsSUFBSSxDQUFDQyxRQUFRLEdBQUc7QUFDbEI7QUFFQWQsaUJBQWlCQyxTQUFTLENBQUNVLFdBQVcsR0FBRyxTQUFTUCxJQUFJO0lBQ3BELElBQUksSUFBSSxDQUFDUyxTQUFTLElBQUlULE1BQU07SUFFNUIsSUFBSSxDQUFDVyxNQUFNLENBQUNYO0lBRVosSUFBSSxJQUFJLENBQUNTLFNBQVMsSUFBSSxNQUFNO1FBQzFCLElBQUksQ0FBQ0EsU0FBUyxHQUFHVDtRQUNqQixJQUFJLENBQUNVLFFBQVEsR0FBR1Y7UUFDaEJBLEtBQUtZLElBQUksR0FBRztRQUNaWixLQUFLYSxJQUFJLEdBQUc7SUFDZCxPQUFPO1FBQ0xiLEtBQUtZLElBQUksR0FBRztRQUNaWixLQUFLYSxJQUFJLEdBQUcsSUFBSSxDQUFDSixTQUFTO1FBQzFCVCxLQUFLYSxJQUFJLENBQUNELElBQUksR0FBR1o7UUFDakIsSUFBSSxDQUFDUyxTQUFTLEdBQUdUO0lBQ25CO0FBQ0Y7QUFFQUosaUJBQWlCQyxTQUFTLENBQUNXLEdBQUcsR0FBRztJQUMvQixJQUFJRSxXQUFXLElBQUksQ0FBQ0EsUUFBUTtJQUM1QixJQUFJQSxZQUFZLE1BQU07UUFDcEIsSUFBSSxDQUFDQyxNQUFNLENBQUNEO0lBQ2Q7SUFDQSxPQUFPQTtBQUNUO0FBRUFkLGlCQUFpQkMsU0FBUyxDQUFDYyxNQUFNLEdBQUcsU0FBU1gsSUFBSTtJQUMvQyxJQUFJLElBQUksQ0FBQ1MsU0FBUyxJQUFJVCxNQUFNO1FBQzFCLElBQUksQ0FBQ1MsU0FBUyxHQUFHVCxLQUFLYSxJQUFJO0lBQzVCLE9BQU8sSUFBSWIsS0FBS1ksSUFBSSxJQUFJLE1BQU07UUFDNUJaLEtBQUtZLElBQUksQ0FBQ0MsSUFBSSxHQUFHYixLQUFLYSxJQUFJO0lBQzVCO0lBQ0EsSUFBSSxJQUFJLENBQUNILFFBQVEsSUFBSVYsTUFBTTtRQUN6QixJQUFJLENBQUNVLFFBQVEsR0FBR1YsS0FBS1ksSUFBSTtJQUMzQixPQUFPLElBQUlaLEtBQUthLElBQUksSUFBSSxNQUFNO1FBQzVCYixLQUFLYSxJQUFJLENBQUNELElBQUksR0FBR1osS0FBS1ksSUFBSTtJQUM1QjtBQUNGO0FBR0EsU0FBU04saUJBQWlCUCxHQUFHLEVBQUVJLEdBQUc7SUFDaEMsSUFBSSxDQUFDSixHQUFHLEdBQUdBO0lBQ1gsSUFBSSxDQUFDSSxHQUFHLEdBQUdBO0lBQ1gsSUFBSSxDQUFDUyxJQUFJLEdBQUc7SUFDWixJQUFJLENBQUNDLElBQUksR0FBRztBQUNkIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW5ub3ZhdGlvbi1jb2FjaC8uL25vZGVfbW9kdWxlcy9hd3M0L2xydS5qcz83NjE4Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oc2l6ZSkge1xuICByZXR1cm4gbmV3IExydUNhY2hlKHNpemUpXG59XG5cbmZ1bmN0aW9uIExydUNhY2hlKHNpemUpIHtcbiAgdGhpcy5jYXBhY2l0eSA9IHNpemUgfCAwXG4gIHRoaXMubWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuICB0aGlzLmxpc3QgPSBuZXcgRG91Ymx5TGlua2VkTGlzdCgpXG59XG5cbkxydUNhY2hlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihrZXkpIHtcbiAgdmFyIG5vZGUgPSB0aGlzLm1hcFtrZXldXG4gIGlmIChub2RlID09IG51bGwpIHJldHVybiB1bmRlZmluZWRcbiAgdGhpcy51c2VkKG5vZGUpXG4gIHJldHVybiBub2RlLnZhbFxufVxuXG5McnVDYWNoZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oa2V5LCB2YWwpIHtcbiAgdmFyIG5vZGUgPSB0aGlzLm1hcFtrZXldXG4gIGlmIChub2RlICE9IG51bGwpIHtcbiAgICBub2RlLnZhbCA9IHZhbFxuICB9IGVsc2Uge1xuICAgIGlmICghdGhpcy5jYXBhY2l0eSkgdGhpcy5wcnVuZSgpXG4gICAgaWYgKCF0aGlzLmNhcGFjaXR5KSByZXR1cm4gZmFsc2VcbiAgICBub2RlID0gbmV3IERvdWJseUxpbmtlZE5vZGUoa2V5LCB2YWwpXG4gICAgdGhpcy5tYXBba2V5XSA9IG5vZGVcbiAgICB0aGlzLmNhcGFjaXR5LS1cbiAgfVxuICB0aGlzLnVzZWQobm9kZSlcbiAgcmV0dXJuIHRydWVcbn1cblxuTHJ1Q2FjaGUucHJvdG90eXBlLnVzZWQgPSBmdW5jdGlvbihub2RlKSB7XG4gIHRoaXMubGlzdC5tb3ZlVG9Gcm9udChub2RlKVxufVxuXG5McnVDYWNoZS5wcm90b3R5cGUucHJ1bmUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGUgPSB0aGlzLmxpc3QucG9wKClcbiAgaWYgKG5vZGUgIT0gbnVsbCkge1xuICAgIGRlbGV0ZSB0aGlzLm1hcFtub2RlLmtleV1cbiAgICB0aGlzLmNhcGFjaXR5KytcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIERvdWJseUxpbmtlZExpc3QoKSB7XG4gIHRoaXMuZmlyc3ROb2RlID0gbnVsbFxuICB0aGlzLmxhc3ROb2RlID0gbnVsbFxufVxuXG5Eb3VibHlMaW5rZWRMaXN0LnByb3RvdHlwZS5tb3ZlVG9Gcm9udCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgaWYgKHRoaXMuZmlyc3ROb2RlID09IG5vZGUpIHJldHVyblxuXG4gIHRoaXMucmVtb3ZlKG5vZGUpXG5cbiAgaWYgKHRoaXMuZmlyc3ROb2RlID09IG51bGwpIHtcbiAgICB0aGlzLmZpcnN0Tm9kZSA9IG5vZGVcbiAgICB0aGlzLmxhc3ROb2RlID0gbm9kZVxuICAgIG5vZGUucHJldiA9IG51bGxcbiAgICBub2RlLm5leHQgPSBudWxsXG4gIH0gZWxzZSB7XG4gICAgbm9kZS5wcmV2ID0gbnVsbFxuICAgIG5vZGUubmV4dCA9IHRoaXMuZmlyc3ROb2RlXG4gICAgbm9kZS5uZXh0LnByZXYgPSBub2RlXG4gICAgdGhpcy5maXJzdE5vZGUgPSBub2RlXG4gIH1cbn1cblxuRG91Ymx5TGlua2VkTGlzdC5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24oKSB7XG4gIHZhciBsYXN0Tm9kZSA9IHRoaXMubGFzdE5vZGVcbiAgaWYgKGxhc3ROb2RlICE9IG51bGwpIHtcbiAgICB0aGlzLnJlbW92ZShsYXN0Tm9kZSlcbiAgfVxuICByZXR1cm4gbGFzdE5vZGVcbn1cblxuRG91Ymx5TGlua2VkTGlzdC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24obm9kZSkge1xuICBpZiAodGhpcy5maXJzdE5vZGUgPT0gbm9kZSkge1xuICAgIHRoaXMuZmlyc3ROb2RlID0gbm9kZS5uZXh0XG4gIH0gZWxzZSBpZiAobm9kZS5wcmV2ICE9IG51bGwpIHtcbiAgICBub2RlLnByZXYubmV4dCA9IG5vZGUubmV4dFxuICB9XG4gIGlmICh0aGlzLmxhc3ROb2RlID09IG5vZGUpIHtcbiAgICB0aGlzLmxhc3ROb2RlID0gbm9kZS5wcmV2XG4gIH0gZWxzZSBpZiAobm9kZS5uZXh0ICE9IG51bGwpIHtcbiAgICBub2RlLm5leHQucHJldiA9IG5vZGUucHJldlxuICB9XG59XG5cblxuZnVuY3Rpb24gRG91Ymx5TGlua2VkTm9kZShrZXksIHZhbCkge1xuICB0aGlzLmtleSA9IGtleVxuICB0aGlzLnZhbCA9IHZhbFxuICB0aGlzLnByZXYgPSBudWxsXG4gIHRoaXMubmV4dCA9IG51bGxcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic2l6ZSIsIkxydUNhY2hlIiwiY2FwYWNpdHkiLCJtYXAiLCJPYmplY3QiLCJjcmVhdGUiLCJsaXN0IiwiRG91Ymx5TGlua2VkTGlzdCIsInByb3RvdHlwZSIsImdldCIsImtleSIsIm5vZGUiLCJ1bmRlZmluZWQiLCJ1c2VkIiwidmFsIiwic2V0IiwicHJ1bmUiLCJEb3VibHlMaW5rZWROb2RlIiwibW92ZVRvRnJvbnQiLCJwb3AiLCJmaXJzdE5vZGUiLCJsYXN0Tm9kZSIsInJlbW92ZSIsInByZXYiLCJuZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/aws4/lru.js\n");

/***/ })

};
;