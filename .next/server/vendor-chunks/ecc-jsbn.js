/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ecc-jsbn";
exports.ids = ["vendor-chunks/ecc-jsbn"];
exports.modules = {

/***/ "(action-browser)/./node_modules/ecc-jsbn/index.js":
/*!****************************************!*\
  !*** ./node_modules/ecc-jsbn/index.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar BigInteger = (__webpack_require__(/*! jsbn */ \"(action-browser)/./node_modules/jsbn/index.js\").BigInteger);\nvar ECPointFp = (__webpack_require__(/*! ./lib/ec.js */ \"(action-browser)/./node_modules/ecc-jsbn/lib/ec.js\").ECPointFp);\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(action-browser)/./node_modules/safer-buffer/safer.js\").Buffer);\nexports.ECCurves = __webpack_require__(/*! ./lib/sec.js */ \"(action-browser)/./node_modules/ecc-jsbn/lib/sec.js\");\n// zero prepad\nfunction unstupid(hex, len) {\n    return hex.length >= len ? hex : unstupid(\"0\" + hex, len);\n}\nexports.ECKey = function(curve, key, isPublic) {\n    var priv;\n    var c = curve();\n    var n = c.getN();\n    var bytes = Math.floor(n.bitLength() / 8);\n    if (key) {\n        if (isPublic) {\n            var curve = c.getCurve();\n            //      var x = key.slice(1,bytes+1); // skip the 04 for uncompressed format\n            //      var y = key.slice(bytes+1);\n            //      this.P = new ECPointFp(curve,\n            //        curve.fromBigInteger(new BigInteger(x.toString(\"hex\"), 16)),\n            //        curve.fromBigInteger(new BigInteger(y.toString(\"hex\"), 16)));      \n            this.P = curve.decodePointHex(key.toString(\"hex\"));\n        } else {\n            if (key.length != bytes) return false;\n            priv = new BigInteger(key.toString(\"hex\"), 16);\n        }\n    } else {\n        var n1 = n.subtract(BigInteger.ONE);\n        var r = new BigInteger(crypto.randomBytes(n.bitLength()));\n        priv = r.mod(n1).add(BigInteger.ONE);\n        this.P = c.getG().multiply(priv);\n    }\n    if (this.P) {\n        //  var pubhex = unstupid(this.P.getX().toBigInteger().toString(16),bytes*2)+unstupid(this.P.getY().toBigInteger().toString(16),bytes*2);\n        //  this.PublicKey = Buffer.from(\"04\"+pubhex,\"hex\");\n        this.PublicKey = Buffer.from(c.getCurve().encodeCompressedPointHex(this.P), \"hex\");\n    }\n    if (priv) {\n        this.PrivateKey = Buffer.from(unstupid(priv.toString(16), bytes * 2), \"hex\");\n        this.deriveSharedSecret = function(key) {\n            if (!key || !key.P) return false;\n            var S = key.P.multiply(priv);\n            return Buffer.from(unstupid(S.getX().toBigInteger().toString(16), bytes * 2), \"hex\");\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9lY2MtanNibi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQyxzQkFBUTtBQUM3QixJQUFJQyxhQUFhRCw2RkFBMEI7QUFDM0MsSUFBSUUsWUFBWUYsd0dBQWdDO0FBQ2hELElBQUlHLFNBQVNILHlHQUE4QjtBQUMzQ0ksaUhBQTBDO0FBRTFDLGNBQWM7QUFDZCxTQUFTRSxTQUFTQyxHQUFHLEVBQUNDLEdBQUc7SUFFeEIsT0FBTyxJQUFLQyxNQUFNLElBQUlELE1BQU9ELE1BQU1ELFNBQVMsTUFBSUMsS0FBSUM7QUFDckQ7QUFFQUosYUFBYSxHQUFHLFNBQVNPLEtBQUssRUFBRUMsR0FBRyxFQUFFQyxRQUFRO0lBRTNDLElBQUlDO0lBQ0wsSUFBSUMsSUFBSUo7SUFDUixJQUFJSyxJQUFJRCxFQUFFRSxJQUFJO0lBQ2IsSUFBSUMsUUFBUUMsS0FBS0MsS0FBSyxDQUFDSixFQUFFSyxTQUFTLEtBQUc7SUFFckMsSUFBR1QsS0FDSDtRQUNFLElBQUdDLFVBQ0g7WUFDRSxJQUFJRixRQUFRSSxFQUFFTyxRQUFRO1lBQzVCLDRFQUE0RTtZQUM1RSxtQ0FBbUM7WUFDbkMscUNBQXFDO1lBQ3JDLHNFQUFzRTtZQUN0RSw2RUFBNkU7WUFDdkUsSUFBSSxDQUFDQyxDQUFDLEdBQUdaLE1BQU1hLGNBQWMsQ0FBQ1osSUFBSWEsUUFBUSxDQUFDO1FBQzdDLE9BQUs7WUFDSCxJQUFHYixJQUFJSCxNQUFNLElBQUlTLE9BQU8sT0FBTztZQUMvQkosT0FBTyxJQUFJYixXQUFXVyxJQUFJYSxRQUFRLENBQUMsUUFBUTtRQUM3QztJQUNGLE9BQUs7UUFDSCxJQUFJQyxLQUFLVixFQUFFVyxRQUFRLENBQUMxQixXQUFXMkIsR0FBRztRQUNsQyxJQUFJQyxJQUFJLElBQUk1QixXQUFXRixPQUFPK0IsV0FBVyxDQUFDZCxFQUFFSyxTQUFTO1FBQ3JEUCxPQUFPZSxFQUFFRSxHQUFHLENBQUNMLElBQUlNLEdBQUcsQ0FBQy9CLFdBQVcyQixHQUFHO1FBQ25DLElBQUksQ0FBQ0wsQ0FBQyxHQUFHUixFQUFFa0IsSUFBSSxHQUFHQyxRQUFRLENBQUNwQjtJQUM3QjtJQUNBLElBQUcsSUFBSSxDQUFDUyxDQUFDLEVBQ1Q7UUFDRix5SUFBeUk7UUFDekksb0RBQW9EO1FBQ2hELElBQUksQ0FBQ1ksU0FBUyxHQUFHaEMsT0FBT2lDLElBQUksQ0FBQ3JCLEVBQUVPLFFBQVEsR0FBR2Usd0JBQXdCLENBQUMsSUFBSSxDQUFDZCxDQUFDLEdBQUU7SUFDN0U7SUFDQSxJQUFHVCxNQUNIO1FBQ0UsSUFBSSxDQUFDd0IsVUFBVSxHQUFHbkMsT0FBT2lDLElBQUksQ0FBQzlCLFNBQVNRLEtBQUtXLFFBQVEsQ0FBQyxLQUFJUCxRQUFNLElBQUc7UUFDbEUsSUFBSSxDQUFDcUIsa0JBQWtCLEdBQUcsU0FBUzNCLEdBQUc7WUFFcEMsSUFBRyxDQUFDQSxPQUFPLENBQUNBLElBQUlXLENBQUMsRUFBRSxPQUFPO1lBQzFCLElBQUlpQixJQUFJNUIsSUFBSVcsQ0FBQyxDQUFDVyxRQUFRLENBQUNwQjtZQUN2QixPQUFPWCxPQUFPaUMsSUFBSSxDQUFDOUIsU0FBU2tDLEVBQUVDLElBQUksR0FBR0MsWUFBWSxHQUFHakIsUUFBUSxDQUFDLEtBQUlQLFFBQU0sSUFBRztRQUM3RTtJQUNEO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbm5vdmF0aW9uLWNvYWNoLy4vbm9kZV9tb2R1bGVzL2VjYy1qc2JuL2luZGV4LmpzPzdkYmQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGNyeXB0byA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG52YXIgQmlnSW50ZWdlciA9IHJlcXVpcmUoXCJqc2JuXCIpLkJpZ0ludGVnZXI7XG52YXIgRUNQb2ludEZwID0gcmVxdWlyZShcIi4vbGliL2VjLmpzXCIpLkVDUG9pbnRGcDtcbnZhciBCdWZmZXIgPSByZXF1aXJlKFwic2FmZXItYnVmZmVyXCIpLkJ1ZmZlcjtcbmV4cG9ydHMuRUNDdXJ2ZXMgPSByZXF1aXJlKFwiLi9saWIvc2VjLmpzXCIpO1xuXG4vLyB6ZXJvIHByZXBhZFxuZnVuY3Rpb24gdW5zdHVwaWQoaGV4LGxlbilcbntcblx0cmV0dXJuIChoZXgubGVuZ3RoID49IGxlbikgPyBoZXggOiB1bnN0dXBpZChcIjBcIitoZXgsbGVuKTtcbn1cblxuZXhwb3J0cy5FQ0tleSA9IGZ1bmN0aW9uKGN1cnZlLCBrZXksIGlzUHVibGljKVxue1xuICB2YXIgcHJpdjtcblx0dmFyIGMgPSBjdXJ2ZSgpO1xuXHR2YXIgbiA9IGMuZ2V0TigpO1xuICB2YXIgYnl0ZXMgPSBNYXRoLmZsb29yKG4uYml0TGVuZ3RoKCkvOCk7XG5cbiAgaWYoa2V5KVxuICB7XG4gICAgaWYoaXNQdWJsaWMpXG4gICAge1xuICAgICAgdmFyIGN1cnZlID0gYy5nZXRDdXJ2ZSgpO1xuLy8gICAgICB2YXIgeCA9IGtleS5zbGljZSgxLGJ5dGVzKzEpOyAvLyBza2lwIHRoZSAwNCBmb3IgdW5jb21wcmVzc2VkIGZvcm1hdFxuLy8gICAgICB2YXIgeSA9IGtleS5zbGljZShieXRlcysxKTtcbi8vICAgICAgdGhpcy5QID0gbmV3IEVDUG9pbnRGcChjdXJ2ZSxcbi8vICAgICAgICBjdXJ2ZS5mcm9tQmlnSW50ZWdlcihuZXcgQmlnSW50ZWdlcih4LnRvU3RyaW5nKFwiaGV4XCIpLCAxNikpLFxuLy8gICAgICAgIGN1cnZlLmZyb21CaWdJbnRlZ2VyKG5ldyBCaWdJbnRlZ2VyKHkudG9TdHJpbmcoXCJoZXhcIiksIDE2KSkpOyAgICAgIFxuICAgICAgdGhpcy5QID0gY3VydmUuZGVjb2RlUG9pbnRIZXgoa2V5LnRvU3RyaW5nKFwiaGV4XCIpKTtcbiAgICB9ZWxzZXtcbiAgICAgIGlmKGtleS5sZW5ndGggIT0gYnl0ZXMpIHJldHVybiBmYWxzZTtcbiAgICAgIHByaXYgPSBuZXcgQmlnSW50ZWdlcihrZXkudG9TdHJpbmcoXCJoZXhcIiksIDE2KTsgICAgICBcbiAgICB9XG4gIH1lbHNle1xuICAgIHZhciBuMSA9IG4uc3VidHJhY3QoQmlnSW50ZWdlci5PTkUpO1xuICAgIHZhciByID0gbmV3IEJpZ0ludGVnZXIoY3J5cHRvLnJhbmRvbUJ5dGVzKG4uYml0TGVuZ3RoKCkpKTtcbiAgICBwcml2ID0gci5tb2QobjEpLmFkZChCaWdJbnRlZ2VyLk9ORSk7XG4gICAgdGhpcy5QID0gYy5nZXRHKCkubXVsdGlwbHkocHJpdik7XG4gIH1cbiAgaWYodGhpcy5QKVxuICB7XG4vLyAgdmFyIHB1YmhleCA9IHVuc3R1cGlkKHRoaXMuUC5nZXRYKCkudG9CaWdJbnRlZ2VyKCkudG9TdHJpbmcoMTYpLGJ5dGVzKjIpK3Vuc3R1cGlkKHRoaXMuUC5nZXRZKCkudG9CaWdJbnRlZ2VyKCkudG9TdHJpbmcoMTYpLGJ5dGVzKjIpO1xuLy8gIHRoaXMuUHVibGljS2V5ID0gQnVmZmVyLmZyb20oXCIwNFwiK3B1YmhleCxcImhleFwiKTtcbiAgICB0aGlzLlB1YmxpY0tleSA9IEJ1ZmZlci5mcm9tKGMuZ2V0Q3VydmUoKS5lbmNvZGVDb21wcmVzc2VkUG9pbnRIZXgodGhpcy5QKSxcImhleFwiKTtcbiAgfVxuICBpZihwcml2KVxuICB7XG4gICAgdGhpcy5Qcml2YXRlS2V5ID0gQnVmZmVyLmZyb20odW5zdHVwaWQocHJpdi50b1N0cmluZygxNiksYnl0ZXMqMiksXCJoZXhcIik7XG4gICAgdGhpcy5kZXJpdmVTaGFyZWRTZWNyZXQgPSBmdW5jdGlvbihrZXkpXG4gICAge1xuICAgICAgaWYoIWtleSB8fCAha2V5LlApIHJldHVybiBmYWxzZTtcbiAgICAgIHZhciBTID0ga2V5LlAubXVsdGlwbHkocHJpdik7XG4gICAgICByZXR1cm4gQnVmZmVyLmZyb20odW5zdHVwaWQoUy5nZXRYKCkudG9CaWdJbnRlZ2VyKCkudG9TdHJpbmcoMTYpLGJ5dGVzKjIpLFwiaGV4XCIpO1xuICAgfSAgICAgXG4gIH1cbn1cblxuIl0sIm5hbWVzIjpbImNyeXB0byIsInJlcXVpcmUiLCJCaWdJbnRlZ2VyIiwiRUNQb2ludEZwIiwiQnVmZmVyIiwiZXhwb3J0cyIsIkVDQ3VydmVzIiwidW5zdHVwaWQiLCJoZXgiLCJsZW4iLCJsZW5ndGgiLCJFQ0tleSIsImN1cnZlIiwia2V5IiwiaXNQdWJsaWMiLCJwcml2IiwiYyIsIm4iLCJnZXROIiwiYnl0ZXMiLCJNYXRoIiwiZmxvb3IiLCJiaXRMZW5ndGgiLCJnZXRDdXJ2ZSIsIlAiLCJkZWNvZGVQb2ludEhleCIsInRvU3RyaW5nIiwibjEiLCJzdWJ0cmFjdCIsIk9ORSIsInIiLCJyYW5kb21CeXRlcyIsIm1vZCIsImFkZCIsImdldEciLCJtdWx0aXBseSIsIlB1YmxpY0tleSIsImZyb20iLCJlbmNvZGVDb21wcmVzc2VkUG9pbnRIZXgiLCJQcml2YXRlS2V5IiwiZGVyaXZlU2hhcmVkU2VjcmV0IiwiUyIsImdldFgiLCJ0b0JpZ0ludGVnZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/ecc-jsbn/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/ecc-jsbn/lib/ec.js":
/*!*****************************************!*\
  !*** ./node_modules/ecc-jsbn/lib/ec.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Basic Javascript Elliptic Curve implementation\n// Ported loosely from BouncyCastle's Java EC code\n// Only Fp curves implemented for now\n// Requires jsbn.js and jsbn2.js\n\nvar BigInteger = (__webpack_require__(/*! jsbn */ \"(action-browser)/./node_modules/jsbn/index.js\").BigInteger);\nvar Barrett = BigInteger.prototype.Barrett;\n// ----------------\n// ECFieldElementFp\n// constructor\nfunction ECFieldElementFp(q1, x) {\n    this.x = x;\n    // TODO if(x.compareTo(q) >= 0) error\n    this.q = q1;\n}\nfunction feFpEquals(other) {\n    if (other == this) return true;\n    return this.q.equals(other.q) && this.x.equals(other.x);\n}\nfunction feFpToBigInteger() {\n    return this.x;\n}\nfunction feFpNegate() {\n    return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));\n}\nfunction feFpAdd(b) {\n    return new ECFieldElementFp(this.q, this.x.add(b.toBigInteger()).mod(this.q));\n}\nfunction feFpSubtract(b) {\n    return new ECFieldElementFp(this.q, this.x.subtract(b.toBigInteger()).mod(this.q));\n}\nfunction feFpMultiply(b) {\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger()).mod(this.q));\n}\nfunction feFpSquare() {\n    return new ECFieldElementFp(this.q, this.x.square().mod(this.q));\n}\nfunction feFpDivide(b) {\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q));\n}\nECFieldElementFp.prototype.equals = feFpEquals;\nECFieldElementFp.prototype.toBigInteger = feFpToBigInteger;\nECFieldElementFp.prototype.negate = feFpNegate;\nECFieldElementFp.prototype.add = feFpAdd;\nECFieldElementFp.prototype.subtract = feFpSubtract;\nECFieldElementFp.prototype.multiply = feFpMultiply;\nECFieldElementFp.prototype.square = feFpSquare;\nECFieldElementFp.prototype.divide = feFpDivide;\n// ----------------\n// ECPointFp\n// constructor\nfunction ECPointFp(curve, x, y, z) {\n    this.curve = curve;\n    this.x = x;\n    this.y = y;\n    // Projective coordinates: either zinv == null or z * zinv == 1\n    // z and zinv are just BigIntegers, not fieldElements\n    if (z == null) {\n        this.z = BigInteger.ONE;\n    } else {\n        this.z = z;\n    }\n    this.zinv = null;\n//TODO: compression flag\n}\nfunction pointFpGetX() {\n    if (this.zinv == null) {\n        this.zinv = this.z.modInverse(this.curve.q);\n    }\n    var r = this.x.toBigInteger().multiply(this.zinv);\n    this.curve.reduce(r);\n    return this.curve.fromBigInteger(r);\n}\nfunction pointFpGetY() {\n    if (this.zinv == null) {\n        this.zinv = this.z.modInverse(this.curve.q);\n    }\n    var r = this.y.toBigInteger().multiply(this.zinv);\n    this.curve.reduce(r);\n    return this.curve.fromBigInteger(r);\n}\nfunction pointFpEquals(other) {\n    if (other == this) return true;\n    if (this.isInfinity()) return other.isInfinity();\n    if (other.isInfinity()) return this.isInfinity();\n    var u, v;\n    // u = Y2 * Z1 - Y1 * Z2\n    u = other.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(other.z)).mod(this.curve.q);\n    if (!u.equals(BigInteger.ZERO)) return false;\n    // v = X2 * Z1 - X1 * Z2\n    v = other.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(other.z)).mod(this.curve.q);\n    return v.equals(BigInteger.ZERO);\n}\nfunction pointFpIsInfinity() {\n    if (this.x == null && this.y == null) return true;\n    return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);\n}\nfunction pointFpNegate() {\n    return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);\n}\nfunction pointFpAdd(b) {\n    if (this.isInfinity()) return b;\n    if (b.isInfinity()) return this;\n    // u = Y2 * Z1 - Y1 * Z2\n    var u = b.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(b.z)).mod(this.curve.q);\n    // v = X2 * Z1 - X1 * Z2\n    var v = b.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(b.z)).mod(this.curve.q);\n    if (BigInteger.ZERO.equals(v)) {\n        if (BigInteger.ZERO.equals(u)) {\n            return this.twice(); // this == b, so double\n        }\n        return this.curve.getInfinity(); // this = -b, so infinity\n    }\n    var THREE = new BigInteger(\"3\");\n    var x1 = this.x.toBigInteger();\n    var y1 = this.y.toBigInteger();\n    var x2 = b.x.toBigInteger();\n    var y2 = b.y.toBigInteger();\n    var v2 = v.square();\n    var v3 = v2.multiply(v);\n    var x1v2 = x1.multiply(v2);\n    var zu2 = u.square().multiply(this.z);\n    // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)\n    var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.q);\n    // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3\n    var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.q);\n    // z3 = v^3 * z1 * z2\n    var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.q);\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n}\nfunction pointFpTwice() {\n    if (this.isInfinity()) return this;\n    if (this.y.toBigInteger().signum() == 0) return this.curve.getInfinity();\n    // TODO: optimized handling of constants\n    var THREE = new BigInteger(\"3\");\n    var x1 = this.x.toBigInteger();\n    var y1 = this.y.toBigInteger();\n    var y1z1 = y1.multiply(this.z);\n    var y1sqz1 = y1z1.multiply(y1).mod(this.curve.q);\n    var a = this.curve.a.toBigInteger();\n    // w = 3 * x1^2 + a * z1^2\n    var w = x1.square().multiply(THREE);\n    if (!BigInteger.ZERO.equals(a)) {\n        w = w.add(this.z.square().multiply(a));\n    }\n    w = w.mod(this.curve.q);\n    //this.curve.reduce(w);\n    // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)\n    var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.q);\n    // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3\n    var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.square().multiply(w)).mod(this.curve.q);\n    // z3 = 8 * (y1 * z1)^3\n    var z3 = y1z1.square().multiply(y1z1).shiftLeft(3).mod(this.curve.q);\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n}\n// Simple NAF (Non-Adjacent Form) multiplication algorithm\n// TODO: modularize the multiplication algorithm\nfunction pointFpMultiply(k) {\n    if (this.isInfinity()) return this;\n    if (k.signum() == 0) return this.curve.getInfinity();\n    var e = k;\n    var h = e.multiply(new BigInteger(\"3\"));\n    var neg = this.negate();\n    var R = this;\n    var i;\n    for(i = h.bitLength() - 2; i > 0; --i){\n        R = R.twice();\n        var hBit = h.testBit(i);\n        var eBit = e.testBit(i);\n        if (hBit != eBit) {\n            R = R.add(hBit ? this : neg);\n        }\n    }\n    return R;\n}\n// Compute this*j + x*k (simultaneous multiplication)\nfunction pointFpMultiplyTwo(j, x, k) {\n    var i;\n    if (j.bitLength() > k.bitLength()) i = j.bitLength() - 1;\n    else i = k.bitLength() - 1;\n    var R = this.curve.getInfinity();\n    var both = this.add(x);\n    while(i >= 0){\n        R = R.twice();\n        if (j.testBit(i)) {\n            if (k.testBit(i)) {\n                R = R.add(both);\n            } else {\n                R = R.add(this);\n            }\n        } else {\n            if (k.testBit(i)) {\n                R = R.add(x);\n            }\n        }\n        --i;\n    }\n    return R;\n}\nECPointFp.prototype.getX = pointFpGetX;\nECPointFp.prototype.getY = pointFpGetY;\nECPointFp.prototype.equals = pointFpEquals;\nECPointFp.prototype.isInfinity = pointFpIsInfinity;\nECPointFp.prototype.negate = pointFpNegate;\nECPointFp.prototype.add = pointFpAdd;\nECPointFp.prototype.twice = pointFpTwice;\nECPointFp.prototype.multiply = pointFpMultiply;\nECPointFp.prototype.multiplyTwo = pointFpMultiplyTwo;\n// ----------------\n// ECCurveFp\n// constructor\nfunction ECCurveFp(q1, a, b) {\n    this.q = q1;\n    this.a = this.fromBigInteger(a);\n    this.b = this.fromBigInteger(b);\n    this.infinity = new ECPointFp(this, null, null);\n    this.reducer = new Barrett(this.q);\n}\nfunction curveFpGetQ() {\n    return this.q;\n}\nfunction curveFpGetA() {\n    return this.a;\n}\nfunction curveFpGetB() {\n    return this.b;\n}\nfunction curveFpEquals(other) {\n    if (other == this) return true;\n    return this.q.equals(other.q) && this.a.equals(other.a) && this.b.equals(other.b);\n}\nfunction curveFpGetInfinity() {\n    return this.infinity;\n}\nfunction curveFpFromBigInteger(x) {\n    return new ECFieldElementFp(this.q, x);\n}\nfunction curveReduce(x) {\n    this.reducer.reduce(x);\n}\n// for now, work with hex strings because they're easier in JS\nfunction curveFpDecodePointHex(s) {\n    switch(parseInt(s.substr(0, 2), 16)){\n        case 0:\n            return this.infinity;\n        case 2:\n        case 3:\n            // point compression not supported yet\n            return null;\n        case 4:\n        case 6:\n        case 7:\n            var len = (s.length - 2) / 2;\n            var xHex = s.substr(2, len);\n            var yHex = s.substr(len + 2, len);\n            return new ECPointFp(this, this.fromBigInteger(new BigInteger(xHex, 16)), this.fromBigInteger(new BigInteger(yHex, 16)));\n        default:\n            return null;\n    }\n}\nfunction curveFpEncodePointHex(p) {\n    if (p.isInfinity()) return \"00\";\n    var xHex = p.getX().toBigInteger().toString(16);\n    var yHex = p.getY().toBigInteger().toString(16);\n    var oLen = this.getQ().toString(16).length;\n    if (oLen % 2 != 0) oLen++;\n    while(xHex.length < oLen){\n        xHex = \"0\" + xHex;\n    }\n    while(yHex.length < oLen){\n        yHex = \"0\" + yHex;\n    }\n    return \"04\" + xHex + yHex;\n}\nECCurveFp.prototype.getQ = curveFpGetQ;\nECCurveFp.prototype.getA = curveFpGetA;\nECCurveFp.prototype.getB = curveFpGetB;\nECCurveFp.prototype.equals = curveFpEquals;\nECCurveFp.prototype.getInfinity = curveFpGetInfinity;\nECCurveFp.prototype.fromBigInteger = curveFpFromBigInteger;\nECCurveFp.prototype.reduce = curveReduce;\n//ECCurveFp.prototype.decodePointHex = curveFpDecodePointHex;\nECCurveFp.prototype.encodePointHex = curveFpEncodePointHex;\n// from: https://github.com/kaielvin/jsbn-ec-point-compression\nECCurveFp.prototype.decodePointHex = function(s) {\n    var yIsEven;\n    switch(parseInt(s.substr(0, 2), 16)){\n        case 0:\n            return this.infinity;\n        case 2:\n            yIsEven = false;\n        case 3:\n            if (yIsEven == undefined) yIsEven = true;\n            var len = s.length - 2;\n            var xHex = s.substr(2, len);\n            var x = this.fromBigInteger(new BigInteger(xHex, 16));\n            var alpha = x.multiply(x.square().add(this.getA())).add(this.getB());\n            var beta = alpha.sqrt();\n            if (beta == null) throw \"Invalid point compression\";\n            var betaValue = beta.toBigInteger();\n            if (betaValue.testBit(0) != yIsEven) {\n                // Use the other root\n                beta = this.fromBigInteger(this.getQ().subtract(betaValue));\n            }\n            return new ECPointFp(this, x, beta);\n        case 4:\n        case 6:\n        case 7:\n            var len = (s.length - 2) / 2;\n            var xHex = s.substr(2, len);\n            var yHex = s.substr(len + 2, len);\n            return new ECPointFp(this, this.fromBigInteger(new BigInteger(xHex, 16)), this.fromBigInteger(new BigInteger(yHex, 16)));\n        default:\n            return null;\n    }\n};\nECCurveFp.prototype.encodeCompressedPointHex = function(p) {\n    if (p.isInfinity()) return \"00\";\n    var xHex = p.getX().toBigInteger().toString(16);\n    var oLen = this.getQ().toString(16).length;\n    if (oLen % 2 != 0) oLen++;\n    while(xHex.length < oLen)xHex = \"0\" + xHex;\n    var yPrefix;\n    if (p.getY().toBigInteger().isEven()) yPrefix = \"02\";\n    else yPrefix = \"03\";\n    return yPrefix + xHex;\n};\nECFieldElementFp.prototype.getR = function() {\n    if (this.r != undefined) return this.r;\n    this.r = null;\n    var bitLength = this.q.bitLength();\n    if (bitLength > 128) {\n        var firstWord = this.q.shiftRight(bitLength - 64);\n        if (firstWord.intValue() == -1) {\n            this.r = BigInteger.ONE.shiftLeft(bitLength).subtract(this.q);\n        }\n    }\n    return this.r;\n};\nECFieldElementFp.prototype.modMult = function(x1, x2) {\n    return this.modReduce(x1.multiply(x2));\n};\nECFieldElementFp.prototype.modReduce = function(x) {\n    if (this.getR() != null) {\n        var qLen = q.bitLength();\n        while(x.bitLength() > qLen + 1){\n            var u = x.shiftRight(qLen);\n            var v = x.subtract(u.shiftLeft(qLen));\n            if (!this.getR().equals(BigInteger.ONE)) {\n                u = u.multiply(this.getR());\n            }\n            x = u.add(v);\n        }\n        while(x.compareTo(q) >= 0){\n            x = x.subtract(q);\n        }\n    } else {\n        x = x.mod(q);\n    }\n    return x;\n};\nECFieldElementFp.prototype.sqrt = function() {\n    if (!this.q.testBit(0)) throw \"unsupported\";\n    // p mod 4 == 3\n    if (this.q.testBit(1)) {\n        var z = new ECFieldElementFp(this.q, this.x.modPow(this.q.shiftRight(2).add(BigInteger.ONE), this.q));\n        return z.square().equals(this) ? z : null;\n    }\n    // p mod 4 == 1\n    var qMinusOne = this.q.subtract(BigInteger.ONE);\n    var legendreExponent = qMinusOne.shiftRight(1);\n    if (!this.x.modPow(legendreExponent, this.q).equals(BigInteger.ONE)) {\n        return null;\n    }\n    var u = qMinusOne.shiftRight(2);\n    var k = u.shiftLeft(1).add(BigInteger.ONE);\n    var Q = this.x;\n    var fourQ = modDouble(modDouble(Q));\n    var U, V;\n    do {\n        var P;\n        do {\n            P = new BigInteger(this.q.bitLength(), new SecureRandom());\n        }while (P.compareTo(this.q) >= 0 || !P.multiply(P).subtract(fourQ).modPow(legendreExponent, this.q).equals(qMinusOne));\n        var result = this.lucasSequence(P, Q, k);\n        U = result[0];\n        V = result[1];\n        if (this.modMult(V, V).equals(fourQ)) {\n            // Integer division by 2, mod q\n            if (V.testBit(0)) {\n                V = V.add(q);\n            }\n            V = V.shiftRight(1);\n            return new ECFieldElementFp(q, V);\n        }\n    }while (U.equals(BigInteger.ONE) || U.equals(qMinusOne));\n    return null;\n};\nECFieldElementFp.prototype.lucasSequence = function(P, Q, k) {\n    var n = k.bitLength();\n    var s = k.getLowestSetBit();\n    var Uh = BigInteger.ONE;\n    var Vl = BigInteger.TWO;\n    var Vh = P;\n    var Ql = BigInteger.ONE;\n    var Qh = BigInteger.ONE;\n    for(var j = n - 1; j >= s + 1; --j){\n        Ql = this.modMult(Ql, Qh);\n        if (k.testBit(j)) {\n            Qh = this.modMult(Ql, Q);\n            Uh = this.modMult(Uh, Vh);\n            Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n            Vh = this.modReduce(Vh.multiply(Vh).subtract(Qh.shiftLeft(1)));\n        } else {\n            Qh = Ql;\n            Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));\n            Vh = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n            Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));\n        }\n    }\n    Ql = this.modMult(Ql, Qh);\n    Qh = this.modMult(Ql, Q);\n    Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));\n    Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n    Ql = this.modMult(Ql, Qh);\n    for(var j = 1; j <= s; ++j){\n        Uh = this.modMult(Uh, Vl);\n        Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));\n        Ql = this.modMult(Ql, Ql);\n    }\n    return [\n        Uh,\n        Vl\n    ];\n};\nvar exports = {\n    ECCurveFp: ECCurveFp,\n    ECPointFp: ECPointFp,\n    ECFieldElementFp: ECFieldElementFp\n};\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/ecc-jsbn/lib/ec.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/ecc-jsbn/lib/sec.js":
/*!******************************************!*\
  !*** ./node_modules/ecc-jsbn/lib/sec.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Named EC curves\n// Requires ec.js, jsbn.js, and jsbn2.js\n\nvar BigInteger = (__webpack_require__(/*! jsbn */ \"(action-browser)/./node_modules/jsbn/index.js\").BigInteger);\nvar ECCurveFp = (__webpack_require__(/*! ./ec.js */ \"(action-browser)/./node_modules/ecc-jsbn/lib/ec.js\").ECCurveFp);\n// ----------------\n// X9ECParameters\n// constructor\nfunction X9ECParameters(curve, g, n, h) {\n    this.curve = curve;\n    this.g = g;\n    this.n = n;\n    this.h = h;\n}\nfunction x9getCurve() {\n    return this.curve;\n}\nfunction x9getG() {\n    return this.g;\n}\nfunction x9getN() {\n    return this.n;\n}\nfunction x9getH() {\n    return this.h;\n}\nX9ECParameters.prototype.getCurve = x9getCurve;\nX9ECParameters.prototype.getG = x9getG;\nX9ECParameters.prototype.getN = x9getN;\nX9ECParameters.prototype.getH = x9getH;\n// ----------------\n// SECNamedCurves\nfunction fromHex(s) {\n    return new BigInteger(s, 16);\n}\nfunction secp128r1() {\n    // p = 2^128 - 2^97 - 1\n    var p = fromHex(\"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF\");\n    var a = fromHex(\"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC\");\n    var b = fromHex(\"E87579C11079F43DD824993C2CEE5ED3\");\n    //byte[] S = Hex.decode(\"000E0D4D696E6768756151750CC03A4473D03679\");\n    var n = fromHex(\"FFFFFFFE0000000075A30D1B9038A115\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"161FF7528B899B2D0C28607CA52C5B86\" + \"CF5AC8395BAFEB13C02DA292DDED7A83\");\n    return new X9ECParameters(curve, G, n, h);\n}\nfunction secp160k1() {\n    // p = 2^160 - 2^32 - 2^14 - 2^12 - 2^9 - 2^8 - 2^7 - 2^3 - 2^2 - 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73\");\n    var a = BigInteger.ZERO;\n    var b = fromHex(\"7\");\n    //byte[] S = null;\n    var n = fromHex(\"0100000000000000000001B8FA16DFAB9ACA16B6B3\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"3B4C382CE37AA192A4019E763036F4F5DD4D7EBB\" + \"938CF935318FDCED6BC28286531733C3F03C4FEE\");\n    return new X9ECParameters(curve, G, n, h);\n}\nfunction secp160r1() {\n    // p = 2^160 - 2^31 - 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF\");\n    var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC\");\n    var b = fromHex(\"1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45\");\n    //byte[] S = Hex.decode(\"1053CDE42C14D696E67687561517533BF3F83345\");\n    var n = fromHex(\"0100000000000000000001F4C8F927AED3CA752257\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"4A96B5688EF573284664698968C38BB913CBFC82\" + \"23A628553168947D59DCC912042351377AC5FB32\");\n    return new X9ECParameters(curve, G, n, h);\n}\nfunction secp192k1() {\n    // p = 2^192 - 2^32 - 2^12 - 2^8 - 2^7 - 2^6 - 2^3 - 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37\");\n    var a = BigInteger.ZERO;\n    var b = fromHex(\"3\");\n    //byte[] S = null;\n    var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D\" + \"9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D\");\n    return new X9ECParameters(curve, G, n, h);\n}\nfunction secp192r1() {\n    // p = 2^192 - 2^64 - 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF\");\n    var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC\");\n    var b = fromHex(\"64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1\");\n    //byte[] S = Hex.decode(\"3045AE6FC8422F64ED579528D38120EAE12196D5\");\n    var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012\" + \"07192B95FFC8DA78631011ED6B24CDD573F977A11E794811\");\n    return new X9ECParameters(curve, G, n, h);\n}\nfunction secp224r1() {\n    // p = 2^224 - 2^96 + 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001\");\n    var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE\");\n    var b = fromHex(\"B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4\");\n    //byte[] S = Hex.decode(\"BD71344799D5C7FCDC45B59FA3B9AB8F6A948BC5\");\n    var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21\" + \"BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34\");\n    return new X9ECParameters(curve, G, n, h);\n}\nfunction secp256r1() {\n    // p = 2^224 (2^32 - 1) + 2^192 + 2^96 - 1\n    var p = fromHex(\"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\");\n    var a = fromHex(\"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC\");\n    var b = fromHex(\"5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B\");\n    //byte[] S = Hex.decode(\"C49D360886E704936A6678E1139D26B7819F7E90\");\n    var n = fromHex(\"FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\" + \"6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296\" + \"4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5\");\n    return new X9ECParameters(curve, G, n, h);\n}\n// TODO: make this into a proper hashtable\nfunction getSECCurveByName(name) {\n    if (name == \"secp128r1\") return secp128r1();\n    if (name == \"secp160k1\") return secp160k1();\n    if (name == \"secp160r1\") return secp160r1();\n    if (name == \"secp192k1\") return secp192k1();\n    if (name == \"secp192r1\") return secp192r1();\n    if (name == \"secp224r1\") return secp224r1();\n    if (name == \"secp256r1\") return secp256r1();\n    return null;\n}\nmodule.exports = {\n    \"secp128r1\": secp128r1,\n    \"secp160k1\": secp160k1,\n    \"secp160r1\": secp160r1,\n    \"secp192k1\": secp192k1,\n    \"secp192r1\": secp192r1,\n    \"secp224r1\": secp224r1,\n    \"secp256r1\": secp256r1\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/ecc-jsbn/lib/sec.js\n");

/***/ })

};
;