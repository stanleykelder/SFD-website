/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/extsprintf";
exports.ids = ["vendor-chunks/extsprintf"];
exports.modules = {

/***/ "(action-browser)/./node_modules/extsprintf/lib/extsprintf.js":
/*!***************************************************!*\
  !*** ./node_modules/extsprintf/lib/extsprintf.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*\n * extsprintf.js: extended POSIX-style sprintf\n */ var mod_assert = __webpack_require__(/*! assert */ \"assert\");\nvar mod_util = __webpack_require__(/*! util */ \"util\");\n/*\n * Public interface\n */ exports.sprintf = jsSprintf;\nexports.printf = jsPrintf;\nexports.fprintf = jsFprintf;\n/*\n * Stripped down version of s[n]printf(3c).  We make a best effort to throw an\n * exception when given a format string we don't understand, rather than\n * ignoring it, so that we won't break existing programs if/when we go implement\n * the rest of this.\n *\n * This implementation currently supports specifying\n *\t- field alignment ('-' flag),\n * \t- zero-pad ('0' flag)\n *\t- always show numeric sign ('+' flag),\n *\t- field width\n *\t- conversions for strings, decimal integers, and floats (numbers).\n *\t- argument size specifiers.  These are all accepted but ignored, since\n *\t  Javascript has no notion of the physical size of an argument.\n *\n * Everything else is currently unsupported, most notably precision, unsigned\n * numbers, non-decimal numbers, and characters.\n */ function jsSprintf(fmt) {\n    var regex = [\n        \"([^%]*)\",\n        /* normal text */ \"%\",\n        /* start of format */ \"(['\\\\-+ #0]*?)\",\n        /* flags (optional) */ \"([1-9]\\\\d*)?\",\n        /* width (optional) */ \"(\\\\.([1-9]\\\\d*))?\",\n        /* precision (optional) */ \"[lhjztL]*?\",\n        /* length mods (ignored) */ \"([diouxXfFeEgGaAcCsSp%jr])\" /* conversion */ \n    ].join(\"\");\n    var re = new RegExp(regex);\n    var args = Array.prototype.slice.call(arguments, 1);\n    var flags, width, precision, conversion;\n    var left, pad, sign, arg, match;\n    var ret = \"\";\n    var argn = 1;\n    mod_assert.equal(\"string\", typeof fmt);\n    while((match = re.exec(fmt)) !== null){\n        ret += match[1];\n        fmt = fmt.substring(match[0].length);\n        flags = match[2] || \"\";\n        width = match[3] || 0;\n        precision = match[4] || \"\";\n        conversion = match[6];\n        left = false;\n        sign = false;\n        pad = \" \";\n        if (conversion == \"%\") {\n            ret += \"%\";\n            continue;\n        }\n        if (args.length === 0) throw new Error(\"too few args to sprintf\");\n        arg = args.shift();\n        argn++;\n        if (flags.match(/[\\' #]/)) throw new Error(\"unsupported flags: \" + flags);\n        if (precision.length > 0) throw new Error(\"non-zero precision not supported\");\n        if (flags.match(/-/)) left = true;\n        if (flags.match(/0/)) pad = \"0\";\n        if (flags.match(/\\+/)) sign = true;\n        switch(conversion){\n            case \"s\":\n                if (arg === undefined || arg === null) throw new Error(\"argument \" + argn + \": attempted to print undefined or null \" + \"as a string\");\n                ret += doPad(pad, width, left, arg.toString());\n                break;\n            case \"d\":\n                arg = Math.floor(arg);\n            /*jsl:fallthru*/ case \"f\":\n                sign = sign && arg > 0 ? \"+\" : \"\";\n                ret += sign + doPad(pad, width, left, arg.toString());\n                break;\n            case \"x\":\n                ret += doPad(pad, width, left, arg.toString(16));\n                break;\n            case \"j\":\n                /* non-standard */ if (width === 0) width = 10;\n                ret += mod_util.inspect(arg, false, width);\n                break;\n            case \"r\":\n                /* non-standard */ ret += dumpException(arg);\n                break;\n            default:\n                throw new Error(\"unsupported conversion: \" + conversion);\n        }\n    }\n    ret += fmt;\n    return ret;\n}\nfunction jsPrintf() {\n    var args = Array.prototype.slice.call(arguments);\n    args.unshift(process.stdout);\n    jsFprintf.apply(null, args);\n}\nfunction jsFprintf(stream) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    return stream.write(jsSprintf.apply(this, args));\n}\nfunction doPad(chr, width, left, str) {\n    var ret = str;\n    while(ret.length < width){\n        if (left) ret += chr;\n        else ret = chr + ret;\n    }\n    return ret;\n}\n/*\n * This function dumps long stack traces for exceptions having a cause() method.\n * See node-verror for an example.\n */ function dumpException(ex) {\n    var ret;\n    if (!(ex instanceof Error)) throw new Error(jsSprintf(\"invalid type for %%r: %j\", ex));\n    /* Note that V8 prepends \"ex.stack\" with ex.toString(). */ ret = \"EXCEPTION: \" + ex.constructor.name + \": \" + ex.stack;\n    if (ex.cause && typeof ex.cause === \"function\") {\n        var cex = ex.cause();\n        if (cex) {\n            ret += \"\\nCaused by: \" + dumpException(cex);\n        }\n    }\n    return ret;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/extsprintf/lib/extsprintf.js\n");

/***/ })

};
;