"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/http-signature";
exports.ids = ["vendor-chunks/http-signature"];
exports.modules = {

/***/ "(action-browser)/./node_modules/http-signature/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/http-signature/lib/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nvar parser = __webpack_require__(/*! ./parser */ \"(action-browser)/./node_modules/http-signature/lib/parser.js\");\nvar signer = __webpack_require__(/*! ./signer */ \"(action-browser)/./node_modules/http-signature/lib/signer.js\");\nvar verify = __webpack_require__(/*! ./verify */ \"(action-browser)/./node_modules/http-signature/lib/verify.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(action-browser)/./node_modules/http-signature/lib/utils.js\");\n///--- API\nmodule.exports = {\n    parse: parser.parseRequest,\n    parseRequest: parser.parseRequest,\n    sign: signer.signRequest,\n    signRequest: signer.signRequest,\n    createSigner: signer.createSigner,\n    isSigner: signer.isSigner,\n    sshKeyToPEM: utils.sshKeyToPEM,\n    sshKeyFingerprint: utils.fingerprint,\n    pemToRsaSSHKey: utils.pemToRsaSSHKey,\n    verify: verify.verifySignature,\n    verifySignature: verify.verifySignature,\n    verifyHMAC: verify.verifyHMAC\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9odHRwLXNpZ25hdHVyZS9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsOEJBQThCOztBQUU5QixJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUNyQixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJRSxTQUFTRixtQkFBT0EsQ0FBQztBQUNyQixJQUFJRyxRQUFRSCxtQkFBT0EsQ0FBQztBQUlwQixVQUFVO0FBRVZJLE9BQU9DLE9BQU8sR0FBRztJQUVmQyxPQUFPUCxPQUFPUSxZQUFZO0lBQzFCQSxjQUFjUixPQUFPUSxZQUFZO0lBRWpDQyxNQUFNUCxPQUFPUSxXQUFXO0lBQ3hCQSxhQUFhUixPQUFPUSxXQUFXO0lBQy9CQyxjQUFjVCxPQUFPUyxZQUFZO0lBQ2pDQyxVQUFVVixPQUFPVSxRQUFRO0lBRXpCQyxhQUFhVCxNQUFNUyxXQUFXO0lBQzlCQyxtQkFBbUJWLE1BQU1XLFdBQVc7SUFDcENDLGdCQUFnQlosTUFBTVksY0FBYztJQUVwQ2IsUUFBUUEsT0FBT2MsZUFBZTtJQUM5QkEsaUJBQWlCZCxPQUFPYyxlQUFlO0lBQ3ZDQyxZQUFZZixPQUFPZSxVQUFVO0FBQy9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW5ub3ZhdGlvbi1jb2FjaC8uL25vZGVfbW9kdWxlcy9odHRwLXNpZ25hdHVyZS9saWIvaW5kZXguanM/NjJiZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNSBKb3llbnQsIEluYy5cblxudmFyIHBhcnNlciA9IHJlcXVpcmUoJy4vcGFyc2VyJyk7XG52YXIgc2lnbmVyID0gcmVxdWlyZSgnLi9zaWduZXInKTtcbnZhciB2ZXJpZnkgPSByZXF1aXJlKCcuL3ZlcmlmeScpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5cblxuLy8vLS0tIEFQSVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICBwYXJzZTogcGFyc2VyLnBhcnNlUmVxdWVzdCxcbiAgcGFyc2VSZXF1ZXN0OiBwYXJzZXIucGFyc2VSZXF1ZXN0LFxuXG4gIHNpZ246IHNpZ25lci5zaWduUmVxdWVzdCxcbiAgc2lnblJlcXVlc3Q6IHNpZ25lci5zaWduUmVxdWVzdCxcbiAgY3JlYXRlU2lnbmVyOiBzaWduZXIuY3JlYXRlU2lnbmVyLFxuICBpc1NpZ25lcjogc2lnbmVyLmlzU2lnbmVyLFxuXG4gIHNzaEtleVRvUEVNOiB1dGlscy5zc2hLZXlUb1BFTSxcbiAgc3NoS2V5RmluZ2VycHJpbnQ6IHV0aWxzLmZpbmdlcnByaW50LFxuICBwZW1Ub1JzYVNTSEtleTogdXRpbHMucGVtVG9Sc2FTU0hLZXksXG5cbiAgdmVyaWZ5OiB2ZXJpZnkudmVyaWZ5U2lnbmF0dXJlLFxuICB2ZXJpZnlTaWduYXR1cmU6IHZlcmlmeS52ZXJpZnlTaWduYXR1cmUsXG4gIHZlcmlmeUhNQUM6IHZlcmlmeS52ZXJpZnlITUFDXG59O1xuIl0sIm5hbWVzIjpbInBhcnNlciIsInJlcXVpcmUiLCJzaWduZXIiLCJ2ZXJpZnkiLCJ1dGlscyIsIm1vZHVsZSIsImV4cG9ydHMiLCJwYXJzZSIsInBhcnNlUmVxdWVzdCIsInNpZ24iLCJzaWduUmVxdWVzdCIsImNyZWF0ZVNpZ25lciIsImlzU2lnbmVyIiwic3NoS2V5VG9QRU0iLCJzc2hLZXlGaW5nZXJwcmludCIsImZpbmdlcnByaW50IiwicGVtVG9Sc2FTU0hLZXkiLCJ2ZXJpZnlTaWduYXR1cmUiLCJ2ZXJpZnlITUFDIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/http-signature/lib/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/http-signature/lib/parser.js":
/*!***************************************************!*\
  !*** ./node_modules/http-signature/lib/parser.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = __webpack_require__(/*! assert-plus */ \"(action-browser)/./node_modules/assert-plus/assert.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar utils = __webpack_require__(/*! ./utils */ \"(action-browser)/./node_modules/http-signature/lib/utils.js\");\n///--- Globals\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar validateAlgorithm = utils.validateAlgorithm;\nvar State = {\n    New: 0,\n    Params: 1\n};\nvar ParamsState = {\n    Name: 0,\n    Quote: 1,\n    Value: 2,\n    Comma: 3\n};\n///--- Specific Errors\nfunction ExpiredRequestError(message) {\n    HttpSignatureError.call(this, message, ExpiredRequestError);\n}\nutil.inherits(ExpiredRequestError, HttpSignatureError);\nfunction InvalidHeaderError(message) {\n    HttpSignatureError.call(this, message, InvalidHeaderError);\n}\nutil.inherits(InvalidHeaderError, HttpSignatureError);\nfunction InvalidParamsError(message) {\n    HttpSignatureError.call(this, message, InvalidParamsError);\n}\nutil.inherits(InvalidParamsError, HttpSignatureError);\nfunction MissingHeaderError(message) {\n    HttpSignatureError.call(this, message, MissingHeaderError);\n}\nutil.inherits(MissingHeaderError, HttpSignatureError);\nfunction StrictParsingError(message) {\n    HttpSignatureError.call(this, message, StrictParsingError);\n}\nutil.inherits(StrictParsingError, HttpSignatureError);\n///--- Exported API\nmodule.exports = {\n    /**\n   * Parses the 'Authorization' header out of an http.ServerRequest object.\n   *\n   * Note that this API will fully validate the Authorization header, and throw\n   * on any error.  It will not however check the signature, or the keyId format\n   * as those are specific to your environment.  You can use the options object\n   * to pass in extra constraints.\n   *\n   * As a response object you can expect this:\n   *\n   *     {\n   *       \"scheme\": \"Signature\",\n   *       \"params\": {\n   *         \"keyId\": \"foo\",\n   *         \"algorithm\": \"rsa-sha256\",\n   *         \"headers\": [\n   *           \"date\" or \"x-date\",\n   *           \"digest\"\n   *         ],\n   *         \"signature\": \"base64\"\n   *       },\n   *       \"signingString\": \"ready to be passed to crypto.verify()\"\n   *     }\n   *\n   * @param {Object} request an http.ServerRequest.\n   * @param {Object} options an optional options object with:\n   *                   - clockSkew: allowed clock skew in seconds (default 300).\n   *                   - headers: required header names (def: date or x-date)\n   *                   - algorithms: algorithms to support (default: all).\n   *                   - strict: should enforce latest spec parsing\n   *                             (default: false).\n   * @return {Object} parsed out object (see above).\n   * @throws {TypeError} on invalid input.\n   * @throws {InvalidHeaderError} on an invalid Authorization header error.\n   * @throws {InvalidParamsError} if the params in the scheme are invalid.\n   * @throws {MissingHeaderError} if the params indicate a header not present,\n   *                              either in the request headers from the params,\n   *                              or not in the params from a required header\n   *                              in options.\n   * @throws {StrictParsingError} if old attributes are used in strict parsing\n   *                              mode.\n   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.\n   */ parseRequest: function parseRequest(request, options) {\n        assert.object(request, \"request\");\n        assert.object(request.headers, \"request.headers\");\n        if (options === undefined) {\n            options = {};\n        }\n        if (options.headers === undefined) {\n            options.headers = [\n                request.headers[\"x-date\"] ? \"x-date\" : \"date\"\n            ];\n        }\n        assert.object(options, \"options\");\n        assert.arrayOfString(options.headers, \"options.headers\");\n        assert.optionalFinite(options.clockSkew, \"options.clockSkew\");\n        var authzHeaderName = options.authorizationHeaderName || \"authorization\";\n        if (!request.headers[authzHeaderName]) {\n            throw new MissingHeaderError(\"no \" + authzHeaderName + \" header \" + \"present in the request\");\n        }\n        options.clockSkew = options.clockSkew || 300;\n        var i = 0;\n        var state = State.New;\n        var substate = ParamsState.Name;\n        var tmpName = \"\";\n        var tmpValue = \"\";\n        var parsed = {\n            scheme: \"\",\n            params: {},\n            signingString: \"\"\n        };\n        var authz = request.headers[authzHeaderName];\n        for(i = 0; i < authz.length; i++){\n            var c = authz.charAt(i);\n            switch(Number(state)){\n                case State.New:\n                    if (c !== \" \") parsed.scheme += c;\n                    else state = State.Params;\n                    break;\n                case State.Params:\n                    switch(Number(substate)){\n                        case ParamsState.Name:\n                            var code = c.charCodeAt(0);\n                            // restricted name of A-Z / a-z\n                            if (code >= 0x41 && code <= 0x5a || // A-Z\n                            code >= 0x61 && code <= 0x7a) {\n                                tmpName += c;\n                            } else if (c === \"=\") {\n                                if (tmpName.length === 0) throw new InvalidHeaderError(\"bad param format\");\n                                substate = ParamsState.Quote;\n                            } else {\n                                throw new InvalidHeaderError(\"bad param format\");\n                            }\n                            break;\n                        case ParamsState.Quote:\n                            if (c === '\"') {\n                                tmpValue = \"\";\n                                substate = ParamsState.Value;\n                            } else {\n                                throw new InvalidHeaderError(\"bad param format\");\n                            }\n                            break;\n                        case ParamsState.Value:\n                            if (c === '\"') {\n                                parsed.params[tmpName] = tmpValue;\n                                substate = ParamsState.Comma;\n                            } else {\n                                tmpValue += c;\n                            }\n                            break;\n                        case ParamsState.Comma:\n                            if (c === \",\") {\n                                tmpName = \"\";\n                                substate = ParamsState.Name;\n                            } else {\n                                throw new InvalidHeaderError(\"bad param format\");\n                            }\n                            break;\n                        default:\n                            throw new Error(\"Invalid substate\");\n                    }\n                    break;\n                default:\n                    throw new Error(\"Invalid substate\");\n            }\n        }\n        if (!parsed.params.headers || parsed.params.headers === \"\") {\n            if (request.headers[\"x-date\"]) {\n                parsed.params.headers = [\n                    \"x-date\"\n                ];\n            } else {\n                parsed.params.headers = [\n                    \"date\"\n                ];\n            }\n        } else {\n            parsed.params.headers = parsed.params.headers.split(\" \");\n        }\n        // Minimally validate the parsed object\n        if (!parsed.scheme || parsed.scheme !== \"Signature\") throw new InvalidHeaderError('scheme was not \"Signature\"');\n        if (!parsed.params.keyId) throw new InvalidHeaderError(\"keyId was not specified\");\n        if (!parsed.params.algorithm) throw new InvalidHeaderError(\"algorithm was not specified\");\n        if (!parsed.params.signature) throw new InvalidHeaderError(\"signature was not specified\");\n        // Check the algorithm against the official list\n        parsed.params.algorithm = parsed.params.algorithm.toLowerCase();\n        try {\n            validateAlgorithm(parsed.params.algorithm);\n        } catch (e) {\n            if (e instanceof InvalidAlgorithmError) throw new InvalidParamsError(parsed.params.algorithm + \" is not \" + \"supported\");\n            else throw e;\n        }\n        // Build the signingString\n        for(i = 0; i < parsed.params.headers.length; i++){\n            var h = parsed.params.headers[i].toLowerCase();\n            parsed.params.headers[i] = h;\n            if (h === \"request-line\") {\n                if (!options.strict) {\n                    /*\n           * We allow headers from the older spec drafts if strict parsing isn't\n           * specified in options.\n           */ parsed.signingString += request.method + \" \" + request.url + \" HTTP/\" + request.httpVersion;\n                } else {\n                    /* Strict parsing doesn't allow older draft headers. */ throw new StrictParsingError(\"request-line is not a valid header \" + \"with strict parsing enabled.\");\n                }\n            } else if (h === \"(request-target)\") {\n                parsed.signingString += \"(request-target): \" + request.method.toLowerCase() + \" \" + request.url;\n            } else {\n                var value = request.headers[h];\n                if (value === undefined) throw new MissingHeaderError(h + \" was not in the request\");\n                parsed.signingString += h + \": \" + value;\n            }\n            if (i + 1 < parsed.params.headers.length) parsed.signingString += \"\\n\";\n        }\n        // Check against the constraints\n        var date;\n        if (request.headers.date || request.headers[\"x-date\"]) {\n            if (request.headers[\"x-date\"]) {\n                date = new Date(request.headers[\"x-date\"]);\n            } else {\n                date = new Date(request.headers.date);\n            }\n            var now = new Date();\n            var skew = Math.abs(now.getTime() - date.getTime());\n            if (skew > options.clockSkew * 1000) {\n                throw new ExpiredRequestError(\"clock skew of \" + skew / 1000 + \"s was greater than \" + options.clockSkew + \"s\");\n            }\n        }\n        options.headers.forEach(function(hdr) {\n            // Remember that we already checked any headers in the params\n            // were in the request, so if this passes we're good.\n            if (parsed.params.headers.indexOf(hdr.toLowerCase()) < 0) throw new MissingHeaderError(hdr + \" was not a signed header\");\n        });\n        if (options.algorithms) {\n            if (options.algorithms.indexOf(parsed.params.algorithm) === -1) throw new InvalidParamsError(parsed.params.algorithm + \" is not a supported algorithm\");\n        }\n        parsed.algorithm = parsed.params.algorithm.toUpperCase();\n        parsed.keyId = parsed.params.keyId;\n        return parsed;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9odHRwLXNpZ25hdHVyZS9saWIvcGFyc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBLG9EQUFvRDs7QUFFcEQsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDckIsSUFBSUMsT0FBT0QsbUJBQU9BLENBQUM7QUFDbkIsSUFBSUUsUUFBUUYsbUJBQU9BLENBQUM7QUFJcEIsY0FBYztBQUVkLElBQUlHLGFBQWFELE1BQU1DLFVBQVU7QUFDakMsSUFBSUMsV0FBV0YsTUFBTUUsUUFBUTtBQUM3QixJQUFJQyxxQkFBcUJILE1BQU1HLGtCQUFrQjtBQUNqRCxJQUFJQyx3QkFBd0JKLE1BQU1JLHFCQUFxQjtBQUN2RCxJQUFJQyxvQkFBb0JMLE1BQU1LLGlCQUFpQjtBQUUvQyxJQUFJQyxRQUFRO0lBQ1ZDLEtBQUs7SUFDTEMsUUFBUTtBQUNWO0FBRUEsSUFBSUMsY0FBYztJQUNoQkMsTUFBTTtJQUNOQyxPQUFPO0lBQ1BDLE9BQU87SUFDUEMsT0FBTztBQUNUO0FBR0Esc0JBQXNCO0FBR3RCLFNBQVNDLG9CQUFvQkMsT0FBTztJQUNsQ1osbUJBQW1CYSxJQUFJLENBQUMsSUFBSSxFQUFFRCxTQUFTRDtBQUN6QztBQUNBZixLQUFLa0IsUUFBUSxDQUFDSCxxQkFBcUJYO0FBR25DLFNBQVNlLG1CQUFtQkgsT0FBTztJQUNqQ1osbUJBQW1CYSxJQUFJLENBQUMsSUFBSSxFQUFFRCxTQUFTRztBQUN6QztBQUNBbkIsS0FBS2tCLFFBQVEsQ0FBQ0Msb0JBQW9CZjtBQUdsQyxTQUFTZ0IsbUJBQW1CSixPQUFPO0lBQ2pDWixtQkFBbUJhLElBQUksQ0FBQyxJQUFJLEVBQUVELFNBQVNJO0FBQ3pDO0FBQ0FwQixLQUFLa0IsUUFBUSxDQUFDRSxvQkFBb0JoQjtBQUdsQyxTQUFTaUIsbUJBQW1CTCxPQUFPO0lBQ2pDWixtQkFBbUJhLElBQUksQ0FBQyxJQUFJLEVBQUVELFNBQVNLO0FBQ3pDO0FBQ0FyQixLQUFLa0IsUUFBUSxD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R2IsT0FBT0UsTUFBTSxDQUFDVyxLQUFLO1FBQ2xDLE9BQU9iO0lBQ1Q7QUFFRiIsInNvdXJjZXMiOlsid2VicGFjazovL2lubm92YXRpb24tY29hY2gvLi9ub2RlX21vZHVsZXMvaHR0cC1zaWduYXR1cmUvbGliL3BhcnNlci5qcz81MTkyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEyIEpveWVudCwgSW5jLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydC1wbHVzJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuXG5cbi8vLy0tLSBHbG9iYWxzXG5cbnZhciBIQVNIX0FMR09TID0gdXRpbHMuSEFTSF9BTEdPUztcbnZhciBQS19BTEdPUyA9IHV0aWxzLlBLX0FMR09TO1xudmFyIEh0dHBTaWduYXR1cmVFcnJvciA9IHV0aWxzLkh0dHBTaWduYXR1cmVFcnJvcjtcbnZhciBJbnZhbGlkQWxnb3JpdGhtRXJyb3IgPSB1dGlscy5JbnZhbGlkQWxnb3JpdGhtRXJyb3I7XG52YXIgdmFsaWRhdGVBbGdvcml0aG0gPSB1dGlscy52YWxpZGF0ZUFsZ29yaXRobTtcblxudmFyIFN0YXRlID0ge1xuICBOZXc6IDAsXG4gIFBhcmFtczogMVxufTtcblxudmFyIFBhcmFtc1N0YXRlID0ge1xuICBOYW1lOiAwLFxuICBRdW90ZTogMSxcbiAgVmFsdWU6IDIsXG4gIENvbW1hOiAzXG59O1xuXG5cbi8vLy0tLSBTcGVjaWZpYyBFcnJvcnNcblxuXG5mdW5jdGlvbiBFeHBpcmVkUmVxdWVzdEVycm9yKG1lc3NhZ2UpIHtcbiAgSHR0cFNpZ25hdHVyZUVycm9yLmNhbGwodGhpcywgbWVzc2FnZSwgRXhwaXJlZFJlcXVlc3RFcnJvcik7XG59XG51dGlsLmluaGVyaXRzKEV4cGlyZWRSZXF1ZXN0RXJyb3IsIEh0dHBTaWduYXR1cmVFcnJvcik7XG5cblxuZnVuY3Rpb24gSW52YWxpZEhlYWRlckVycm9yKG1lc3NhZ2UpIHtcbiAgSHR0cFNpZ25hdHVyZUVycm9yLmNhbGwodGhpcywgbWVzc2FnZSwgSW52YWxpZEhlYWRlckVycm9yKTtcbn1cbnV0aWwuaW5oZXJpdHMoSW52YWxpZEhlYWRlckVycm9yLCBIdHRwU2lnbmF0dXJlRXJyb3IpO1xuXG5cbmZ1bmN0aW9uIEludmFsaWRQYXJhbXNFcnJvcihtZXNzYWdlKSB7XG4gIEh0dHBTaWduYXR1cmVFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UsIEludmFsaWRQYXJhbXNFcnJvcik7XG59XG51dGlsLmluaGVyaXRzKEludmFsaWRQYXJhbXNFcnJvciwgSHR0cFNpZ25hdHVyZUVycm9yKTtcblxuXG5mdW5jdGlvbiBNaXNzaW5nSGVhZGVyRXJyb3IobWVzc2FnZSkge1xuICBIdHRwU2lnbmF0dXJlRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlLCBNaXNzaW5nSGVhZGVyRXJyb3IpO1xufVxudXRpbC5pbmhlcml0cyhNaXNzaW5nSGVhZGVyRXJyb3IsIEh0dHBTaWduYXR1cmVFcnJvcik7XG5cbmZ1bmN0aW9uIFN0cmljdFBhcnNpbmdFcnJvcihtZXNzYWdlKSB7XG4gIEh0dHBTaWduYXR1cmVFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UsIFN0cmljdFBhcnNpbmdFcnJvcik7XG59XG51dGlsLmluaGVyaXRzKFN0cmljdFBhcnNpbmdFcnJvciwgSHR0cFNpZ25hdHVyZUVycm9yKTtcblxuLy8vLS0tIEV4cG9ydGVkIEFQSVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAvKipcbiAgICogUGFyc2VzIHRoZSAnQXV0aG9yaXphdGlvbicgaGVhZGVyIG91dCBvZiBhbiBodHRwLlNlcnZlclJlcXVlc3Qgb2JqZWN0LlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhpcyBBUEkgd2lsbCBmdWxseSB2YWxpZGF0ZSB0aGUgQXV0aG9yaXphdGlvbiBoZWFkZXIsIGFuZCB0aHJvd1xuICAgKiBvbiBhbnkgZXJyb3IuICBJdCB3aWxsIG5vdCBob3dldmVyIGNoZWNrIHRoZSBzaWduYXR1cmUsIG9yIHRoZSBrZXlJZCBmb3JtYXRcbiAgICogYXMgdGhvc2UgYXJlIHNwZWNpZmljIHRvIHlvdXIgZW52aXJvbm1lbnQuICBZb3UgY2FuIHVzZSB0aGUgb3B0aW9ucyBvYmplY3RcbiAgICogdG8gcGFzcyBpbiBleHRyYSBjb25zdHJhaW50cy5cbiAgICpcbiAgICogQXMgYSByZXNwb25zZSBvYmplY3QgeW91IGNhbiBleHBlY3QgdGhpczpcbiAgICpcbiAgICogICAgIHtcbiAgICogICAgICAgXCJzY2hlbWVcIjogXCJTaWduYXR1cmVcIixcbiAgICogICAgICAgXCJwYXJhbXNcIjoge1xuICAgKiAgICAgICAgIFwia2V5SWRcIjogXCJmb29cIixcbiAgICogICAgICAgICBcImFsZ29yaXRobVwiOiBcInJzYS1zaGEyNTZcIixcbiAgICogICAgICAgICBcImhlYWRlcnNcIjogW1xuICAgKiAgICAgICAgICAgXCJkYXRlXCIgb3IgXCJ4LWRhdGVcIixcbiAgICogICAgICAgICAgIFwiZGlnZXN0XCJcbiAgICogICAgICAgICBdLFxuICAgKiAgICAgICAgIFwic2lnbmF0dXJlXCI6IFwiYmFzZTY0XCJcbiAgICogICAgICAgfSxcbiAgICogICAgICAgXCJzaWduaW5nU3RyaW5nXCI6IFwicmVhZHkgdG8gYmUgcGFzc2VkIHRvIGNyeXB0by52ZXJpZnkoKVwiXG4gICAqICAgICB9XG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSByZXF1ZXN0IGFuIGh0dHAuU2VydmVyUmVxdWVzdC5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgYW4gb3B0aW9uYWwgb3B0aW9ucyBvYmplY3Qgd2l0aDpcbiAgICogICAgICAgICAgICAgICAgICAgLSBjbG9ja1NrZXc6IGFsbG93ZWQgY2xvY2sgc2tldyBpbiBzZWNvbmRzIChkZWZhdWx0IDMwMCkuXG4gICAqICAgICAgICAgICAgICAgICAgIC0gaGVhZGVyczogcmVxdWlyZWQgaGVhZGVyIG5hbWVzIChkZWY6IGRhdGUgb3IgeC1kYXRlKVxuICAgKiAgICAgICAgICAgICAgICAgICAtIGFsZ29yaXRobXM6IGFsZ29yaXRobXMgdG8gc3VwcG9ydCAoZGVmYXVsdDogYWxsKS5cbiAgICogICAgICAgICAgICAgICAgICAgLSBzdHJpY3Q6IHNob3VsZCBlbmZvcmNlIGxhdGVzdCBzcGVjIHBhcnNpbmdcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkZWZhdWx0OiBmYWxzZSkuXG4gICAqIEByZXR1cm4ge09iamVjdH0gcGFyc2VkIG91dCBvYmplY3QgKHNlZSBhYm92ZSkuXG4gICAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gb24gaW52YWxpZCBpbnB1dC5cbiAgICogQHRocm93cyB7SW52YWxpZEhlYWRlckVycm9yfSBvbiBhbiBpbnZhbGlkIEF1dGhvcml6YXRpb24gaGVhZGVyIGVycm9yLlxuICAgKiBAdGhyb3dzIHtJbnZhbGlkUGFyYW1zRXJyb3J9IGlmIHRoZSBwYXJhbXMgaW4gdGhlIHNjaGVtZSBhcmUgaW52YWxpZC5cbiAgICogQHRocm93cyB7TWlzc2luZ0hlYWRlckVycm9yfSBpZiB0aGUgcGFyYW1zIGluZGljYXRlIGEgaGVhZGVyIG5vdCBwcmVzZW50LFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVpdGhlciBpbiB0aGUgcmVxdWVzdCBoZWFkZXJzIGZyb20gdGhlIHBhcmFtcyxcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBub3QgaW4gdGhlIHBhcmFtcyBmcm9tIGEgcmVxdWlyZWQgaGVhZGVyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gb3B0aW9ucy5cbiAgICogQHRocm93cyB7U3RyaWN0UGFyc2luZ0Vycm9yfSBpZiBvbGQgYXR0cmlidXRlcyBhcmUgdXNlZCBpbiBzdHJpY3QgcGFyc2luZ1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGUuXG4gICAqIEB0aHJvd3Mge0V4cGlyZWRSZXF1ZXN0RXJyb3J9IGlmIHRoZSB2YWx1ZSBvZiBkYXRlIG9yIHgtZGF0ZSBleGNlZWRzIHNrZXcuXG4gICAqL1xuICBwYXJzZVJlcXVlc3Q6IGZ1bmN0aW9uIHBhcnNlUmVxdWVzdChyZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgYXNzZXJ0Lm9iamVjdChyZXF1ZXN0LCAncmVxdWVzdCcpO1xuICAgIGFzc2VydC5vYmplY3QocmVxdWVzdC5oZWFkZXJzLCAncmVxdWVzdC5oZWFkZXJzJyk7XG4gICAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5oZWFkZXJzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG9wdGlvbnMuaGVhZGVycyA9IFtyZXF1ZXN0LmhlYWRlcnNbJ3gtZGF0ZSddID8gJ3gtZGF0ZScgOiAnZGF0ZSddO1xuICAgIH1cbiAgICBhc3NlcnQub2JqZWN0KG9wdGlvbnMsICdvcHRpb25zJyk7XG4gICAgYXNzZXJ0LmFycmF5T2ZTdHJpbmcob3B0aW9ucy5oZWFkZXJzLCAnb3B0aW9ucy5oZWFkZXJzJyk7XG4gICAgYXNzZXJ0Lm9wdGlvbmFsRmluaXRlKG9wdGlvbnMuY2xvY2tTa2V3LCAnb3B0aW9ucy5jbG9ja1NrZXcnKTtcblxuICAgIHZhciBhdXRoekhlYWRlck5hbWUgPSBvcHRpb25zLmF1dGhvcml6YXRpb25IZWFkZXJOYW1lIHx8ICdhdXRob3JpemF0aW9uJztcblxuICAgIGlmICghcmVxdWVzdC5oZWFkZXJzW2F1dGh6SGVhZGVyTmFtZV0pIHtcbiAgICAgIHRocm93IG5ldyBNaXNzaW5nSGVhZGVyRXJyb3IoJ25vICcgKyBhdXRoekhlYWRlck5hbWUgKyAnIGhlYWRlciAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3ByZXNlbnQgaW4gdGhlIHJlcXVlc3QnKTtcbiAgICB9XG5cbiAgICBvcHRpb25zLmNsb2NrU2tldyA9IG9wdGlvbnMuY2xvY2tTa2V3IHx8IDMwMDtcblxuXG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBzdGF0ZSA9IFN0YXRlLk5ldztcbiAgICB2YXIgc3Vic3RhdGUgPSBQYXJhbXNTdGF0ZS5OYW1lO1xuICAgIHZhciB0bXBOYW1lID0gJyc7XG4gICAgdmFyIHRtcFZhbHVlID0gJyc7XG5cbiAgICB2YXIgcGFyc2VkID0ge1xuICAgICAgc2NoZW1lOiAnJyxcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBzaWduaW5nU3RyaW5nOiAnJ1xuICAgIH07XG5cbiAgICB2YXIgYXV0aHogPSByZXF1ZXN0LmhlYWRlcnNbYXV0aHpIZWFkZXJOYW1lXTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgYXV0aHoubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gYXV0aHouY2hhckF0KGkpO1xuXG4gICAgICBzd2l0Y2ggKE51bWJlcihzdGF0ZSkpIHtcblxuICAgICAgY2FzZSBTdGF0ZS5OZXc6XG4gICAgICAgIGlmIChjICE9PSAnICcpIHBhcnNlZC5zY2hlbWUgKz0gYztcbiAgICAgICAgZWxzZSBzdGF0ZSA9IFN0YXRlLlBhcmFtcztcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgU3RhdGUuUGFyYW1zOlxuICAgICAgICBzd2l0Y2ggKE51bWJlcihzdWJzdGF0ZSkpIHtcblxuICAgICAgICBjYXNlIFBhcmFtc1N0YXRlLk5hbWU6XG4gICAgICAgICAgdmFyIGNvZGUgPSBjLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgLy8gcmVzdHJpY3RlZCBuYW1lIG9mIEEtWiAvIGEtelxuICAgICAgICAgIGlmICgoY29kZSA+PSAweDQxICYmIGNvZGUgPD0gMHg1YSkgfHwgLy8gQS1aXG4gICAgICAgICAgICAgIChjb2RlID49IDB4NjEgJiYgY29kZSA8PSAweDdhKSkgeyAvLyBhLXpcbiAgICAgICAgICAgIHRtcE5hbWUgKz0gYztcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICc9Jykge1xuICAgICAgICAgICAgaWYgKHRtcE5hbWUubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEhlYWRlckVycm9yKCdiYWQgcGFyYW0gZm9ybWF0Jyk7XG4gICAgICAgICAgICBzdWJzdGF0ZSA9IFBhcmFtc1N0YXRlLlF1b3RlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEhlYWRlckVycm9yKCdiYWQgcGFyYW0gZm9ybWF0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUGFyYW1zU3RhdGUuUXVvdGU6XG4gICAgICAgICAgaWYgKGMgPT09ICdcIicpIHtcbiAgICAgICAgICAgIHRtcFZhbHVlID0gJyc7XG4gICAgICAgICAgICBzdWJzdGF0ZSA9IFBhcmFtc1N0YXRlLlZhbHVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEhlYWRlckVycm9yKCdiYWQgcGFyYW0gZm9ybWF0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUGFyYW1zU3RhdGUuVmFsdWU6XG4gICAgICAgICAgaWYgKGMgPT09ICdcIicpIHtcbiAgICAgICAgICAgIHBhcnNlZC5wYXJhbXNbdG1wTmFtZV0gPSB0bXBWYWx1ZTtcbiAgICAgICAgICAgIHN1YnN0YXRlID0gUGFyYW1zU3RhdGUuQ29tbWE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRtcFZhbHVlICs9IGM7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUGFyYW1zU3RhdGUuQ29tbWE6XG4gICAgICAgICAgaWYgKGMgPT09ICcsJykge1xuICAgICAgICAgICAgdG1wTmFtZSA9ICcnO1xuICAgICAgICAgICAgc3Vic3RhdGUgPSBQYXJhbXNTdGF0ZS5OYW1lO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEhlYWRlckVycm9yKCdiYWQgcGFyYW0gZm9ybWF0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN1YnN0YXRlJyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdWJzdGF0ZScpO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgaWYgKCFwYXJzZWQucGFyYW1zLmhlYWRlcnMgfHwgcGFyc2VkLnBhcmFtcy5oZWFkZXJzID09PSAnJykge1xuICAgICAgaWYgKHJlcXVlc3QuaGVhZGVyc1sneC1kYXRlJ10pIHtcbiAgICAgICAgcGFyc2VkLnBhcmFtcy5oZWFkZXJzID0gWyd4LWRhdGUnXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZC5wYXJhbXMuaGVhZGVycyA9IFsnZGF0ZSddO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwYXJzZWQucGFyYW1zLmhlYWRlcnMgPSBwYXJzZWQucGFyYW1zLmhlYWRlcnMuc3BsaXQoJyAnKTtcbiAgICB9XG5cbiAgICAvLyBNaW5pbWFsbHkgdmFsaWRhdGUgdGhlIHBhcnNlZCBvYmplY3RcbiAgICBpZiAoIXBhcnNlZC5zY2hlbWUgfHwgcGFyc2VkLnNjaGVtZSAhPT0gJ1NpZ25hdHVyZScpXG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEhlYWRlckVycm9yKCdzY2hlbWUgd2FzIG5vdCBcIlNpZ25hdHVyZVwiJyk7XG5cbiAgICBpZiAoIXBhcnNlZC5wYXJhbXMua2V5SWQpXG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEhlYWRlckVycm9yKCdrZXlJZCB3YXMgbm90IHNwZWNpZmllZCcpO1xuXG4gICAgaWYgKCFwYXJzZWQucGFyYW1zLmFsZ29yaXRobSlcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkSGVhZGVyRXJyb3IoJ2FsZ29yaXRobSB3YXMgbm90IHNwZWNpZmllZCcpO1xuXG4gICAgaWYgKCFwYXJzZWQucGFyYW1zLnNpZ25hdHVyZSlcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkSGVhZGVyRXJyb3IoJ3NpZ25hdHVyZSB3YXMgbm90IHNwZWNpZmllZCcpO1xuXG4gICAgLy8gQ2hlY2sgdGhlIGFsZ29yaXRobSBhZ2FpbnN0IHRoZSBvZmZpY2lhbCBsaXN0XG4gICAgcGFyc2VkLnBhcmFtcy5hbGdvcml0aG0gPSBwYXJzZWQucGFyYW1zLmFsZ29yaXRobS50b0xvd2VyQ2FzZSgpO1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUFsZ29yaXRobShwYXJzZWQucGFyYW1zLmFsZ29yaXRobSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBJbnZhbGlkQWxnb3JpdGhtRXJyb3IpXG4gICAgICAgIHRocm93IChuZXcgSW52YWxpZFBhcmFtc0Vycm9yKHBhcnNlZC5wYXJhbXMuYWxnb3JpdGhtICsgJyBpcyBub3QgJyArXG4gICAgICAgICAgJ3N1cHBvcnRlZCcpKTtcbiAgICAgIGVsc2VcbiAgICAgICAgdGhyb3cgKGUpO1xuICAgIH1cblxuICAgIC8vIEJ1aWxkIHRoZSBzaWduaW5nU3RyaW5nXG4gICAgZm9yIChpID0gMDsgaSA8IHBhcnNlZC5wYXJhbXMuaGVhZGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGggPSBwYXJzZWQucGFyYW1zLmhlYWRlcnNbaV0udG9Mb3dlckNhc2UoKTtcbiAgICAgIHBhcnNlZC5wYXJhbXMuaGVhZGVyc1tpXSA9IGg7XG5cbiAgICAgIGlmIChoID09PSAncmVxdWVzdC1saW5lJykge1xuICAgICAgICBpZiAoIW9wdGlvbnMuc3RyaWN0KSB7XG4gICAgICAgICAgLypcbiAgICAgICAgICAgKiBXZSBhbGxvdyBoZWFkZXJzIGZyb20gdGhlIG9sZGVyIHNwZWMgZHJhZnRzIGlmIHN0cmljdCBwYXJzaW5nIGlzbid0XG4gICAgICAgICAgICogc3BlY2lmaWVkIGluIG9wdGlvbnMuXG4gICAgICAgICAgICovXG4gICAgICAgICAgcGFyc2VkLnNpZ25pbmdTdHJpbmcgKz1cbiAgICAgICAgICAgIHJlcXVlc3QubWV0aG9kICsgJyAnICsgcmVxdWVzdC51cmwgKyAnIEhUVFAvJyArIHJlcXVlc3QuaHR0cFZlcnNpb247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLyogU3RyaWN0IHBhcnNpbmcgZG9lc24ndCBhbGxvdyBvbGRlciBkcmFmdCBoZWFkZXJzLiAqL1xuICAgICAgICAgIHRocm93IChuZXcgU3RyaWN0UGFyc2luZ0Vycm9yKCdyZXF1ZXN0LWxpbmUgaXMgbm90IGEgdmFsaWQgaGVhZGVyICcgK1xuICAgICAgICAgICAgJ3dpdGggc3RyaWN0IHBhcnNpbmcgZW5hYmxlZC4nKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaCA9PT0gJyhyZXF1ZXN0LXRhcmdldCknKSB7XG4gICAgICAgIHBhcnNlZC5zaWduaW5nU3RyaW5nICs9XG4gICAgICAgICAgJyhyZXF1ZXN0LXRhcmdldCk6ICcgKyByZXF1ZXN0Lm1ldGhvZC50b0xvd2VyQ2FzZSgpICsgJyAnICtcbiAgICAgICAgICByZXF1ZXN0LnVybDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlcXVlc3QuaGVhZGVyc1toXTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdIZWFkZXJFcnJvcihoICsgJyB3YXMgbm90IGluIHRoZSByZXF1ZXN0Jyk7XG4gICAgICAgIHBhcnNlZC5zaWduaW5nU3RyaW5nICs9IGggKyAnOiAnICsgdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmICgoaSArIDEpIDwgcGFyc2VkLnBhcmFtcy5oZWFkZXJzLmxlbmd0aClcbiAgICAgICAgcGFyc2VkLnNpZ25pbmdTdHJpbmcgKz0gJ1xcbic7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgYWdhaW5zdCB0aGUgY29uc3RyYWludHNcbiAgICB2YXIgZGF0ZTtcbiAgICBpZiAocmVxdWVzdC5oZWFkZXJzLmRhdGUgfHwgcmVxdWVzdC5oZWFkZXJzWyd4LWRhdGUnXSkge1xuICAgICAgICBpZiAocmVxdWVzdC5oZWFkZXJzWyd4LWRhdGUnXSkge1xuICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZShyZXF1ZXN0LmhlYWRlcnNbJ3gtZGF0ZSddKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRlID0gbmV3IERhdGUocmVxdWVzdC5oZWFkZXJzLmRhdGUpO1xuICAgICAgICB9XG4gICAgICB2YXIgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgIHZhciBza2V3ID0gTWF0aC5hYnMobm93LmdldFRpbWUoKSAtIGRhdGUuZ2V0VGltZSgpKTtcblxuICAgICAgaWYgKHNrZXcgPiBvcHRpb25zLmNsb2NrU2tldyAqIDEwMDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEV4cGlyZWRSZXF1ZXN0RXJyb3IoJ2Nsb2NrIHNrZXcgb2YgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChza2V3IC8gMTAwMCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncyB3YXMgZ3JlYXRlciB0aGFuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmNsb2NrU2tldyArICdzJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgb3B0aW9ucy5oZWFkZXJzLmZvckVhY2goZnVuY3Rpb24gKGhkcikge1xuICAgICAgLy8gUmVtZW1iZXIgdGhhdCB3ZSBhbHJlYWR5IGNoZWNrZWQgYW55IGhlYWRlcnMgaW4gdGhlIHBhcmFtc1xuICAgICAgLy8gd2VyZSBpbiB0aGUgcmVxdWVzdCwgc28gaWYgdGhpcyBwYXNzZXMgd2UncmUgZ29vZC5cbiAgICAgIGlmIChwYXJzZWQucGFyYW1zLmhlYWRlcnMuaW5kZXhPZihoZHIudG9Mb3dlckNhc2UoKSkgPCAwKVxuICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0hlYWRlckVycm9yKGhkciArICcgd2FzIG5vdCBhIHNpZ25lZCBoZWFkZXInKTtcbiAgICB9KTtcblxuICAgIGlmIChvcHRpb25zLmFsZ29yaXRobXMpIHtcbiAgICAgIGlmIChvcHRpb25zLmFsZ29yaXRobXMuaW5kZXhPZihwYXJzZWQucGFyYW1zLmFsZ29yaXRobSkgPT09IC0xKVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFBhcmFtc0Vycm9yKHBhcnNlZC5wYXJhbXMuYWxnb3JpdGhtICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIGlzIG5vdCBhIHN1cHBvcnRlZCBhbGdvcml0aG0nKTtcbiAgICB9XG5cbiAgICBwYXJzZWQuYWxnb3JpdGhtID0gcGFyc2VkLnBhcmFtcy5hbGdvcml0aG0udG9VcHBlckNhc2UoKTtcbiAgICBwYXJzZWQua2V5SWQgPSBwYXJzZWQucGFyYW1zLmtleUlkO1xuICAgIHJldHVybiBwYXJzZWQ7XG4gIH1cblxufTtcbiJdLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwidXRpbCIsInV0aWxzIiwiSEFTSF9BTEdPUyIsIlBLX0FMR09TIiwiSHR0cFNpZ25hdHVyZUVycm9yIiwiSW52YWxpZEFsZ29yaXRobUVycm9yIiwidmFsaWRhdGVBbGdvcml0aG0iLCJTdGF0ZSIsIk5ldyIsIlBhcmFtcyIsIlBhcmFtc1N0YXRlIiwiTmFtZSIsIlF1b3RlIiwiVmFsdWUiLCJDb21tYSIsIkV4cGlyZWRSZXF1ZXN0RXJyb3IiLCJtZXNzYWdlIiwiY2FsbCIsImluaGVyaXRzIiwiSW52YWxpZEhlYWRlckVycm9yIiwiSW52YWxpZFBhcmFtc0Vycm9yIiwiTWlzc2luZ0hlYWRlckVycm9yIiwiU3RyaWN0UGFyc2luZ0Vycm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsInBhcnNlUmVxdWVzdCIsInJlcXVlc3QiLCJvcHRpb25zIiwib2JqZWN0IiwiaGVhZGVycyIsInVuZGVmaW5lZCIsImFycmF5T2ZTdHJpbmciLCJvcHRpb25hbEZpbml0ZSIsImNsb2NrU2tldyIsImF1dGh6SGVhZGVyTmFtZSIsImF1dGhvcml6YXRpb25IZWFkZXJOYW1lIiwiaSIsInN0YXRlIiwic3Vic3RhdGUiLCJ0bXBOYW1lIiwidG1wVmFsdWUiLCJwYXJzZWQiLCJzY2hlbWUiLCJwYXJhbXMiLCJzaWduaW5nU3RyaW5nIiwiYXV0aHoiLCJsZW5ndGgiLCJjIiwiY2hhckF0IiwiTnVtYmVyIiwiY29kZSIsImNoYXJDb2RlQXQiLCJFcnJvciIsInNwbGl0Iiwia2V5SWQiLCJhbGdvcml0aG0iLCJzaWduYXR1cmUiLCJ0b0xvd2VyQ2FzZSIsImUiLCJoIiwic3RyaWN0IiwibWV0aG9kIiwidXJsIiwiaHR0cFZlcnNpb24iLCJ2YWx1ZSIsImRhdGUiLCJEYXRlIiwibm93Iiwic2tldyIsIk1hdGgiLCJhYnMiLCJnZXRUaW1lIiwiZm9yRWFjaCIsImhkciIsImluZGV4T2YiLCJhbGdvcml0aG1zIiwidG9VcHBlckNhc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/http-signature/lib/parser.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/http-signature/lib/signer.js":
/*!***************************************************!*\
  !*** ./node_modules/http-signature/lib/signer.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = __webpack_require__(/*! assert-plus */ \"(action-browser)/./node_modules/assert-plus/assert.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar http = __webpack_require__(/*! http */ \"http\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar sshpk = __webpack_require__(/*! sshpk */ \"(action-browser)/./node_modules/sshpk/lib/index.js\");\nvar jsprim = __webpack_require__(/*! jsprim */ \"(action-browser)/./node_modules/jsprim/lib/jsprim.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(action-browser)/./node_modules/http-signature/lib/utils.js\");\nvar sprintf = (__webpack_require__(/*! util */ \"util\").format);\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n///--- Globals\nvar AUTHZ_FMT = 'Signature keyId=\"%s\",algorithm=\"%s\",headers=\"%s\",signature=\"%s\"';\n///--- Specific Errors\nfunction MissingHeaderError(message) {\n    HttpSignatureError.call(this, message, MissingHeaderError);\n}\nutil.inherits(MissingHeaderError, HttpSignatureError);\nfunction StrictParsingError(message) {\n    HttpSignatureError.call(this, message, StrictParsingError);\n}\nutil.inherits(StrictParsingError, HttpSignatureError);\n/* See createSigner() */ function RequestSigner(options) {\n    assert.object(options, \"options\");\n    var alg = [];\n    if (options.algorithm !== undefined) {\n        assert.string(options.algorithm, \"options.algorithm\");\n        alg = validateAlgorithm(options.algorithm);\n    }\n    this.rs_alg = alg;\n    /*\n   * RequestSigners come in two varieties: ones with an rs_signFunc, and ones\n   * with an rs_signer.\n   *\n   * rs_signFunc-based RequestSigners have to build up their entire signing\n   * string within the rs_lines array and give it to rs_signFunc as a single\n   * concat'd blob. rs_signer-based RequestSigners can add a line at a time to\n   * their signing state by using rs_signer.update(), thus only needing to\n   * buffer the hash function state and one line at a time.\n   */ if (options.sign !== undefined) {\n        assert.func(options.sign, \"options.sign\");\n        this.rs_signFunc = options.sign;\n    } else if (alg[0] === \"hmac\" && options.key !== undefined) {\n        assert.string(options.keyId, \"options.keyId\");\n        this.rs_keyId = options.keyId;\n        if (typeof options.key !== \"string\" && !Buffer.isBuffer(options.key)) throw new TypeError(\"options.key for HMAC must be a string or Buffer\");\n        /*\n     * Make an rs_signer for HMACs, not a rs_signFunc -- HMACs digest their\n     * data in chunks rather than requiring it all to be given in one go\n     * at the end, so they are more similar to signers than signFuncs.\n     */ this.rs_signer = crypto.createHmac(alg[1].toUpperCase(), options.key);\n        this.rs_signer.sign = function() {\n            var digest = this.digest(\"base64\");\n            return {\n                hashAlgorithm: alg[1],\n                toString: function() {\n                    return digest;\n                }\n            };\n        };\n    } else if (options.key !== undefined) {\n        var key = options.key;\n        if (typeof key === \"string\" || Buffer.isBuffer(key)) key = sshpk.parsePrivateKey(key);\n        assert.ok(sshpk.PrivateKey.isPrivateKey(key, [\n            1,\n            2\n        ]), \"options.key must be a sshpk.PrivateKey\");\n        this.rs_key = key;\n        assert.string(options.keyId, \"options.keyId\");\n        this.rs_keyId = options.keyId;\n        if (!PK_ALGOS[key.type]) {\n            throw new InvalidAlgorithmError(key.type.toUpperCase() + \" type \" + \"keys are not supported\");\n        }\n        if (alg[0] !== undefined && key.type !== alg[0]) {\n            throw new InvalidAlgorithmError(\"options.key must be a \" + alg[0].toUpperCase() + \" key, was given a \" + key.type.toUpperCase() + \" key instead\");\n        }\n        this.rs_signer = key.createSign(alg[1]);\n    } else {\n        throw new TypeError(\"options.sign (func) or options.key is required\");\n    }\n    this.rs_headers = [];\n    this.rs_lines = [];\n}\n/**\n * Adds a header to be signed, with its value, into this signer.\n *\n * @param {String} header\n * @param {String} value\n * @return {String} value written\n */ RequestSigner.prototype.writeHeader = function(header, value) {\n    assert.string(header, \"header\");\n    header = header.toLowerCase();\n    assert.string(value, \"value\");\n    this.rs_headers.push(header);\n    if (this.rs_signFunc) {\n        this.rs_lines.push(header + \": \" + value);\n    } else {\n        var line = header + \": \" + value;\n        if (this.rs_headers.length > 0) line = \"\\n\" + line;\n        this.rs_signer.update(line);\n    }\n    return value;\n};\n/**\n * Adds a default Date header, returning its value.\n *\n * @return {String}\n */ RequestSigner.prototype.writeDateHeader = function() {\n    return this.writeHeader(\"date\", jsprim.rfc1123(new Date()));\n};\n/**\n * Adds the request target line to be signed.\n *\n * @param {String} method, HTTP method (e.g. 'get', 'post', 'put')\n * @param {String} path\n */ RequestSigner.prototype.writeTarget = function(method, path) {\n    assert.string(method, \"method\");\n    assert.string(path, \"path\");\n    method = method.toLowerCase();\n    this.writeHeader(\"(request-target)\", method + \" \" + path);\n};\n/**\n * Calculate the value for the Authorization header on this request\n * asynchronously.\n *\n * @param {Func} callback (err, authz)\n */ RequestSigner.prototype.sign = function(cb) {\n    assert.func(cb, \"callback\");\n    if (this.rs_headers.length < 1) throw new Error(\"At least one header must be signed\");\n    var alg, authz;\n    if (this.rs_signFunc) {\n        var data = this.rs_lines.join(\"\\n\");\n        var self = this;\n        this.rs_signFunc(data, function(err, sig) {\n            if (err) {\n                cb(err);\n                return;\n            }\n            try {\n                assert.object(sig, \"signature\");\n                assert.string(sig.keyId, \"signature.keyId\");\n                assert.string(sig.algorithm, \"signature.algorithm\");\n                assert.string(sig.signature, \"signature.signature\");\n                alg = validateAlgorithm(sig.algorithm);\n                authz = sprintf(AUTHZ_FMT, sig.keyId, sig.algorithm, self.rs_headers.join(\" \"), sig.signature);\n            } catch (e) {\n                cb(e);\n                return;\n            }\n            cb(null, authz);\n        });\n    } else {\n        try {\n            var sigObj = this.rs_signer.sign();\n        } catch (e) {\n            cb(e);\n            return;\n        }\n        alg = (this.rs_alg[0] || this.rs_key.type) + \"-\" + sigObj.hashAlgorithm;\n        var signature = sigObj.toString();\n        authz = sprintf(AUTHZ_FMT, this.rs_keyId, alg, this.rs_headers.join(\" \"), signature);\n        cb(null, authz);\n    }\n};\n///--- Exported API\nmodule.exports = {\n    /**\n   * Identifies whether a given object is a request signer or not.\n   *\n   * @param {Object} object, the object to identify\n   * @returns {Boolean}\n   */ isSigner: function(obj) {\n        if (typeof obj === \"object\" && obj instanceof RequestSigner) return true;\n        return false;\n    },\n    /**\n   * Creates a request signer, used to asynchronously build a signature\n   * for a request (does not have to be an http.ClientRequest).\n   *\n   * @param {Object} options, either:\n   *                   - {String} keyId\n   *                   - {String|Buffer} key\n   *                   - {String} algorithm (optional, required for HMAC)\n   *                 or:\n   *                   - {Func} sign (data, cb)\n   * @return {RequestSigner}\n   */ createSigner: function createSigner(options) {\n        return new RequestSigner(options);\n    },\n    /**\n   * Adds an 'Authorization' header to an http.ClientRequest object.\n   *\n   * Note that this API will add a Date header if it's not already set. Any\n   * other headers in the options.headers array MUST be present, or this\n   * will throw.\n   *\n   * You shouldn't need to check the return type; it's just there if you want\n   * to be pedantic.\n   *\n   * The optional flag indicates whether parsing should use strict enforcement\n   * of the version draft-cavage-http-signatures-04 of the spec or beyond.\n   * The default is to be loose and support\n   * older versions for compatibility.\n   *\n   * @param {Object} request an instance of http.ClientRequest.\n   * @param {Object} options signing parameters object:\n   *                   - {String} keyId required.\n   *                   - {String} key required (either a PEM or HMAC key).\n   *                   - {Array} headers optional; defaults to ['date'].\n   *                   - {String} algorithm optional (unless key is HMAC);\n   *                              default is the same as the sshpk default\n   *                              signing algorithm for the type of key given\n   *                   - {String} httpVersion optional; defaults to '1.1'.\n   *                   - {Boolean} strict optional; defaults to 'false'.\n   * @return {Boolean} true if Authorization (and optionally Date) were added.\n   * @throws {TypeError} on bad parameter types (input).\n   * @throws {InvalidAlgorithmError} if algorithm was bad or incompatible with\n   *                                 the given key.\n   * @throws {sshpk.KeyParseError} if key was bad.\n   * @throws {MissingHeaderError} if a header to be signed was specified but\n   *                              was not present.\n   */ signRequest: function signRequest(request, options) {\n        assert.object(request, \"request\");\n        assert.object(options, \"options\");\n        assert.optionalString(options.algorithm, \"options.algorithm\");\n        assert.string(options.keyId, \"options.keyId\");\n        assert.optionalArrayOfString(options.headers, \"options.headers\");\n        assert.optionalString(options.httpVersion, \"options.httpVersion\");\n        if (!request.getHeader(\"Date\")) request.setHeader(\"Date\", jsprim.rfc1123(new Date()));\n        if (!options.headers) options.headers = [\n            \"date\"\n        ];\n        if (!options.httpVersion) options.httpVersion = \"1.1\";\n        var alg = [];\n        if (options.algorithm) {\n            options.algorithm = options.algorithm.toLowerCase();\n            alg = validateAlgorithm(options.algorithm);\n        }\n        var i;\n        var stringToSign = \"\";\n        for(i = 0; i < options.headers.length; i++){\n            if (typeof options.headers[i] !== \"string\") throw new TypeError(\"options.headers must be an array of Strings\");\n            var h = options.headers[i].toLowerCase();\n            if (h === \"request-line\") {\n                if (!options.strict) {\n                    /**\n           * We allow headers from the older spec drafts if strict parsing isn't\n           * specified in options.\n           */ stringToSign += request.method + \" \" + request.path + \" HTTP/\" + options.httpVersion;\n                } else {\n                    /* Strict parsing doesn't allow older draft headers. */ throw new StrictParsingError(\"request-line is not a valid header \" + \"with strict parsing enabled.\");\n                }\n            } else if (h === \"(request-target)\") {\n                stringToSign += \"(request-target): \" + request.method.toLowerCase() + \" \" + request.path;\n            } else {\n                var value = request.getHeader(h);\n                if (value === undefined || value === \"\") {\n                    throw new MissingHeaderError(h + \" was not in the request\");\n                }\n                stringToSign += h + \": \" + value;\n            }\n            if (i + 1 < options.headers.length) stringToSign += \"\\n\";\n        }\n        /* This is just for unit tests. */ if (request.hasOwnProperty(\"_stringToSign\")) {\n            request._stringToSign = stringToSign;\n        }\n        var signature;\n        if (alg[0] === \"hmac\") {\n            if (typeof options.key !== \"string\" && !Buffer.isBuffer(options.key)) throw new TypeError(\"options.key must be a string or Buffer\");\n            var hmac = crypto.createHmac(alg[1].toUpperCase(), options.key);\n            hmac.update(stringToSign);\n            signature = hmac.digest(\"base64\");\n        } else {\n            var key = options.key;\n            if (typeof key === \"string\" || Buffer.isBuffer(key)) key = sshpk.parsePrivateKey(options.key);\n            assert.ok(sshpk.PrivateKey.isPrivateKey(key, [\n                1,\n                2\n            ]), \"options.key must be a sshpk.PrivateKey\");\n            if (!PK_ALGOS[key.type]) {\n                throw new InvalidAlgorithmError(key.type.toUpperCase() + \" type \" + \"keys are not supported\");\n            }\n            if (alg[0] !== undefined && key.type !== alg[0]) {\n                throw new InvalidAlgorithmError(\"options.key must be a \" + alg[0].toUpperCase() + \" key, was given a \" + key.type.toUpperCase() + \" key instead\");\n            }\n            var signer = key.createSign(alg[1]);\n            signer.update(stringToSign);\n            var sigObj = signer.sign();\n            if (!HASH_ALGOS[sigObj.hashAlgorithm]) {\n                throw new InvalidAlgorithmError(sigObj.hashAlgorithm.toUpperCase() + \" is not a supported hash algorithm\");\n            }\n            options.algorithm = key.type + \"-\" + sigObj.hashAlgorithm;\n            signature = sigObj.toString();\n            assert.notStrictEqual(signature, \"\", \"empty signature produced\");\n        }\n        var authzHeaderName = options.authorizationHeaderName || \"Authorization\";\n        request.setHeader(authzHeaderName, sprintf(AUTHZ_FMT, options.keyId, options.algorithm, options.headers.join(\" \"), signature));\n        return true;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/http-signature/lib/signer.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/http-signature/lib/utils.js":
/*!**************************************************!*\
  !*** ./node_modules/http-signature/lib/utils.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = __webpack_require__(/*! assert-plus */ \"(action-browser)/./node_modules/assert-plus/assert.js\");\nvar sshpk = __webpack_require__(/*! sshpk */ \"(action-browser)/./node_modules/sshpk/lib/index.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar HASH_ALGOS = {\n    \"sha1\": true,\n    \"sha256\": true,\n    \"sha512\": true\n};\nvar PK_ALGOS = {\n    \"rsa\": true,\n    \"dsa\": true,\n    \"ecdsa\": true\n};\nfunction HttpSignatureError(message, caller) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, caller || HttpSignatureError);\n    this.message = message;\n    this.name = caller.name;\n}\nutil.inherits(HttpSignatureError, Error);\nfunction InvalidAlgorithmError(message) {\n    HttpSignatureError.call(this, message, InvalidAlgorithmError);\n}\nutil.inherits(InvalidAlgorithmError, HttpSignatureError);\nfunction validateAlgorithm(algorithm) {\n    var alg = algorithm.toLowerCase().split(\"-\");\n    if (alg.length !== 2) {\n        throw new InvalidAlgorithmError(alg[0].toUpperCase() + \" is not a \" + \"valid algorithm\");\n    }\n    if (alg[0] !== \"hmac\" && !PK_ALGOS[alg[0]]) {\n        throw new InvalidAlgorithmError(alg[0].toUpperCase() + \" type keys \" + \"are not supported\");\n    }\n    if (!HASH_ALGOS[alg[1]]) {\n        throw new InvalidAlgorithmError(alg[1].toUpperCase() + \" is not a \" + \"supported hash algorithm\");\n    }\n    return alg;\n}\n///--- API\nmodule.exports = {\n    HASH_ALGOS: HASH_ALGOS,\n    PK_ALGOS: PK_ALGOS,\n    HttpSignatureError: HttpSignatureError,\n    InvalidAlgorithmError: InvalidAlgorithmError,\n    validateAlgorithm: validateAlgorithm,\n    /**\n   * Converts an OpenSSH public key (rsa only) to a PKCS#8 PEM file.\n   *\n   * The intent of this module is to interoperate with OpenSSL only,\n   * specifically the node crypto module's `verify` method.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} PEM encoded form of the RSA public key.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} on invalid ssh key formatted data.\n   */ sshKeyToPEM: function sshKeyToPEM(key) {\n        assert.string(key, \"ssh_key\");\n        var k = sshpk.parseKey(key, \"ssh\");\n        return k.toString(\"pem\");\n    },\n    /**\n   * Generates an OpenSSH fingerprint from an ssh public key.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} key fingerprint.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} if what you passed doesn't look like an ssh public key.\n   */ fingerprint: function fingerprint(key) {\n        assert.string(key, \"ssh_key\");\n        var k = sshpk.parseKey(key, \"ssh\");\n        return k.fingerprint(\"md5\").toString(\"hex\");\n    },\n    /**\n   * Converts a PKGCS#8 PEM file to an OpenSSH public key (rsa)\n   *\n   * The reverse of the above function.\n   */ pemToRsaSSHKey: function pemToRsaSSHKey(pem, comment) {\n        assert.equal(\"string\", typeof pem, \"typeof pem\");\n        var k = sshpk.parseKey(pem, \"pem\");\n        k.comment = comment;\n        return k.toString(\"ssh\");\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9odHRwLXNpZ25hdHVyZS9saWIvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQUEsb0RBQW9EOztBQUVwRCxJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUNyQixJQUFJQyxRQUFRRCxtQkFBT0EsQ0FBQztBQUNwQixJQUFJRSxPQUFPRixtQkFBT0EsQ0FBQztBQUVuQixJQUFJRyxhQUFhO0lBQ2YsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0FBQ1o7QUFFQSxJQUFJQyxXQUFXO0lBQ2IsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0FBQ1g7QUFFQSxTQUFTQyxtQkFBbUJDLE9BQU8sRUFBRUMsTUFBTTtJQUN6QyxJQUFJQyxNQUFNQyxpQkFBaUIsRUFDekJELE1BQU1DLGlCQUFpQixDQUFDLElBQUksRUFBRUYsVUFBVUY7SUFFMUMsSUFBSSxDQUFDQyxPQUFPLEdBQUdBO0lBQ2YsSUFBSSxDQUFDSSxJQUFJLEdBQUdILE9BQU9HLElBQUk7QUFDekI7QUFDQVIsS0FBS1MsUUFBUSxDQUFDTixvQkFBb0JHO0FBRWxDLFNBQVNJLHNCQUFzQk4sT0FBTztJQUNwQ0QsbUJBQW1CUSxJQUFJLENBQUMsSUFBSSxFQUFFUCxTQUFTTTtBQUN6QztBQUNBVixLQUFLUyxRQUFRLENBQUNDLHVCQUF1QlA7QUFFckMsU0FBU1Msa0JBQWtCQyxTQUFTO0lBQ2xDLElBQUlDLE1BQU1ELFVBQVVFLFdBQVcsR0FBR0MsS0FBSyxDQUFDO0lBRXhDLElBQUlGLElBQUlHLE1BQU0sS0FBSyxHQUFHO1FBQ3BCLE1BQU8sSUFBSVAsc0JBQXNCSSxHQUFHLENBQUMsRUFBRSxDQUFDSSxXQUFXLEtBQUssZUFDdEQ7SUFDSjtJQUVBLElBQUlKLEdBQUcsQ0FBQyxFQUFFLEtBQUssVUFBVSxDQUFDWixRQUFRLENBQUNZLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUMxQyxNQUFPLElBQUlKLHNCQUFzQkksR0FBRyxDQUFDLEVBQUUsQ0FBQ0ksV0FBVyxLQUFLLGdCQUN0RDtJQUNKO0lBRUEsSUFBSSxDQUFDakIsVUFBVSxDQUFDYSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDdkIsTUFBTyxJQUFJSixzQkFBc0JJLEdBQUcsQ0FBQyxFQUFFLENBQUNJLFdBQVcsS0FBSyxlQUN0RDtJQUNKO0lBRUEsT0FBUUo7QUFDVjtBQUVBLFVBQVU7QUFFVkssT0FBT0MsT0FBTyxHQUFHO0lBRWZuQixZQUFZQTtJQUNaQyxVQUFVQTtJQUVWQyxvQkFBb0JBO0lBQ3BCTyx1QkFBdUJBO0lBRXZCRSxtQkFBbUJBO0lBRW5COzs7Ozs7Ozs7O0dBVUMsR0FDRFMsYUFBYSxTQUFTQSxZQUFZQyxHQUFHO1FBQ25DekIsT0FBTzBCLE1BQU0sQ0FBQ0QsS0FBSztRQUVuQixJQUFJRSxJQUFJekIsTUFBTTBCLFFBQVEsQ0FBQ0gsS0FBSztRQUM1QixPQUFRRSxFQUFFRSxRQUFRLENBQUM7SUFDckI7SUFHQTs7Ozs7OztHQU9DLEdBQ0RDLGFBQWEsU0FBU0EsWUFBWUwsR0FBRztRQUNuQ3pCLE9BQU8wQixNQUFNLENBQUNELEtBQUs7UUFFbkIsSUFBSUUsSUFBSXpCLE1BQU0wQixRQUFRLENBQUNILEtBQUs7UUFDNUIsT0FBUUUsRUFBRUcsV0FBVyxDQUFDLE9BQU9ELFFBQVEsQ0FBQztJQUN4QztJQUVBOzs7O0dBSUMsR0FDREUsZ0JBQWdCLFNBQVNBLGVBQWVDLEdBQUcsRUFBRUMsT0FBTztRQUNsRGpDLE9BQU9rQyxLQUFLLENBQUMsVUFBVSxPQUFRRixLQUFNO1FBRXJDLElBQUlMLElBQUl6QixNQUFNMEIsUUFBUSxDQUFDSSxLQUFLO1FBQzVCTCxFQUFFTSxPQUFPLEdBQUdBO1FBQ1osT0FBUU4sRUFBRUUsUUFBUSxDQUFDO0lBQ3JCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbm5vdmF0aW9uLWNvYWNoLy4vbm9kZV9tb2R1bGVzL2h0dHAtc2lnbmF0dXJlL2xpYi91dGlscy5qcz9iNmI4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEyIEpveWVudCwgSW5jLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydC1wbHVzJyk7XG52YXIgc3NocGsgPSByZXF1aXJlKCdzc2hwaycpO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbnZhciBIQVNIX0FMR09TID0ge1xuICAnc2hhMSc6IHRydWUsXG4gICdzaGEyNTYnOiB0cnVlLFxuICAnc2hhNTEyJzogdHJ1ZVxufTtcblxudmFyIFBLX0FMR09TID0ge1xuICAncnNhJzogdHJ1ZSxcbiAgJ2RzYSc6IHRydWUsXG4gICdlY2RzYSc6IHRydWVcbn07XG5cbmZ1bmN0aW9uIEh0dHBTaWduYXR1cmVFcnJvcihtZXNzYWdlLCBjYWxsZXIpIHtcbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKVxuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIGNhbGxlciB8fCBIdHRwU2lnbmF0dXJlRXJyb3IpO1xuXG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIHRoaXMubmFtZSA9IGNhbGxlci5uYW1lO1xufVxudXRpbC5pbmhlcml0cyhIdHRwU2lnbmF0dXJlRXJyb3IsIEVycm9yKTtcblxuZnVuY3Rpb24gSW52YWxpZEFsZ29yaXRobUVycm9yKG1lc3NhZ2UpIHtcbiAgSHR0cFNpZ25hdHVyZUVycm9yLmNhbGwodGhpcywgbWVzc2FnZSwgSW52YWxpZEFsZ29yaXRobUVycm9yKTtcbn1cbnV0aWwuaW5oZXJpdHMoSW52YWxpZEFsZ29yaXRobUVycm9yLCBIdHRwU2lnbmF0dXJlRXJyb3IpO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZUFsZ29yaXRobShhbGdvcml0aG0pIHtcbiAgdmFyIGFsZyA9IGFsZ29yaXRobS50b0xvd2VyQ2FzZSgpLnNwbGl0KCctJyk7XG5cbiAgaWYgKGFsZy5sZW5ndGggIT09IDIpIHtcbiAgICB0aHJvdyAobmV3IEludmFsaWRBbGdvcml0aG1FcnJvcihhbGdbMF0udG9VcHBlckNhc2UoKSArICcgaXMgbm90IGEgJyArXG4gICAgICAndmFsaWQgYWxnb3JpdGhtJykpO1xuICB9XG5cbiAgaWYgKGFsZ1swXSAhPT0gJ2htYWMnICYmICFQS19BTEdPU1thbGdbMF1dKSB7XG4gICAgdGhyb3cgKG5ldyBJbnZhbGlkQWxnb3JpdGhtRXJyb3IoYWxnWzBdLnRvVXBwZXJDYXNlKCkgKyAnIHR5cGUga2V5cyAnICtcbiAgICAgICdhcmUgbm90IHN1cHBvcnRlZCcpKTtcbiAgfVxuXG4gIGlmICghSEFTSF9BTEdPU1thbGdbMV1dKSB7XG4gICAgdGhyb3cgKG5ldyBJbnZhbGlkQWxnb3JpdGhtRXJyb3IoYWxnWzFdLnRvVXBwZXJDYXNlKCkgKyAnIGlzIG5vdCBhICcgK1xuICAgICAgJ3N1cHBvcnRlZCBoYXNoIGFsZ29yaXRobScpKTtcbiAgfVxuXG4gIHJldHVybiAoYWxnKTtcbn1cblxuLy8vLS0tIEFQSVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICBIQVNIX0FMR09TOiBIQVNIX0FMR09TLFxuICBQS19BTEdPUzogUEtfQUxHT1MsXG5cbiAgSHR0cFNpZ25hdHVyZUVycm9yOiBIdHRwU2lnbmF0dXJlRXJyb3IsXG4gIEludmFsaWRBbGdvcml0aG1FcnJvcjogSW52YWxpZEFsZ29yaXRobUVycm9yLFxuXG4gIHZhbGlkYXRlQWxnb3JpdGhtOiB2YWxpZGF0ZUFsZ29yaXRobSxcblxuICAvKipcbiAgICogQ29udmVydHMgYW4gT3BlblNTSCBwdWJsaWMga2V5IChyc2Egb25seSkgdG8gYSBQS0NTIzggUEVNIGZpbGUuXG4gICAqXG4gICAqIFRoZSBpbnRlbnQgb2YgdGhpcyBtb2R1bGUgaXMgdG8gaW50ZXJvcGVyYXRlIHdpdGggT3BlblNTTCBvbmx5LFxuICAgKiBzcGVjaWZpY2FsbHkgdGhlIG5vZGUgY3J5cHRvIG1vZHVsZSdzIGB2ZXJpZnlgIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGtleSBhbiBPcGVuU1NIIHB1YmxpYyBrZXkuXG4gICAqIEByZXR1cm4ge1N0cmluZ30gUEVNIGVuY29kZWQgZm9ybSBvZiB0aGUgUlNBIHB1YmxpYyBrZXkuXG4gICAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gb24gYmFkIGlucHV0LlxuICAgKiBAdGhyb3dzIHtFcnJvcn0gb24gaW52YWxpZCBzc2gga2V5IGZvcm1hdHRlZCBkYXRhLlxuICAgKi9cbiAgc3NoS2V5VG9QRU06IGZ1bmN0aW9uIHNzaEtleVRvUEVNKGtleSkge1xuICAgIGFzc2VydC5zdHJpbmcoa2V5LCAnc3NoX2tleScpO1xuXG4gICAgdmFyIGsgPSBzc2hway5wYXJzZUtleShrZXksICdzc2gnKTtcbiAgICByZXR1cm4gKGsudG9TdHJpbmcoJ3BlbScpKTtcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYW4gT3BlblNTSCBmaW5nZXJwcmludCBmcm9tIGFuIHNzaCBwdWJsaWMga2V5LlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IGFuIE9wZW5TU0ggcHVibGljIGtleS5cbiAgICogQHJldHVybiB7U3RyaW5nfSBrZXkgZmluZ2VycHJpbnQuXG4gICAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gb24gYmFkIGlucHV0LlxuICAgKiBAdGhyb3dzIHtFcnJvcn0gaWYgd2hhdCB5b3UgcGFzc2VkIGRvZXNuJ3QgbG9vayBsaWtlIGFuIHNzaCBwdWJsaWMga2V5LlxuICAgKi9cbiAgZmluZ2VycHJpbnQ6IGZ1bmN0aW9uIGZpbmdlcnByaW50KGtleSkge1xuICAgIGFzc2VydC5zdHJpbmcoa2V5LCAnc3NoX2tleScpO1xuXG4gICAgdmFyIGsgPSBzc2hway5wYXJzZUtleShrZXksICdzc2gnKTtcbiAgICByZXR1cm4gKGsuZmluZ2VycHJpbnQoJ21kNScpLnRvU3RyaW5nKCdoZXgnKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgUEtHQ1MjOCBQRU0gZmlsZSB0byBhbiBPcGVuU1NIIHB1YmxpYyBrZXkgKHJzYSlcbiAgICpcbiAgICogVGhlIHJldmVyc2Ugb2YgdGhlIGFib3ZlIGZ1bmN0aW9uLlxuICAgKi9cbiAgcGVtVG9Sc2FTU0hLZXk6IGZ1bmN0aW9uIHBlbVRvUnNhU1NIS2V5KHBlbSwgY29tbWVudCkge1xuICAgIGFzc2VydC5lcXVhbCgnc3RyaW5nJywgdHlwZW9mIChwZW0pLCAndHlwZW9mIHBlbScpO1xuXG4gICAgdmFyIGsgPSBzc2hway5wYXJzZUtleShwZW0sICdwZW0nKTtcbiAgICBrLmNvbW1lbnQgPSBjb21tZW50O1xuICAgIHJldHVybiAoay50b1N0cmluZygnc3NoJykpO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbImFzc2VydCIsInJlcXVpcmUiLCJzc2hwayIsInV0aWwiLCJIQVNIX0FMR09TIiwiUEtfQUxHT1MiLCJIdHRwU2lnbmF0dXJlRXJyb3IiLCJtZXNzYWdlIiwiY2FsbGVyIiwiRXJyb3IiLCJjYXB0dXJlU3RhY2tUcmFjZSIsIm5hbWUiLCJpbmhlcml0cyIsIkludmFsaWRBbGdvcml0aG1FcnJvciIsImNhbGwiLCJ2YWxpZGF0ZUFsZ29yaXRobSIsImFsZ29yaXRobSIsImFsZyIsInRvTG93ZXJDYXNlIiwic3BsaXQiLCJsZW5ndGgiLCJ0b1VwcGVyQ2FzZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzc2hLZXlUb1BFTSIsImtleSIsInN0cmluZyIsImsiLCJwYXJzZUtleSIsInRvU3RyaW5nIiwiZmluZ2VycHJpbnQiLCJwZW1Ub1JzYVNTSEtleSIsInBlbSIsImNvbW1lbnQiLCJlcXVhbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/http-signature/lib/utils.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/http-signature/lib/verify.js":
/*!***************************************************!*\
  !*** ./node_modules/http-signature/lib/verify.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\n\nvar assert = __webpack_require__(/*! assert-plus */ \"(action-browser)/./node_modules/assert-plus/assert.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar sshpk = __webpack_require__(/*! sshpk */ \"(action-browser)/./node_modules/sshpk/lib/index.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(action-browser)/./node_modules/http-signature/lib/utils.js\");\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n///--- Exported API\nmodule.exports = {\n    /**\n   * Verify RSA/DSA signature against public key.  You are expected to pass in\n   * an object that was returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} pubkey RSA/DSA private key PEM.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   * @throws {InvalidAlgorithmError}\n   */ verifySignature: function verifySignature(parsedSignature, pubkey) {\n        assert.object(parsedSignature, \"parsedSignature\");\n        if (typeof pubkey === \"string\" || Buffer.isBuffer(pubkey)) pubkey = sshpk.parseKey(pubkey);\n        assert.ok(sshpk.Key.isKey(pubkey, [\n            1,\n            1\n        ]), \"pubkey must be a sshpk.Key\");\n        var alg = validateAlgorithm(parsedSignature.algorithm);\n        if (alg[0] === \"hmac\" || alg[0] !== pubkey.type) return false;\n        var v = pubkey.createVerify(alg[1]);\n        v.update(parsedSignature.signingString);\n        return v.verify(parsedSignature.params.signature, \"base64\");\n    },\n    /**\n   * Verify HMAC against shared secret.  You are expected to pass in an object\n   * that was returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} secret HMAC shared secret.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   * @throws {InvalidAlgorithmError}\n   */ verifyHMAC: function verifyHMAC(parsedSignature, secret) {\n        assert.object(parsedSignature, \"parsedHMAC\");\n        assert.string(secret, \"secret\");\n        var alg = validateAlgorithm(parsedSignature.algorithm);\n        if (alg[0] !== \"hmac\") return false;\n        var hashAlg = alg[1].toUpperCase();\n        var hmac = crypto.createHmac(hashAlg, secret);\n        hmac.update(parsedSignature.signingString);\n        /*\n     * Now double-hash to avoid leaking timing information - there's\n     * no easy constant-time compare in JS, so we use this approach\n     * instead. See for more info:\n     * https://www.isecpartners.com/blog/2011/february/double-hmac-\n     * verification.aspx\n     */ var h1 = crypto.createHmac(hashAlg, secret);\n        h1.update(hmac.digest());\n        h1 = h1.digest();\n        var h2 = crypto.createHmac(hashAlg, secret);\n        h2.update(new Buffer(parsedSignature.params.signature, \"base64\"));\n        h2 = h2.digest();\n        /* Node 0.8 returns strings from .digest(). */ if (typeof h1 === \"string\") return h1 === h2;\n        /* And node 0.10 lacks the .equals() method on Buffers. */ if (Buffer.isBuffer(h1) && !h1.equals) return h1.toString(\"binary\") === h2.toString(\"binary\");\n        return h1.equals(h2);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9odHRwLXNpZ25hdHVyZS9saWIvdmVyaWZ5LmpzIiwibWFwcGluZ3MiOiJBQUFBLDhCQUE4Qjs7QUFFOUIsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDckIsSUFBSUMsU0FBU0QsbUJBQU9BLENBQUM7QUFDckIsSUFBSUUsUUFBUUYsbUJBQU9BLENBQUM7QUFDcEIsSUFBSUcsUUFBUUgsbUJBQU9BLENBQUM7QUFFcEIsSUFBSUksYUFBYUQsTUFBTUMsVUFBVTtBQUNqQyxJQUFJQyxXQUFXRixNQUFNRSxRQUFRO0FBQzdCLElBQUlDLHdCQUF3QkgsTUFBTUcscUJBQXFCO0FBQ3ZELElBQUlDLHFCQUFxQkosTUFBTUksa0JBQWtCO0FBQ2pELElBQUlDLG9CQUFvQkwsTUFBTUssaUJBQWlCO0FBRS9DLG1CQUFtQjtBQUVuQkMsT0FBT0MsT0FBTyxHQUFHO0lBQ2Y7Ozs7Ozs7OztHQVNDLEdBQ0RDLGlCQUFpQixTQUFTQSxnQkFBZ0JDLGVBQWUsRUFBRUMsTUFBTTtRQUMvRGQsT0FBT2UsTUFBTSxDQUFDRixpQkFBaUI7UUFDL0IsSUFBSSxPQUFRQyxXQUFZLFlBQVlFLE9BQU9DLFFBQVEsQ0FBQ0gsU0FDbERBLFNBQVNYLE1BQU1lLFFBQVEsQ0FBQ0o7UUFDMUJkLE9BQU9tQixFQUFFLENBQUNoQixNQUFNaUIsR0FBRyxDQUFDQyxLQUFLLENBQUNQLFFBQVE7WUFBQztZQUFHO1NBQUUsR0FBRztRQUUzQyxJQUFJUSxNQUFNYixrQkFBa0JJLGdCQUFnQlUsU0FBUztRQUNyRCxJQUFJRCxHQUFHLENBQUMsRUFBRSxLQUFLLFVBQVVBLEdBQUcsQ0FBQyxFQUFFLEtBQUtSLE9BQU9VLElBQUksRUFDN0MsT0FBUTtRQUVWLElBQUlDLElBQUlYLE9BQU9ZLFlBQVksQ0FBQ0osR0FBRyxDQUFDLEVBQUU7UUFDbENHLEVBQUVFLE1BQU0sQ0FBQ2QsZ0JBQWdCZSxhQUFhO1FBQ3RDLE9BQVFILEVBQUVJLE1BQU0sQ0FBQ2hCLGdCQUFnQmlCLE1BQU0sQ0FBQ0MsU0FBUyxFQUFFO0lBQ3JEO0lBRUE7Ozs7Ozs7OztHQVNDLEdBQ0RDLFlBQVksU0FBU0EsV0FBV25CLGVBQWUsRUFBRW9CLE1BQU07UUFDckRqQyxPQUFPZSxNQUFNLENBQUNGLGlCQUFpQjtRQUMvQmIsT0FBT2tDLE1BQU0sQ0FBQ0QsUUFBUTtRQUV0QixJQUFJWCxNQUFNYixrQkFBa0JJLGdCQUFnQlUsU0FBUztRQUNyRCxJQUFJRCxHQUFHLENBQUMsRUFBRSxLQUFLLFFBQ2IsT0FBUTtRQUVWLElBQUlhLFVBQVViLEdBQUcsQ0FBQyxFQUFFLENBQUNjLFdBQVc7UUFFaEMsSUFBSUMsT0FBT25DLE9BQU9vQyxVQUFVLENBQUNILFNBQVNGO1FBQ3RDSSxLQUFLVixNQUFNLENBQUNkLGdCQUFnQmUsYUFBYTtRQUV6Qzs7Ozs7O0tBTUMsR0FDRCxJQUFJVyxLQUFLckMsT0FBT29DLFVBQVUsQ0FBQ0gsU0FBU0Y7UUFDcENNLEdBQUdaLE1BQU0sQ0FBQ1UsS0FBS0csTUFBTTtRQUNyQkQsS0FBS0EsR0FBR0MsTUFBTTtRQUNkLElBQUlDLEtBQUt2QyxPQUFPb0MsVUFBVSxDQUFDSCxTQUFTRjtRQUNwQ1EsR0FBR2QsTUFBTSxDQUFDLElBQUlYLE9BQU9ILGdCQUFnQmlCLE1BQU0sQ0FBQ0MsU0FBUyxFQUFFO1FBQ3ZEVSxLQUFLQSxHQUFHRCxNQUFNO1FBRWQsNENBQTRDLEdBQzVDLElBQUksT0FBUUQsT0FBUSxVQUNsQixPQUFRQSxPQUFPRTtRQUNqQix3REFBd0QsR0FDeEQsSUFBSXpCLE9BQU9DLFFBQVEsQ0FBQ3NCLE9BQU8sQ0FBQ0EsR0FBR0csTUFBTSxFQUNuQyxPQUFRSCxHQUFHSSxRQUFRLENBQUMsY0FBY0YsR0FBR0UsUUFBUSxDQUFDO1FBRWhELE9BQVFKLEdBQUdHLE1BQU0sQ0FBQ0Q7SUFDcEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2lubm92YXRpb24tY29hY2gvLi9ub2RlX21vZHVsZXMvaHR0cC1zaWduYXR1cmUvbGliL3ZlcmlmeS5qcz9jN2Q2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1IEpveWVudCwgSW5jLlxuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0LXBsdXMnKTtcbnZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbnZhciBzc2hwayA9IHJlcXVpcmUoJ3NzaHBrJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBIQVNIX0FMR09TID0gdXRpbHMuSEFTSF9BTEdPUztcbnZhciBQS19BTEdPUyA9IHV0aWxzLlBLX0FMR09TO1xudmFyIEludmFsaWRBbGdvcml0aG1FcnJvciA9IHV0aWxzLkludmFsaWRBbGdvcml0aG1FcnJvcjtcbnZhciBIdHRwU2lnbmF0dXJlRXJyb3IgPSB1dGlscy5IdHRwU2lnbmF0dXJlRXJyb3I7XG52YXIgdmFsaWRhdGVBbGdvcml0aG0gPSB1dGlscy52YWxpZGF0ZUFsZ29yaXRobTtcblxuLy8vLS0tIEV4cG9ydGVkIEFQSVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLyoqXG4gICAqIFZlcmlmeSBSU0EvRFNBIHNpZ25hdHVyZSBhZ2FpbnN0IHB1YmxpYyBrZXkuICBZb3UgYXJlIGV4cGVjdGVkIHRvIHBhc3MgaW5cbiAgICogYW4gb2JqZWN0IHRoYXQgd2FzIHJldHVybmVkIGZyb20gYHBhcnNlKClgLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyc2VkU2lnbmF0dXJlIHRoZSBvYmplY3QgeW91IGdvdCBmcm9tIGBwYXJzZWAuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwdWJrZXkgUlNBL0RTQSBwcml2YXRlIGtleSBQRU0uXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgdmFsaWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICogQHRocm93cyB7VHlwZUVycm9yfSBpZiB5b3UgcGFzcyBpbiBiYWQgYXJndW1lbnRzLlxuICAgKiBAdGhyb3dzIHtJbnZhbGlkQWxnb3JpdGhtRXJyb3J9XG4gICAqL1xuICB2ZXJpZnlTaWduYXR1cmU6IGZ1bmN0aW9uIHZlcmlmeVNpZ25hdHVyZShwYXJzZWRTaWduYXR1cmUsIHB1YmtleSkge1xuICAgIGFzc2VydC5vYmplY3QocGFyc2VkU2lnbmF0dXJlLCAncGFyc2VkU2lnbmF0dXJlJyk7XG4gICAgaWYgKHR5cGVvZiAocHVia2V5KSA9PT0gJ3N0cmluZycgfHwgQnVmZmVyLmlzQnVmZmVyKHB1YmtleSkpXG4gICAgICBwdWJrZXkgPSBzc2hway5wYXJzZUtleShwdWJrZXkpO1xuICAgIGFzc2VydC5vayhzc2hway5LZXkuaXNLZXkocHVia2V5LCBbMSwgMV0pLCAncHVia2V5IG11c3QgYmUgYSBzc2hway5LZXknKTtcblxuICAgIHZhciBhbGcgPSB2YWxpZGF0ZUFsZ29yaXRobShwYXJzZWRTaWduYXR1cmUuYWxnb3JpdGhtKTtcbiAgICBpZiAoYWxnWzBdID09PSAnaG1hYycgfHwgYWxnWzBdICE9PSBwdWJrZXkudHlwZSlcbiAgICAgIHJldHVybiAoZmFsc2UpO1xuXG4gICAgdmFyIHYgPSBwdWJrZXkuY3JlYXRlVmVyaWZ5KGFsZ1sxXSk7XG4gICAgdi51cGRhdGUocGFyc2VkU2lnbmF0dXJlLnNpZ25pbmdTdHJpbmcpO1xuICAgIHJldHVybiAodi52ZXJpZnkocGFyc2VkU2lnbmF0dXJlLnBhcmFtcy5zaWduYXR1cmUsICdiYXNlNjQnKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFZlcmlmeSBITUFDIGFnYWluc3Qgc2hhcmVkIHNlY3JldC4gIFlvdSBhcmUgZXhwZWN0ZWQgdG8gcGFzcyBpbiBhbiBvYmplY3RcbiAgICogdGhhdCB3YXMgcmV0dXJuZWQgZnJvbSBgcGFyc2UoKWAuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJzZWRTaWduYXR1cmUgdGhlIG9iamVjdCB5b3UgZ290IGZyb20gYHBhcnNlYC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHNlY3JldCBITUFDIHNoYXJlZCBzZWNyZXQuXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgdmFsaWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICogQHRocm93cyB7VHlwZUVycm9yfSBpZiB5b3UgcGFzcyBpbiBiYWQgYXJndW1lbnRzLlxuICAgKiBAdGhyb3dzIHtJbnZhbGlkQWxnb3JpdGhtRXJyb3J9XG4gICAqL1xuICB2ZXJpZnlITUFDOiBmdW5jdGlvbiB2ZXJpZnlITUFDKHBhcnNlZFNpZ25hdHVyZSwgc2VjcmV0KSB7XG4gICAgYXNzZXJ0Lm9iamVjdChwYXJzZWRTaWduYXR1cmUsICdwYXJzZWRITUFDJyk7XG4gICAgYXNzZXJ0LnN0cmluZyhzZWNyZXQsICdzZWNyZXQnKTtcblxuICAgIHZhciBhbGcgPSB2YWxpZGF0ZUFsZ29yaXRobShwYXJzZWRTaWduYXR1cmUuYWxnb3JpdGhtKTtcbiAgICBpZiAoYWxnWzBdICE9PSAnaG1hYycpXG4gICAgICByZXR1cm4gKGZhbHNlKTtcblxuICAgIHZhciBoYXNoQWxnID0gYWxnWzFdLnRvVXBwZXJDYXNlKCk7XG5cbiAgICB2YXIgaG1hYyA9IGNyeXB0by5jcmVhdGVIbWFjKGhhc2hBbGcsIHNlY3JldCk7XG4gICAgaG1hYy51cGRhdGUocGFyc2VkU2lnbmF0dXJlLnNpZ25pbmdTdHJpbmcpO1xuXG4gICAgLypcbiAgICAgKiBOb3cgZG91YmxlLWhhc2ggdG8gYXZvaWQgbGVha2luZyB0aW1pbmcgaW5mb3JtYXRpb24gLSB0aGVyZSdzXG4gICAgICogbm8gZWFzeSBjb25zdGFudC10aW1lIGNvbXBhcmUgaW4gSlMsIHNvIHdlIHVzZSB0aGlzIGFwcHJvYWNoXG4gICAgICogaW5zdGVhZC4gU2VlIGZvciBtb3JlIGluZm86XG4gICAgICogaHR0cHM6Ly93d3cuaXNlY3BhcnRuZXJzLmNvbS9ibG9nLzIwMTEvZmVicnVhcnkvZG91YmxlLWhtYWMtXG4gICAgICogdmVyaWZpY2F0aW9uLmFzcHhcbiAgICAgKi9cbiAgICB2YXIgaDEgPSBjcnlwdG8uY3JlYXRlSG1hYyhoYXNoQWxnLCBzZWNyZXQpO1xuICAgIGgxLnVwZGF0ZShobWFjLmRpZ2VzdCgpKTtcbiAgICBoMSA9IGgxLmRpZ2VzdCgpO1xuICAgIHZhciBoMiA9IGNyeXB0by5jcmVhdGVIbWFjKGhhc2hBbGcsIHNlY3JldCk7XG4gICAgaDIudXBkYXRlKG5ldyBCdWZmZXIocGFyc2VkU2lnbmF0dXJlLnBhcmFtcy5zaWduYXR1cmUsICdiYXNlNjQnKSk7XG4gICAgaDIgPSBoMi5kaWdlc3QoKTtcblxuICAgIC8qIE5vZGUgMC44IHJldHVybnMgc3RyaW5ncyBmcm9tIC5kaWdlc3QoKS4gKi9cbiAgICBpZiAodHlwZW9mIChoMSkgPT09ICdzdHJpbmcnKVxuICAgICAgcmV0dXJuIChoMSA9PT0gaDIpO1xuICAgIC8qIEFuZCBub2RlIDAuMTAgbGFja3MgdGhlIC5lcXVhbHMoKSBtZXRob2Qgb24gQnVmZmVycy4gKi9cbiAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKGgxKSAmJiAhaDEuZXF1YWxzKVxuICAgICAgcmV0dXJuIChoMS50b1N0cmluZygnYmluYXJ5JykgPT09IGgyLnRvU3RyaW5nKCdiaW5hcnknKSk7XG5cbiAgICByZXR1cm4gKGgxLmVxdWFscyhoMikpO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbImFzc2VydCIsInJlcXVpcmUiLCJjcnlwdG8iLCJzc2hwayIsInV0aWxzIiwiSEFTSF9BTEdPUyIsIlBLX0FMR09TIiwiSW52YWxpZEFsZ29yaXRobUVycm9yIiwiSHR0cFNpZ25hdHVyZUVycm9yIiwidmFsaWRhdGVBbGdvcml0aG0iLCJtb2R1bGUiLCJleHBvcnRzIiwidmVyaWZ5U2lnbmF0dXJlIiwicGFyc2VkU2lnbmF0dXJlIiwicHVia2V5Iiwib2JqZWN0IiwiQnVmZmVyIiwiaXNCdWZmZXIiLCJwYXJzZUtleSIsIm9rIiwiS2V5IiwiaXNLZXkiLCJhbGciLCJhbGdvcml0aG0iLCJ0eXBlIiwidiIsImNyZWF0ZVZlcmlmeSIsInVwZGF0ZSIsInNpZ25pbmdTdHJpbmciLCJ2ZXJpZnkiLCJwYXJhbXMiLCJzaWduYXR1cmUiLCJ2ZXJpZnlITUFDIiwic2VjcmV0Iiwic3RyaW5nIiwiaGFzaEFsZyIsInRvVXBwZXJDYXNlIiwiaG1hYyIsImNyZWF0ZUhtYWMiLCJoMSIsImRpZ2VzdCIsImgyIiwiZXF1YWxzIiwidG9TdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/http-signature/lib/verify.js\n");

/***/ })

};
;