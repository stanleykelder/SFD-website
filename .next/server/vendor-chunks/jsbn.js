"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jsbn";
exports.ids = ["vendor-chunks/jsbn"];
exports.modules = {

/***/ "(action-browser)/./node_modules/jsbn/index.js":
/*!************************************!*\
  !*** ./node_modules/jsbn/index.js ***!
  \************************************/
/***/ ((module, exports) => {

eval("\n(function() {\n    // Copyright (c) 2005  Tom Wu\n    // All Rights Reserved.\n    // See \"LICENSE\" for details.\n    // Basic JavaScript BN library - subset useful for RSA encryption.\n    // Bits per digit\n    var dbits;\n    // JavaScript engine analysis\n    var canary = 0xdeadbeefcafe;\n    var j_lm = (canary & 0xffffff) == 0xefcafe;\n    // (public) Constructor\n    function BigInteger(a, b, c) {\n        if (a != null) if (\"number\" == typeof a) this.fromNumber(a, b, c);\n        else if (b == null && \"string\" != typeof a) this.fromString(a, 256);\n        else this.fromString(a, b);\n    }\n    // return new, unset BigInteger\n    function nbi() {\n        return new BigInteger(null);\n    }\n    // am: Compute w_j += (x*this_i), propagate carries,\n    // c is initial carry, returns final carry.\n    // c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n    // We need to select the fastest one that works in this environment.\n    // am1: use a single mult and divide to get the high bits,\n    // max digit bits should be 26 because\n    // max internal value = 2*dvalue^2-2*dvalue (< 2^53)\n    function am1(i, x, w, j, c, n) {\n        while(--n >= 0){\n            var v = x * this[i++] + w[j] + c;\n            c = Math.floor(v / 0x4000000);\n            w[j++] = v & 0x3ffffff;\n        }\n        return c;\n    }\n    // am2 avoids a big mult-and-extract completely.\n    // Max digit bits should be <= 30 because we do bitwise ops\n    // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n    function am2(i, x, w, j, c, n) {\n        var xl = x & 0x7fff, xh = x >> 15;\n        while(--n >= 0){\n            var l = this[i] & 0x7fff;\n            var h = this[i++] >> 15;\n            var m = xh * l + h * xl;\n            l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n            c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n            w[j++] = l & 0x3fffffff;\n        }\n        return c;\n    }\n    // Alternately, set max digit bits to 28 since some\n    // browsers slow down when dealing with 32-bit numbers.\n    function am3(i, x, w, j, c, n) {\n        var xl = x & 0x3fff, xh = x >> 14;\n        while(--n >= 0){\n            var l = this[i] & 0x3fff;\n            var h = this[i++] >> 14;\n            var m = xh * l + h * xl;\n            l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n            c = (l >> 28) + (m >> 14) + xh * h;\n            w[j++] = l & 0xfffffff;\n        }\n        return c;\n    }\n    var inBrowser = typeof navigator !== \"undefined\";\n    if (inBrowser && j_lm && navigator.appName == \"Microsoft Internet Explorer\") {\n        BigInteger.prototype.am = am2;\n        dbits = 30;\n    } else if (inBrowser && j_lm && navigator.appName != \"Netscape\") {\n        BigInteger.prototype.am = am1;\n        dbits = 26;\n    } else {\n        BigInteger.prototype.am = am3;\n        dbits = 28;\n    }\n    BigInteger.prototype.DB = dbits;\n    BigInteger.prototype.DM = (1 << dbits) - 1;\n    BigInteger.prototype.DV = 1 << dbits;\n    var BI_FP = 52;\n    BigInteger.prototype.FV = Math.pow(2, BI_FP);\n    BigInteger.prototype.F1 = BI_FP - dbits;\n    BigInteger.prototype.F2 = 2 * dbits - BI_FP;\n    // Digit conversions\n    var BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n    var BI_RC = new Array();\n    var rr, vv;\n    rr = \"0\".charCodeAt(0);\n    for(vv = 0; vv <= 9; ++vv)BI_RC[rr++] = vv;\n    rr = \"a\".charCodeAt(0);\n    for(vv = 10; vv < 36; ++vv)BI_RC[rr++] = vv;\n    rr = \"A\".charCodeAt(0);\n    for(vv = 10; vv < 36; ++vv)BI_RC[rr++] = vv;\n    function int2char(n) {\n        return BI_RM.charAt(n);\n    }\n    function intAt(s, i) {\n        var c = BI_RC[s.charCodeAt(i)];\n        return c == null ? -1 : c;\n    }\n    // (protected) copy this to r\n    function bnpCopyTo(r) {\n        for(var i = this.t - 1; i >= 0; --i)r[i] = this[i];\n        r.t = this.t;\n        r.s = this.s;\n    }\n    // (protected) set from integer value x, -DV <= x < DV\n    function bnpFromInt(x) {\n        this.t = 1;\n        this.s = x < 0 ? -1 : 0;\n        if (x > 0) this[0] = x;\n        else if (x < -1) this[0] = x + this.DV;\n        else this.t = 0;\n    }\n    // return bigint initialized to value\n    function nbv(i) {\n        var r = nbi();\n        r.fromInt(i);\n        return r;\n    }\n    // (protected) set from string and radix\n    function bnpFromString(s, b) {\n        var k;\n        if (b == 16) k = 4;\n        else if (b == 8) k = 3;\n        else if (b == 256) k = 8; // byte array\n        else if (b == 2) k = 1;\n        else if (b == 32) k = 5;\n        else if (b == 4) k = 2;\n        else {\n            this.fromRadix(s, b);\n            return;\n        }\n        this.t = 0;\n        this.s = 0;\n        var i = s.length, mi = false, sh = 0;\n        while(--i >= 0){\n            var x = k == 8 ? s[i] & 0xff : intAt(s, i);\n            if (x < 0) {\n                if (s.charAt(i) == \"-\") mi = true;\n                continue;\n            }\n            mi = false;\n            if (sh == 0) this[this.t++] = x;\n            else if (sh + k > this.DB) {\n                this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;\n                this[this.t++] = x >> this.DB - sh;\n            } else this[this.t - 1] |= x << sh;\n            sh += k;\n            if (sh >= this.DB) sh -= this.DB;\n        }\n        if (k == 8 && (s[0] & 0x80) != 0) {\n            this.s = -1;\n            if (sh > 0) this[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;\n        }\n        this.clamp();\n        if (mi) BigInteger.ZERO.subTo(this, this);\n    }\n    // (protected) clamp off excess high words\n    function bnpClamp() {\n        var c = this.s & this.DM;\n        while(this.t > 0 && this[this.t - 1] == c)--this.t;\n    }\n    // (public) return string representation in given radix\n    function bnToString(b) {\n        if (this.s < 0) return \"-\" + this.negate().toString(b);\n        var k;\n        if (b == 16) k = 4;\n        else if (b == 8) k = 3;\n        else if (b == 2) k = 1;\n        else if (b == 32) k = 5;\n        else if (b == 4) k = 2;\n        else return this.toRadix(b);\n        var km = (1 << k) - 1, d, m = false, r = \"\", i = this.t;\n        var p = this.DB - i * this.DB % k;\n        if (i-- > 0) {\n            if (p < this.DB && (d = this[i] >> p) > 0) {\n                m = true;\n                r = int2char(d);\n            }\n            while(i >= 0){\n                if (p < k) {\n                    d = (this[i] & (1 << p) - 1) << k - p;\n                    d |= this[--i] >> (p += this.DB - k);\n                } else {\n                    d = this[i] >> (p -= k) & km;\n                    if (p <= 0) {\n                        p += this.DB;\n                        --i;\n                    }\n                }\n                if (d > 0) m = true;\n                if (m) r += int2char(d);\n            }\n        }\n        return m ? r : \"0\";\n    }\n    // (public) -this\n    function bnNegate() {\n        var r = nbi();\n        BigInteger.ZERO.subTo(this, r);\n        return r;\n    }\n    // (public) |this|\n    function bnAbs() {\n        return this.s < 0 ? this.negate() : this;\n    }\n    // (public) return + if this > a, - if this < a, 0 if equal\n    function bnCompareTo(a) {\n        var r = this.s - a.s;\n        if (r != 0) return r;\n        var i = this.t;\n        r = i - a.t;\n        if (r != 0) return this.s < 0 ? -r : r;\n        while(--i >= 0)if ((r = this[i] - a[i]) != 0) return r;\n        return 0;\n    }\n    // returns bit length of the integer x\n    function nbits(x) {\n        var r = 1, t;\n        if ((t = x >>> 16) != 0) {\n            x = t;\n            r += 16;\n        }\n        if ((t = x >> 8) != 0) {\n            x = t;\n            r += 8;\n        }\n        if ((t = x >> 4) != 0) {\n            x = t;\n            r += 4;\n        }\n        if ((t = x >> 2) != 0) {\n            x = t;\n            r += 2;\n        }\n        if ((t = x >> 1) != 0) {\n            x = t;\n            r += 1;\n        }\n        return r;\n    }\n    // (public) return the number of bits in \"this\"\n    function bnBitLength() {\n        if (this.t <= 0) return 0;\n        return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);\n    }\n    // (protected) r = this << n*DB\n    function bnpDLShiftTo(n, r) {\n        var i;\n        for(i = this.t - 1; i >= 0; --i)r[i + n] = this[i];\n        for(i = n - 1; i >= 0; --i)r[i] = 0;\n        r.t = this.t + n;\n        r.s = this.s;\n    }\n    // (protected) r = this >> n*DB\n    function bnpDRShiftTo(n, r) {\n        for(var i = n; i < this.t; ++i)r[i - n] = this[i];\n        r.t = Math.max(this.t - n, 0);\n        r.s = this.s;\n    }\n    // (protected) r = this << n\n    function bnpLShiftTo(n, r) {\n        var bs = n % this.DB;\n        var cbs = this.DB - bs;\n        var bm = (1 << cbs) - 1;\n        var ds = Math.floor(n / this.DB), c = this.s << bs & this.DM, i;\n        for(i = this.t - 1; i >= 0; --i){\n            r[i + ds + 1] = this[i] >> cbs | c;\n            c = (this[i] & bm) << bs;\n        }\n        for(i = ds - 1; i >= 0; --i)r[i] = 0;\n        r[ds] = c;\n        r.t = this.t + ds + 1;\n        r.s = this.s;\n        r.clamp();\n    }\n    // (protected) r = this >> n\n    function bnpRShiftTo(n, r) {\n        r.s = this.s;\n        var ds = Math.floor(n / this.DB);\n        if (ds >= this.t) {\n            r.t = 0;\n            return;\n        }\n        var bs = n % this.DB;\n        var cbs = this.DB - bs;\n        var bm = (1 << bs) - 1;\n        r[0] = this[ds] >> bs;\n        for(var i = ds + 1; i < this.t; ++i){\n            r[i - ds - 1] |= (this[i] & bm) << cbs;\n            r[i - ds] = this[i] >> bs;\n        }\n        if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;\n        r.t = this.t - ds;\n        r.clamp();\n    }\n    // (protected) r = this - a\n    function bnpSubTo(a, r) {\n        var i = 0, c = 0, m = Math.min(a.t, this.t);\n        while(i < m){\n            c += this[i] - a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        if (a.t < this.t) {\n            c -= a.s;\n            while(i < this.t){\n                c += this[i];\n                r[i++] = c & this.DM;\n                c >>= this.DB;\n            }\n            c += this.s;\n        } else {\n            c += this.s;\n            while(i < a.t){\n                c -= a[i];\n                r[i++] = c & this.DM;\n                c >>= this.DB;\n            }\n            c -= a.s;\n        }\n        r.s = c < 0 ? -1 : 0;\n        if (c < -1) r[i++] = this.DV + c;\n        else if (c > 0) r[i++] = c;\n        r.t = i;\n        r.clamp();\n    }\n    // (protected) r = this * a, r != this,a (HAC 14.12)\n    // \"this\" should be the larger one if appropriate.\n    function bnpMultiplyTo(a, r) {\n        var x = this.abs(), y = a.abs();\n        var i = x.t;\n        r.t = i + y.t;\n        while(--i >= 0)r[i] = 0;\n        for(i = 0; i < y.t; ++i)r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n        r.s = 0;\n        r.clamp();\n        if (this.s != a.s) BigInteger.ZERO.subTo(r, r);\n    }\n    // (protected) r = this^2, r != this (HAC 14.16)\n    function bnpSquareTo(r) {\n        var x = this.abs();\n        var i = r.t = 2 * x.t;\n        while(--i >= 0)r[i] = 0;\n        for(i = 0; i < x.t - 1; ++i){\n            var c = x.am(i, x[i], r, 2 * i, 0, 1);\n            if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n                r[i + x.t] -= x.DV;\n                r[i + x.t + 1] = 1;\n            }\n        }\n        if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n        r.s = 0;\n        r.clamp();\n    }\n    // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n    // r != q, this != m.  q or r may be null.\n    function bnpDivRemTo(m, q, r) {\n        var pm = m.abs();\n        if (pm.t <= 0) return;\n        var pt = this.abs();\n        if (pt.t < pm.t) {\n            if (q != null) q.fromInt(0);\n            if (r != null) this.copyTo(r);\n            return;\n        }\n        if (r == null) r = nbi();\n        var y = nbi(), ts = this.s, ms = m.s;\n        var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus\n        if (nsh > 0) {\n            pm.lShiftTo(nsh, y);\n            pt.lShiftTo(nsh, r);\n        } else {\n            pm.copyTo(y);\n            pt.copyTo(r);\n        }\n        var ys = y.t;\n        var y0 = y[ys - 1];\n        if (y0 == 0) return;\n        var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);\n        var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;\n        var i = r.t, j = i - ys, t = q == null ? nbi() : q;\n        y.dlShiftTo(j, t);\n        if (r.compareTo(t) >= 0) {\n            r[r.t++] = 1;\n            r.subTo(t, r);\n        }\n        BigInteger.ONE.dlShiftTo(ys, t);\n        t.subTo(y, y); // \"negative\" y so we can replace sub with am later\n        while(y.t < ys)y[y.t++] = 0;\n        while(--j >= 0){\n            // Estimate quotient digit\n            var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n            if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {\n                y.dlShiftTo(j, t);\n                r.subTo(t, r);\n                while(r[i] < --qd)r.subTo(t, r);\n            }\n        }\n        if (q != null) {\n            r.drShiftTo(ys, q);\n            if (ts != ms) BigInteger.ZERO.subTo(q, q);\n        }\n        r.t = ys;\n        r.clamp();\n        if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder\n        if (ts < 0) BigInteger.ZERO.subTo(r, r);\n    }\n    // (public) this mod a\n    function bnMod(a) {\n        var r = nbi();\n        this.abs().divRemTo(a, null, r);\n        if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);\n        return r;\n    }\n    // Modular reduction using \"classic\" algorithm\n    function Classic(m) {\n        this.m = m;\n    }\n    function cConvert(x) {\n        if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\n        else return x;\n    }\n    function cRevert(x) {\n        return x;\n    }\n    function cReduce(x) {\n        x.divRemTo(this.m, null, x);\n    }\n    function cMulTo(x, y, r) {\n        x.multiplyTo(y, r);\n        this.reduce(r);\n    }\n    function cSqrTo(x, r) {\n        x.squareTo(r);\n        this.reduce(r);\n    }\n    Classic.prototype.convert = cConvert;\n    Classic.prototype.revert = cRevert;\n    Classic.prototype.reduce = cReduce;\n    Classic.prototype.mulTo = cMulTo;\n    Classic.prototype.sqrTo = cSqrTo;\n    // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n    // justification:\n    //         xy == 1 (mod m)\n    //         xy =  1+km\n    //   xy(2-xy) = (1+km)(1-km)\n    // x[y(2-xy)] = 1-k^2m^2\n    // x[y(2-xy)] == 1 (mod m^2)\n    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n    // JS multiply \"overflows\" differently from C/C++, so care is needed here.\n    function bnpInvDigit() {\n        if (this.t < 1) return 0;\n        var x = this[0];\n        if ((x & 1) == 0) return 0;\n        var y = x & 3; // y == 1/x mod 2^2\n        y = y * (2 - (x & 0xf) * y) & 0xf; // y == 1/x mod 2^4\n        y = y * (2 - (x & 0xff) * y) & 0xff; // y == 1/x mod 2^8\n        y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff; // y == 1/x mod 2^16\n        // last step - calculate inverse mod DV directly;\n        // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n        y = y * (2 - x * y % this.DV) % this.DV; // y == 1/x mod 2^dbits\n        // we really want the negative inverse, and -DV < y < DV\n        return y > 0 ? this.DV - y : -y;\n    }\n    // Montgomery reduction\n    function Montgomery(m) {\n        this.m = m;\n        this.mp = m.invDigit();\n        this.mpl = this.mp & 0x7fff;\n        this.mph = this.mp >> 15;\n        this.um = (1 << m.DB - 15) - 1;\n        this.mt2 = 2 * m.t;\n    }\n    // xR mod m\n    function montConvert(x) {\n        var r = nbi();\n        x.abs().dlShiftTo(this.m.t, r);\n        r.divRemTo(this.m, null, r);\n        if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);\n        return r;\n    }\n    // x/R mod m\n    function montRevert(x) {\n        var r = nbi();\n        x.copyTo(r);\n        this.reduce(r);\n        return r;\n    }\n    // x = x/R mod m (HAC 14.32)\n    function montReduce(x) {\n        while(x.t <= this.mt2)x[x.t++] = 0;\n        for(var i = 0; i < this.m.t; ++i){\n            // faster way of calculating u0 = x[i]*mp mod DV\n            var j = x[i] & 0x7fff;\n            var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM;\n            // use am to combine the multiply-shift-add into one call\n            j = i + this.m.t;\n            x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n            // propagate carry\n            while(x[j] >= x.DV){\n                x[j] -= x.DV;\n                x[++j]++;\n            }\n        }\n        x.clamp();\n        x.drShiftTo(this.m.t, x);\n        if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n    }\n    // r = \"x^2/R mod m\"; x != r\n    function montSqrTo(x, r) {\n        x.squareTo(r);\n        this.reduce(r);\n    }\n    // r = \"xy/R mod m\"; x,y != r\n    function montMulTo(x, y, r) {\n        x.multiplyTo(y, r);\n        this.reduce(r);\n    }\n    Montgomery.prototype.convert = montConvert;\n    Montgomery.prototype.revert = montRevert;\n    Montgomery.prototype.reduce = montReduce;\n    Montgomery.prototype.mulTo = montMulTo;\n    Montgomery.prototype.sqrTo = montSqrTo;\n    // (protected) true iff this is even\n    function bnpIsEven() {\n        return (this.t > 0 ? this[0] & 1 : this.s) == 0;\n    }\n    // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n    function bnpExp(e, z) {\n        if (e > 0xffffffff || e < 1) return BigInteger.ONE;\n        var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e) - 1;\n        g.copyTo(r);\n        while(--i >= 0){\n            z.sqrTo(r, r2);\n            if ((e & 1 << i) > 0) z.mulTo(r2, g, r);\n            else {\n                var t = r;\n                r = r2;\n                r2 = t;\n            }\n        }\n        return z.revert(r);\n    }\n    // (public) this^e % m, 0 <= e < 2^32\n    function bnModPowInt(e, m) {\n        var z;\n        if (e < 256 || m.isEven()) z = new Classic(m);\n        else z = new Montgomery(m);\n        return this.exp(e, z);\n    }\n    // protected\n    BigInteger.prototype.copyTo = bnpCopyTo;\n    BigInteger.prototype.fromInt = bnpFromInt;\n    BigInteger.prototype.fromString = bnpFromString;\n    BigInteger.prototype.clamp = bnpClamp;\n    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;\n    BigInteger.prototype.drShiftTo = bnpDRShiftTo;\n    BigInteger.prototype.lShiftTo = bnpLShiftTo;\n    BigInteger.prototype.rShiftTo = bnpRShiftTo;\n    BigInteger.prototype.subTo = bnpSubTo;\n    BigInteger.prototype.multiplyTo = bnpMultiplyTo;\n    BigInteger.prototype.squareTo = bnpSquareTo;\n    BigInteger.prototype.divRemTo = bnpDivRemTo;\n    BigInteger.prototype.invDigit = bnpInvDigit;\n    BigInteger.prototype.isEven = bnpIsEven;\n    BigInteger.prototype.exp = bnpExp;\n    // public\n    BigInteger.prototype.toString = bnToString;\n    BigInteger.prototype.negate = bnNegate;\n    BigInteger.prototype.abs = bnAbs;\n    BigInteger.prototype.compareTo = bnCompareTo;\n    BigInteger.prototype.bitLength = bnBitLength;\n    BigInteger.prototype.mod = bnMod;\n    BigInteger.prototype.modPowInt = bnModPowInt;\n    // \"constants\"\n    BigInteger.ZERO = nbv(0);\n    BigInteger.ONE = nbv(1);\n    // Copyright (c) 2005-2009  Tom Wu\n    // All Rights Reserved.\n    // See \"LICENSE\" for details.\n    // Extended JavaScript BN functions, required for RSA private ops.\n    // Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n    // Version 1.2: square() API, isProbablePrime fix\n    // (public)\n    function bnClone() {\n        var r = nbi();\n        this.copyTo(r);\n        return r;\n    }\n    // (public) return value as integer\n    function bnIntValue() {\n        if (this.s < 0) {\n            if (this.t == 1) return this[0] - this.DV;\n            else if (this.t == 0) return -1;\n        } else if (this.t == 1) return this[0];\n        else if (this.t == 0) return 0;\n        // assumes 16 < DB < 32\n        return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];\n    }\n    // (public) return value as byte\n    function bnByteValue() {\n        return this.t == 0 ? this.s : this[0] << 24 >> 24;\n    }\n    // (public) return value as short (assumes DB>=16)\n    function bnShortValue() {\n        return this.t == 0 ? this.s : this[0] << 16 >> 16;\n    }\n    // (protected) return x s.t. r^x < DV\n    function bnpChunkSize(r) {\n        return Math.floor(Math.LN2 * this.DB / Math.log(r));\n    }\n    // (public) 0 if this == 0, 1 if this > 0\n    function bnSigNum() {\n        if (this.s < 0) return -1;\n        else if (this.t <= 0 || this.t == 1 && this[0] <= 0) return 0;\n        else return 1;\n    }\n    // (protected) convert to radix string\n    function bnpToRadix(b) {\n        if (b == null) b = 10;\n        if (this.signum() == 0 || b < 2 || b > 36) return \"0\";\n        var cs = this.chunkSize(b);\n        var a = Math.pow(b, cs);\n        var d = nbv(a), y = nbi(), z = nbi(), r = \"\";\n        this.divRemTo(d, y, z);\n        while(y.signum() > 0){\n            r = (a + z.intValue()).toString(b).substr(1) + r;\n            y.divRemTo(d, y, z);\n        }\n        return z.intValue().toString(b) + r;\n    }\n    // (protected) convert from radix string\n    function bnpFromRadix(s, b) {\n        this.fromInt(0);\n        if (b == null) b = 10;\n        var cs = this.chunkSize(b);\n        var d = Math.pow(b, cs), mi = false, j = 0, w = 0;\n        for(var i = 0; i < s.length; ++i){\n            var x = intAt(s, i);\n            if (x < 0) {\n                if (s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\n                continue;\n            }\n            w = b * w + x;\n            if (++j >= cs) {\n                this.dMultiply(d);\n                this.dAddOffset(w, 0);\n                j = 0;\n                w = 0;\n            }\n        }\n        if (j > 0) {\n            this.dMultiply(Math.pow(b, j));\n            this.dAddOffset(w, 0);\n        }\n        if (mi) BigInteger.ZERO.subTo(this, this);\n    }\n    // (protected) alternate constructor\n    function bnpFromNumber(a, b, c) {\n        if (\"number\" == typeof b) {\n            // new BigInteger(int,int,RNG)\n            if (a < 2) this.fromInt(1);\n            else {\n                this.fromNumber(a, c);\n                if (!this.testBit(a - 1)) this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n                if (this.isEven()) this.dAddOffset(1, 0); // force odd\n                while(!this.isProbablePrime(b)){\n                    this.dAddOffset(2, 0);\n                    if (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);\n                }\n            }\n        } else {\n            // new BigInteger(int,RNG)\n            var x = new Array(), t = a & 7;\n            x.length = (a >> 3) + 1;\n            b.nextBytes(x);\n            if (t > 0) x[0] &= (1 << t) - 1;\n            else x[0] = 0;\n            this.fromString(x, 256);\n        }\n    }\n    // (public) convert to bigendian byte array\n    function bnToByteArray() {\n        var i = this.t, r = new Array();\n        r[0] = this.s;\n        var p = this.DB - i * this.DB % 8, d, k = 0;\n        if (i-- > 0) {\n            if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p) r[k++] = d | this.s << this.DB - p;\n            while(i >= 0){\n                if (p < 8) {\n                    d = (this[i] & (1 << p) - 1) << 8 - p;\n                    d |= this[--i] >> (p += this.DB - 8);\n                } else {\n                    d = this[i] >> (p -= 8) & 0xff;\n                    if (p <= 0) {\n                        p += this.DB;\n                        --i;\n                    }\n                }\n                if ((d & 0x80) != 0) d |= -256;\n                if (k == 0 && (this.s & 0x80) != (d & 0x80)) ++k;\n                if (k > 0 || d != this.s) r[k++] = d;\n            }\n        }\n        return r;\n    }\n    function bnEquals(a) {\n        return this.compareTo(a) == 0;\n    }\n    function bnMin(a) {\n        return this.compareTo(a) < 0 ? this : a;\n    }\n    function bnMax(a) {\n        return this.compareTo(a) > 0 ? this : a;\n    }\n    // (protected) r = this op a (bitwise)\n    function bnpBitwiseTo(a, op, r) {\n        var i, f, m = Math.min(a.t, this.t);\n        for(i = 0; i < m; ++i)r[i] = op(this[i], a[i]);\n        if (a.t < this.t) {\n            f = a.s & this.DM;\n            for(i = m; i < this.t; ++i)r[i] = op(this[i], f);\n            r.t = this.t;\n        } else {\n            f = this.s & this.DM;\n            for(i = m; i < a.t; ++i)r[i] = op(f, a[i]);\n            r.t = a.t;\n        }\n        r.s = op(this.s, a.s);\n        r.clamp();\n    }\n    // (public) this & a\n    function op_and(x, y) {\n        return x & y;\n    }\n    function bnAnd(a) {\n        var r = nbi();\n        this.bitwiseTo(a, op_and, r);\n        return r;\n    }\n    // (public) this | a\n    function op_or(x, y) {\n        return x | y;\n    }\n    function bnOr(a) {\n        var r = nbi();\n        this.bitwiseTo(a, op_or, r);\n        return r;\n    }\n    // (public) this ^ a\n    function op_xor(x, y) {\n        return x ^ y;\n    }\n    function bnXor(a) {\n        var r = nbi();\n        this.bitwiseTo(a, op_xor, r);\n        return r;\n    }\n    // (public) this & ~a\n    function op_andnot(x, y) {\n        return x & ~y;\n    }\n    function bnAndNot(a) {\n        var r = nbi();\n        this.bitwiseTo(a, op_andnot, r);\n        return r;\n    }\n    // (public) ~this\n    function bnNot() {\n        var r = nbi();\n        for(var i = 0; i < this.t; ++i)r[i] = this.DM & ~this[i];\n        r.t = this.t;\n        r.s = ~this.s;\n        return r;\n    }\n    // (public) this << n\n    function bnShiftLeft(n) {\n        var r = nbi();\n        if (n < 0) this.rShiftTo(-n, r);\n        else this.lShiftTo(n, r);\n        return r;\n    }\n    // (public) this >> n\n    function bnShiftRight(n) {\n        var r = nbi();\n        if (n < 0) this.lShiftTo(-n, r);\n        else this.rShiftTo(n, r);\n        return r;\n    }\n    // return index of lowest 1-bit in x, x < 2^31\n    function lbit(x) {\n        if (x == 0) return -1;\n        var r = 0;\n        if ((x & 0xffff) == 0) {\n            x >>= 16;\n            r += 16;\n        }\n        if ((x & 0xff) == 0) {\n            x >>= 8;\n            r += 8;\n        }\n        if ((x & 0xf) == 0) {\n            x >>= 4;\n            r += 4;\n        }\n        if ((x & 3) == 0) {\n            x >>= 2;\n            r += 2;\n        }\n        if ((x & 1) == 0) ++r;\n        return r;\n    }\n    // (public) returns index of lowest 1-bit (or -1 if none)\n    function bnGetLowestSetBit() {\n        for(var i = 0; i < this.t; ++i)if (this[i] != 0) return i * this.DB + lbit(this[i]);\n        if (this.s < 0) return this.t * this.DB;\n        return -1;\n    }\n    // return number of 1 bits in x\n    function cbit(x) {\n        var r = 0;\n        while(x != 0){\n            x &= x - 1;\n            ++r;\n        }\n        return r;\n    }\n    // (public) return number of set bits\n    function bnBitCount() {\n        var r = 0, x = this.s & this.DM;\n        for(var i = 0; i < this.t; ++i)r += cbit(this[i] ^ x);\n        return r;\n    }\n    // (public) true iff nth bit is set\n    function bnTestBit(n) {\n        var j = Math.floor(n / this.DB);\n        if (j >= this.t) return this.s != 0;\n        return (this[j] & 1 << n % this.DB) != 0;\n    }\n    // (protected) this op (1<<n)\n    function bnpChangeBit(n, op) {\n        var r = BigInteger.ONE.shiftLeft(n);\n        this.bitwiseTo(r, op, r);\n        return r;\n    }\n    // (public) this | (1<<n)\n    function bnSetBit(n) {\n        return this.changeBit(n, op_or);\n    }\n    // (public) this & ~(1<<n)\n    function bnClearBit(n) {\n        return this.changeBit(n, op_andnot);\n    }\n    // (public) this ^ (1<<n)\n    function bnFlipBit(n) {\n        return this.changeBit(n, op_xor);\n    }\n    // (protected) r = this + a\n    function bnpAddTo(a, r) {\n        var i = 0, c = 0, m = Math.min(a.t, this.t);\n        while(i < m){\n            c += this[i] + a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        if (a.t < this.t) {\n            c += a.s;\n            while(i < this.t){\n                c += this[i];\n                r[i++] = c & this.DM;\n                c >>= this.DB;\n            }\n            c += this.s;\n        } else {\n            c += this.s;\n            while(i < a.t){\n                c += a[i];\n                r[i++] = c & this.DM;\n                c >>= this.DB;\n            }\n            c += a.s;\n        }\n        r.s = c < 0 ? -1 : 0;\n        if (c > 0) r[i++] = c;\n        else if (c < -1) r[i++] = this.DV + c;\n        r.t = i;\n        r.clamp();\n    }\n    // (public) this + a\n    function bnAdd(a) {\n        var r = nbi();\n        this.addTo(a, r);\n        return r;\n    }\n    // (public) this - a\n    function bnSubtract(a) {\n        var r = nbi();\n        this.subTo(a, r);\n        return r;\n    }\n    // (public) this * a\n    function bnMultiply(a) {\n        var r = nbi();\n        this.multiplyTo(a, r);\n        return r;\n    }\n    // (public) this^2\n    function bnSquare() {\n        var r = nbi();\n        this.squareTo(r);\n        return r;\n    }\n    // (public) this / a\n    function bnDivide(a) {\n        var r = nbi();\n        this.divRemTo(a, r, null);\n        return r;\n    }\n    // (public) this % a\n    function bnRemainder(a) {\n        var r = nbi();\n        this.divRemTo(a, null, r);\n        return r;\n    }\n    // (public) [this/a,this%a]\n    function bnDivideAndRemainder(a) {\n        var q = nbi(), r = nbi();\n        this.divRemTo(a, q, r);\n        return new Array(q, r);\n    }\n    // (protected) this *= n, this >= 0, 1 < n < DV\n    function bnpDMultiply(n) {\n        this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n        ++this.t;\n        this.clamp();\n    }\n    // (protected) this += n << w words, this >= 0\n    function bnpDAddOffset(n, w) {\n        if (n == 0) return;\n        while(this.t <= w)this[this.t++] = 0;\n        this[w] += n;\n        while(this[w] >= this.DV){\n            this[w] -= this.DV;\n            if (++w >= this.t) this[this.t++] = 0;\n            ++this[w];\n        }\n    }\n    // A \"null\" reducer\n    function NullExp() {}\n    function nNop(x) {\n        return x;\n    }\n    function nMulTo(x, y, r) {\n        x.multiplyTo(y, r);\n    }\n    function nSqrTo(x, r) {\n        x.squareTo(r);\n    }\n    NullExp.prototype.convert = nNop;\n    NullExp.prototype.revert = nNop;\n    NullExp.prototype.mulTo = nMulTo;\n    NullExp.prototype.sqrTo = nSqrTo;\n    // (public) this^e\n    function bnPow(e) {\n        return this.exp(e, new NullExp());\n    }\n    // (protected) r = lower n words of \"this * a\", a.t <= n\n    // \"this\" should be the larger one if appropriate.\n    function bnpMultiplyLowerTo(a, n, r) {\n        var i = Math.min(this.t + a.t, n);\n        r.s = 0; // assumes a,this >= 0\n        r.t = i;\n        while(i > 0)r[--i] = 0;\n        var j;\n        for(j = r.t - this.t; i < j; ++i)r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\n        for(j = Math.min(a.t, n); i < j; ++i)this.am(0, a[i], r, i, 0, n - i);\n        r.clamp();\n    }\n    // (protected) r = \"this * a\" without lower n words, n > 0\n    // \"this\" should be the larger one if appropriate.\n    function bnpMultiplyUpperTo(a, n, r) {\n        --n;\n        var i = r.t = this.t + a.t - n;\n        r.s = 0; // assumes a,this >= 0\n        while(--i >= 0)r[i] = 0;\n        for(i = Math.max(n - this.t, 0); i < a.t; ++i)r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\n        r.clamp();\n        r.drShiftTo(1, r);\n    }\n    // Barrett modular reduction\n    function Barrett(m) {\n        // setup Barrett\n        this.r2 = nbi();\n        this.q3 = nbi();\n        BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n        this.mu = this.r2.divide(m);\n        this.m = m;\n    }\n    function barrettConvert(x) {\n        if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);\n        else if (x.compareTo(this.m) < 0) return x;\n        else {\n            var r = nbi();\n            x.copyTo(r);\n            this.reduce(r);\n            return r;\n        }\n    }\n    function barrettRevert(x) {\n        return x;\n    }\n    // x = x mod m (HAC 14.42)\n    function barrettReduce(x) {\n        x.drShiftTo(this.m.t - 1, this.r2);\n        if (x.t > this.m.t + 1) {\n            x.t = this.m.t + 1;\n            x.clamp();\n        }\n        this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n        this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n        while(x.compareTo(this.r2) < 0)x.dAddOffset(1, this.m.t + 1);\n        x.subTo(this.r2, x);\n        while(x.compareTo(this.m) >= 0)x.subTo(this.m, x);\n    }\n    // r = x^2 mod m; x != r\n    function barrettSqrTo(x, r) {\n        x.squareTo(r);\n        this.reduce(r);\n    }\n    // r = x*y mod m; x,y != r\n    function barrettMulTo(x, y, r) {\n        x.multiplyTo(y, r);\n        this.reduce(r);\n    }\n    Barrett.prototype.convert = barrettConvert;\n    Barrett.prototype.revert = barrettRevert;\n    Barrett.prototype.reduce = barrettReduce;\n    Barrett.prototype.mulTo = barrettMulTo;\n    Barrett.prototype.sqrTo = barrettSqrTo;\n    // (public) this^e % m (HAC 14.85)\n    function bnModPow(e, m) {\n        var i = e.bitLength(), k, r = nbv(1), z;\n        if (i <= 0) return r;\n        else if (i < 18) k = 1;\n        else if (i < 48) k = 3;\n        else if (i < 144) k = 4;\n        else if (i < 768) k = 5;\n        else k = 6;\n        if (i < 8) z = new Classic(m);\n        else if (m.isEven()) z = new Barrett(m);\n        else z = new Montgomery(m);\n        // precomputation\n        var g = new Array(), n = 3, k1 = k - 1, km = (1 << k) - 1;\n        g[1] = z.convert(this);\n        if (k > 1) {\n            var g2 = nbi();\n            z.sqrTo(g[1], g2);\n            while(n <= km){\n                g[n] = nbi();\n                z.mulTo(g2, g[n - 2], g[n]);\n                n += 2;\n            }\n        }\n        var j = e.t - 1, w, is1 = true, r2 = nbi(), t;\n        i = nbits(e[j]) - 1;\n        while(j >= 0){\n            if (i >= k1) w = e[j] >> i - k1 & km;\n            else {\n                w = (e[j] & (1 << i + 1) - 1) << k1 - i;\n                if (j > 0) w |= e[j - 1] >> this.DB + i - k1;\n            }\n            n = k;\n            while((w & 1) == 0){\n                w >>= 1;\n                --n;\n            }\n            if ((i -= n) < 0) {\n                i += this.DB;\n                --j;\n            }\n            if (is1) {\n                g[w].copyTo(r);\n                is1 = false;\n            } else {\n                while(n > 1){\n                    z.sqrTo(r, r2);\n                    z.sqrTo(r2, r);\n                    n -= 2;\n                }\n                if (n > 0) z.sqrTo(r, r2);\n                else {\n                    t = r;\n                    r = r2;\n                    r2 = t;\n                }\n                z.mulTo(r2, g[w], r);\n            }\n            while(j >= 0 && (e[j] & 1 << i) == 0){\n                z.sqrTo(r, r2);\n                t = r;\n                r = r2;\n                r2 = t;\n                if (--i < 0) {\n                    i = this.DB - 1;\n                    --j;\n                }\n            }\n        }\n        return z.revert(r);\n    }\n    // (public) gcd(this,a) (HAC 14.54)\n    function bnGCD(a) {\n        var x = this.s < 0 ? this.negate() : this.clone();\n        var y = a.s < 0 ? a.negate() : a.clone();\n        if (x.compareTo(y) < 0) {\n            var t = x;\n            x = y;\n            y = t;\n        }\n        var i = x.getLowestSetBit(), g = y.getLowestSetBit();\n        if (g < 0) return x;\n        if (i < g) g = i;\n        if (g > 0) {\n            x.rShiftTo(g, x);\n            y.rShiftTo(g, y);\n        }\n        while(x.signum() > 0){\n            if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);\n            if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);\n            if (x.compareTo(y) >= 0) {\n                x.subTo(y, x);\n                x.rShiftTo(1, x);\n            } else {\n                y.subTo(x, y);\n                y.rShiftTo(1, y);\n            }\n        }\n        if (g > 0) y.lShiftTo(g, y);\n        return y;\n    }\n    // (protected) this % n, n < 2^26\n    function bnpModInt(n) {\n        if (n <= 0) return 0;\n        var d = this.DV % n, r = this.s < 0 ? n - 1 : 0;\n        if (this.t > 0) if (d == 0) r = this[0] % n;\n        else for(var i = this.t - 1; i >= 0; --i)r = (d * r + this[i]) % n;\n        return r;\n    }\n    // (public) 1/this % m (HAC 14.61)\n    function bnModInverse(m) {\n        var ac = m.isEven();\n        if (this.isEven() && ac || m.signum() == 0) return BigInteger.ZERO;\n        var u = m.clone(), v = this.clone();\n        var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);\n        while(u.signum() != 0){\n            while(u.isEven()){\n                u.rShiftTo(1, u);\n                if (ac) {\n                    if (!a.isEven() || !b.isEven()) {\n                        a.addTo(this, a);\n                        b.subTo(m, b);\n                    }\n                    a.rShiftTo(1, a);\n                } else if (!b.isEven()) b.subTo(m, b);\n                b.rShiftTo(1, b);\n            }\n            while(v.isEven()){\n                v.rShiftTo(1, v);\n                if (ac) {\n                    if (!c.isEven() || !d.isEven()) {\n                        c.addTo(this, c);\n                        d.subTo(m, d);\n                    }\n                    c.rShiftTo(1, c);\n                } else if (!d.isEven()) d.subTo(m, d);\n                d.rShiftTo(1, d);\n            }\n            if (u.compareTo(v) >= 0) {\n                u.subTo(v, u);\n                if (ac) a.subTo(c, a);\n                b.subTo(d, b);\n            } else {\n                v.subTo(u, v);\n                if (ac) c.subTo(a, c);\n                d.subTo(b, d);\n            }\n        }\n        if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n        if (d.compareTo(m) >= 0) return d.subtract(m);\n        if (d.signum() < 0) d.addTo(m, d);\n        else return d;\n        if (d.signum() < 0) return d.add(m);\n        else return d;\n    }\n    var lowprimes = [\n        2,\n        3,\n        5,\n        7,\n        11,\n        13,\n        17,\n        19,\n        23,\n        29,\n        31,\n        37,\n        41,\n        43,\n        47,\n        53,\n        59,\n        61,\n        67,\n        71,\n        73,\n        79,\n        83,\n        89,\n        97,\n        101,\n        103,\n        107,\n        109,\n        113,\n        127,\n        131,\n        137,\n        139,\n        149,\n        151,\n        157,\n        163,\n        167,\n        173,\n        179,\n        181,\n        191,\n        193,\n        197,\n        199,\n        211,\n        223,\n        227,\n        229,\n        233,\n        239,\n        241,\n        251,\n        257,\n        263,\n        269,\n        271,\n        277,\n        281,\n        283,\n        293,\n        307,\n        311,\n        313,\n        317,\n        331,\n        337,\n        347,\n        349,\n        353,\n        359,\n        367,\n        373,\n        379,\n        383,\n        389,\n        397,\n        401,\n        409,\n        419,\n        421,\n        431,\n        433,\n        439,\n        443,\n        449,\n        457,\n        461,\n        463,\n        467,\n        479,\n        487,\n        491,\n        499,\n        503,\n        509,\n        521,\n        523,\n        541,\n        547,\n        557,\n        563,\n        569,\n        571,\n        577,\n        587,\n        593,\n        599,\n        601,\n        607,\n        613,\n        617,\n        619,\n        631,\n        641,\n        643,\n        647,\n        653,\n        659,\n        661,\n        673,\n        677,\n        683,\n        691,\n        701,\n        709,\n        719,\n        727,\n        733,\n        739,\n        743,\n        751,\n        757,\n        761,\n        769,\n        773,\n        787,\n        797,\n        809,\n        811,\n        821,\n        823,\n        827,\n        829,\n        839,\n        853,\n        857,\n        859,\n        863,\n        877,\n        881,\n        883,\n        887,\n        907,\n        911,\n        919,\n        929,\n        937,\n        941,\n        947,\n        953,\n        967,\n        971,\n        977,\n        983,\n        991,\n        997\n    ];\n    var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];\n    // (public) test primality with certainty >= 1-.5^t\n    function bnIsProbablePrime(t) {\n        var i, x = this.abs();\n        if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {\n            for(i = 0; i < lowprimes.length; ++i)if (x[0] == lowprimes[i]) return true;\n            return false;\n        }\n        if (x.isEven()) return false;\n        i = 1;\n        while(i < lowprimes.length){\n            var m = lowprimes[i], j = i + 1;\n            while(j < lowprimes.length && m < lplim)m *= lowprimes[j++];\n            m = x.modInt(m);\n            while(i < j)if (m % lowprimes[i++] == 0) return false;\n        }\n        return x.millerRabin(t);\n    }\n    // (protected) true if probably prime (HAC 4.24, Miller-Rabin)\n    function bnpMillerRabin(t) {\n        var n1 = this.subtract(BigInteger.ONE);\n        var k = n1.getLowestSetBit();\n        if (k <= 0) return false;\n        var r = n1.shiftRight(k);\n        t = t + 1 >> 1;\n        if (t > lowprimes.length) t = lowprimes.length;\n        var a = nbi();\n        for(var i = 0; i < t; ++i){\n            //Pick bases at random, instead of starting at 2\n            a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);\n            var y = a.modPow(r, this);\n            if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n                var j = 1;\n                while(j++ < k && y.compareTo(n1) != 0){\n                    y = y.modPowInt(2, this);\n                    if (y.compareTo(BigInteger.ONE) == 0) return false;\n                }\n                if (y.compareTo(n1) != 0) return false;\n            }\n        }\n        return true;\n    }\n    // protected\n    BigInteger.prototype.chunkSize = bnpChunkSize;\n    BigInteger.prototype.toRadix = bnpToRadix;\n    BigInteger.prototype.fromRadix = bnpFromRadix;\n    BigInteger.prototype.fromNumber = bnpFromNumber;\n    BigInteger.prototype.bitwiseTo = bnpBitwiseTo;\n    BigInteger.prototype.changeBit = bnpChangeBit;\n    BigInteger.prototype.addTo = bnpAddTo;\n    BigInteger.prototype.dMultiply = bnpDMultiply;\n    BigInteger.prototype.dAddOffset = bnpDAddOffset;\n    BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\n    BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\n    BigInteger.prototype.modInt = bnpModInt;\n    BigInteger.prototype.millerRabin = bnpMillerRabin;\n    // public\n    BigInteger.prototype.clone = bnClone;\n    BigInteger.prototype.intValue = bnIntValue;\n    BigInteger.prototype.byteValue = bnByteValue;\n    BigInteger.prototype.shortValue = bnShortValue;\n    BigInteger.prototype.signum = bnSigNum;\n    BigInteger.prototype.toByteArray = bnToByteArray;\n    BigInteger.prototype.equals = bnEquals;\n    BigInteger.prototype.min = bnMin;\n    BigInteger.prototype.max = bnMax;\n    BigInteger.prototype.and = bnAnd;\n    BigInteger.prototype.or = bnOr;\n    BigInteger.prototype.xor = bnXor;\n    BigInteger.prototype.andNot = bnAndNot;\n    BigInteger.prototype.not = bnNot;\n    BigInteger.prototype.shiftLeft = bnShiftLeft;\n    BigInteger.prototype.shiftRight = bnShiftRight;\n    BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\n    BigInteger.prototype.bitCount = bnBitCount;\n    BigInteger.prototype.testBit = bnTestBit;\n    BigInteger.prototype.setBit = bnSetBit;\n    BigInteger.prototype.clearBit = bnClearBit;\n    BigInteger.prototype.flipBit = bnFlipBit;\n    BigInteger.prototype.add = bnAdd;\n    BigInteger.prototype.subtract = bnSubtract;\n    BigInteger.prototype.multiply = bnMultiply;\n    BigInteger.prototype.divide = bnDivide;\n    BigInteger.prototype.remainder = bnRemainder;\n    BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\n    BigInteger.prototype.modPow = bnModPow;\n    BigInteger.prototype.modInverse = bnModInverse;\n    BigInteger.prototype.pow = bnPow;\n    BigInteger.prototype.gcd = bnGCD;\n    BigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n    // JSBN-specific extension\n    BigInteger.prototype.square = bnSquare;\n    // Expose the Barrett function\n    BigInteger.prototype.Barrett = Barrett;\n    // BigInteger interfaces not implemented in jsbn:\n    // BigInteger(int signum, byte[] magnitude)\n    // double doubleValue()\n    // float floatValue()\n    // int hashCode()\n    // long longValue()\n    // static BigInteger valueOf(long val)\n    // Random number generator - requires a PRNG backend, e.g. prng4.js\n    // For best results, put code like\n    // <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>\n    // in your main HTML document.\n    var rng_state;\n    var rng_pool;\n    var rng_pptr;\n    // Mix in a 32-bit integer into the pool\n    function rng_seed_int(x) {\n        rng_pool[rng_pptr++] ^= x & 255;\n        rng_pool[rng_pptr++] ^= x >> 8 & 255;\n        rng_pool[rng_pptr++] ^= x >> 16 & 255;\n        rng_pool[rng_pptr++] ^= x >> 24 & 255;\n        if (rng_pptr >= rng_psize) rng_pptr -= rng_psize;\n    }\n    // Mix in the current time (w/milliseconds) into the pool\n    function rng_seed_time() {\n        rng_seed_int(new Date().getTime());\n    }\n    // Initialize the pool with junk if needed.\n    if (rng_pool == null) {\n        rng_pool = new Array();\n        rng_pptr = 0;\n        var t;\n        if (false) { var z, ua; }\n        while(rng_pptr < rng_psize){\n            t = Math.floor(65536 * Math.random());\n            rng_pool[rng_pptr++] = t >>> 8;\n            rng_pool[rng_pptr++] = t & 255;\n        }\n        rng_pptr = 0;\n        rng_seed_time();\n    //rng_seed_int(window.screenX);\n    //rng_seed_int(window.screenY);\n    }\n    function rng_get_byte() {\n        if (rng_state == null) {\n            rng_seed_time();\n            rng_state = prng_newstate();\n            rng_state.init(rng_pool);\n            for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)rng_pool[rng_pptr] = 0;\n            rng_pptr = 0;\n        //rng_pool = null;\n        }\n        // TODO: allow reseeding after first request\n        return rng_state.next();\n    }\n    function rng_get_bytes(ba) {\n        var i;\n        for(i = 0; i < ba.length; ++i)ba[i] = rng_get_byte();\n    }\n    function SecureRandom() {}\n    SecureRandom.prototype.nextBytes = rng_get_bytes;\n    // prng4.js - uses Arcfour as a PRNG\n    function Arcfour() {\n        this.i = 0;\n        this.j = 0;\n        this.S = new Array();\n    }\n    // Initialize arcfour context from key, an array of ints, each from [0..255]\n    function ARC4init(key) {\n        var i, j, t;\n        for(i = 0; i < 256; ++i)this.S[i] = i;\n        j = 0;\n        for(i = 0; i < 256; ++i){\n            j = j + this.S[i] + key[i % key.length] & 255;\n            t = this.S[i];\n            this.S[i] = this.S[j];\n            this.S[j] = t;\n        }\n        this.i = 0;\n        this.j = 0;\n    }\n    function ARC4next() {\n        var t;\n        this.i = this.i + 1 & 255;\n        this.j = this.j + this.S[this.i] & 255;\n        t = this.S[this.i];\n        this.S[this.i] = this.S[this.j];\n        this.S[this.j] = t;\n        return this.S[t + this.S[this.i] & 255];\n    }\n    Arcfour.prototype.init = ARC4init;\n    Arcfour.prototype.next = ARC4next;\n    // Plug in your RNG constructor here\n    function prng_newstate() {\n        return new Arcfour();\n    }\n    // Pool size must be a multiple of 4 and greater than 32.\n    // An array of bytes the size of the pool will be passed to init()\n    var rng_psize = 256;\n    BigInteger.SecureRandom = SecureRandom;\n    BigInteger.BigInteger = BigInteger;\n    if (true) {\n        exports = module.exports = BigInteger;\n    } else {}\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9qc2JuL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQztJQUVHLDZCQUE2QjtJQUM3Qix1QkFBdUI7SUFDdkIsNkJBQTZCO0lBRTdCLGtFQUFrRTtJQUVsRSxpQkFBaUI7SUFDakIsSUFBSUE7SUFFSiw2QkFBNkI7SUFDN0IsSUFBSUMsU0FBUztJQUNiLElBQUlDLE9BQVEsQ0FBQ0QsU0FBTyxRQUFPLEtBQUk7SUFFL0IsdUJBQXVCO0lBQ3ZCLFNBQVNFLFdBQVdDLENBQUMsRUFBQ0MsQ0FBQyxFQUFDQyxDQUFDO1FBQ3ZCLElBQUdGLEtBQUssTUFDTixJQUFHLFlBQVksT0FBT0EsR0FBRyxJQUFJLENBQUNHLFVBQVUsQ0FBQ0gsR0FBRUMsR0FBRUM7YUFDeEMsSUFBR0QsS0FBSyxRQUFRLFlBQVksT0FBT0QsR0FBRyxJQUFJLENBQUNJLFVBQVUsQ0FBQ0osR0FBRTthQUN4RCxJQUFJLENBQUNJLFVBQVUsQ0FBQ0osR0FBRUM7SUFDM0I7SUFFQSwrQkFBK0I7SUFDL0IsU0FBU0k7UUFBUSxPQUFPLElBQUlOLFdBQVc7SUFBTztJQUU5QyxvREFBb0Q7SUFDcEQsMkNBQTJDO0lBQzNDLDhDQUE4QztJQUM5QyxvRUFBb0U7SUFFcEUsMERBQTBEO0lBQzFELHNDQUFzQztJQUN0QyxvREFBb0Q7SUFDcEQsU0FBU08sSUFBSUMsQ0FBQyxFQUFDQyxDQUFDLEVBQUNDLENBQUMsRUFBQ0MsQ0FBQyxFQUFDUixDQUFDLEVBQUNTLENBQUM7UUFDdEIsTUFBTSxFQUFFQSxLQUFLLEVBQUc7WUFDZCxJQUFJQyxJQUFJSixJQUFFLElBQUksQ0FBQ0QsSUFBSSxHQUFDRSxDQUFDLENBQUNDLEVBQUUsR0FBQ1I7WUFDekJBLElBQUlXLEtBQUtDLEtBQUssQ0FBQ0YsSUFBRTtZQUNqQkgsQ0FBQyxDQUFDQyxJQUFJLEdBQUdFLElBQUU7UUFDYjtRQUNBLE9BQU9WO0lBQ1Q7SUFDQSxnREFBZ0Q7SUFDaEQsMkRBQTJEO0lBQzNE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QUl6UDtRQUNKLElBQUksQ0FBQ3hDLENBQUMsR0FBRyxJQUFLLENBQUNBLENBQUMsR0FBRyxJQUFLO1FBQ3hCLElBQUksQ0FBQ0csQ0FBQyxHQUFHLElBQUssQ0FBQ0EsQ0FBQyxHQUFHLElBQUksQ0FBQzJSLENBQUMsQ0FBQyxJQUFJLENBQUM5UixDQUFDLENBQUMsR0FBSTtRQUNyQ3dDLElBQUksSUFBSSxDQUFDc1AsQ0FBQyxDQUFDLElBQUksQ0FBQzlSLENBQUMsQ0FBQztRQUNsQixJQUFJLENBQUM4UixDQUFDLENBQUMsSUFBSSxDQUFDOVIsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDOFIsQ0FBQyxDQUFDLElBQUksQ0FBQzNSLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMyUixDQUFDLENBQUMsSUFBSSxDQUFDM1IsQ0FBQyxDQUFDLEdBQUdxQztRQUNqQixPQUFPLElBQUksQ0FBQ3NQLENBQUMsQ0FBQyxJQUFLLElBQUksQ0FBQ0EsQ0FBQyxDQUFDLElBQUksQ0FBQzlSLENBQUMsQ0FBQyxHQUFJLElBQUk7SUFDM0M7SUFFQTZSLFFBQVEzUSxTQUFTLENBQUNzUSxJQUFJLEdBQUdPO0lBQ3pCRixRQUFRM1EsU0FBUyxDQUFDdVEsSUFBSSxHQUFHUTtJQUV6QixvQ0FBb0M7SUFDcEMsU0FBU1Y7UUFDUCxPQUFPLElBQUlNO0lBQ2I7SUFFQSx5REFBeUQ7SUFDekQsa0VBQWtFO0lBQ2xFLElBQUlqQixZQUFZO0lBRWZwUixXQUFXb1MsWUFBWSxHQUFHQTtJQUMxQnBTLFdBQVdBLFVBQVUsR0FBR0E7SUFDeEIsSUFBSSxJQUFtQixFQUFhO1FBQ2xDMFMsVUFBVUMsT0FBT0QsT0FBTyxHQUFHMVM7SUFDN0IsT0FBTyxFQUdOO0FBRUgsR0FBRzRTLElBQUksQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2lubm92YXRpb24tY29hY2gvLi9ub2RlX21vZHVsZXMvanNibi9pbmRleC5qcz8yYzQwIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe1xuXG4gICAgLy8gQ29weXJpZ2h0IChjKSAyMDA1ICBUb20gV3VcbiAgICAvLyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICAgIC8vIFNlZSBcIkxJQ0VOU0VcIiBmb3IgZGV0YWlscy5cblxuICAgIC8vIEJhc2ljIEphdmFTY3JpcHQgQk4gbGlicmFyeSAtIHN1YnNldCB1c2VmdWwgZm9yIFJTQSBlbmNyeXB0aW9uLlxuXG4gICAgLy8gQml0cyBwZXIgZGlnaXRcbiAgICB2YXIgZGJpdHM7XG5cbiAgICAvLyBKYXZhU2NyaXB0IGVuZ2luZSBhbmFseXNpc1xuICAgIHZhciBjYW5hcnkgPSAweGRlYWRiZWVmY2FmZTtcbiAgICB2YXIgal9sbSA9ICgoY2FuYXJ5JjB4ZmZmZmZmKT09MHhlZmNhZmUpO1xuXG4gICAgLy8gKHB1YmxpYykgQ29uc3RydWN0b3JcbiAgICBmdW5jdGlvbiBCaWdJbnRlZ2VyKGEsYixjKSB7XG4gICAgICBpZihhICE9IG51bGwpXG4gICAgICAgIGlmKFwibnVtYmVyXCIgPT0gdHlwZW9mIGEpIHRoaXMuZnJvbU51bWJlcihhLGIsYyk7XG4gICAgICAgIGVsc2UgaWYoYiA9PSBudWxsICYmIFwic3RyaW5nXCIgIT0gdHlwZW9mIGEpIHRoaXMuZnJvbVN0cmluZyhhLDI1Nik7XG4gICAgICAgIGVsc2UgdGhpcy5mcm9tU3RyaW5nKGEsYik7XG4gICAgfVxuXG4gICAgLy8gcmV0dXJuIG5ldywgdW5zZXQgQmlnSW50ZWdlclxuICAgIGZ1bmN0aW9uIG5iaSgpIHsgcmV0dXJuIG5ldyBCaWdJbnRlZ2VyKG51bGwpOyB9XG5cbiAgICAvLyBhbTogQ29tcHV0ZSB3X2ogKz0gKHgqdGhpc19pKSwgcHJvcGFnYXRlIGNhcnJpZXMsXG4gICAgLy8gYyBpcyBpbml0aWFsIGNhcnJ5LCByZXR1cm5zIGZpbmFsIGNhcnJ5LlxuICAgIC8vIGMgPCAzKmR2YWx1ZSwgeCA8IDIqZHZhbHVlLCB0aGlzX2kgPCBkdmFsdWVcbiAgICAvLyBXZSBuZWVkIHRvIHNlbGVjdCB0aGUgZmFzdGVzdCBvbmUgdGhhdCB3b3JrcyBpbiB0aGlzIGVudmlyb25tZW50LlxuXG4gICAgLy8gYW0xOiB1c2UgYSBzaW5nbGUgbXVsdCBhbmQgZGl2aWRlIHRvIGdldCB0aGUgaGlnaCBiaXRzLFxuICAgIC8vIG1heCBkaWdpdCBiaXRzIHNob3VsZCBiZSAyNiBiZWNhdXNlXG4gICAgLy8gbWF4IGludGVybmFsIHZhbHVlID0gMipkdmFsdWVeMi0yKmR2YWx1ZSAoPCAyXjUzKVxuICAgIGZ1bmN0aW9uIGFtMShpLHgsdyxqLGMsbikge1xuICAgICAgd2hpbGUoLS1uID49IDApIHtcbiAgICAgICAgdmFyIHYgPSB4KnRoaXNbaSsrXSt3W2pdK2M7XG4gICAgICAgIGMgPSBNYXRoLmZsb29yKHYvMHg0MDAwMDAwKTtcbiAgICAgICAgd1tqKytdID0gdiYweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICByZXR1cm4gYztcbiAgICB9XG4gICAgLy8gYW0yIGF2b2lkcyBhIGJpZyBtdWx0LWFuZC1leHRyYWN0IGNvbXBsZXRlbHkuXG4gICAgLy8gTWF4IGRpZ2l0IGJpdHMgc2hvdWxkIGJlIDw9IDMwIGJlY2F1c2Ugd2UgZG8gYml0d2lzZSBvcHNcbiAgICAvLyBvbiB2YWx1ZXMgdXAgdG8gMipoZHZhbHVlXjItaGR2YWx1ZS0xICg8IDJeMzEpXG4gICAgZnVuY3Rpb24gYW0yKGkseCx3LGosYyxuKSB7XG4gICAgICB2YXIgeGwgPSB4JjB4N2ZmZiwgeGggPSB4Pj4xNTtcbiAgICAgIHdoaWxlKC0tbiA+PSAwKSB7XG4gICAgICAgIHZhciBsID0gdGhpc1tpXSYweDdmZmY7XG4gICAgICAgIHZhciBoID0gdGhpc1tpKytdPj4xNTtcbiAgICAgICAgdmFyIG0gPSB4aCpsK2gqeGw7XG4gICAgICAgIGwgPSB4bCpsKygobSYweDdmZmYpPDwxNSkrd1tqXSsoYyYweDNmZmZmZmZmKTtcbiAgICAgICAgYyA9IChsPj4+MzApKyhtPj4+MTUpK3hoKmgrKGM+Pj4zMCk7XG4gICAgICAgIHdbaisrXSA9IGwmMHgzZmZmZmZmZjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjO1xuICAgIH1cbiAgICAvLyBBbHRlcm5hdGVseSwgc2V0IG1heCBkaWdpdCBiaXRzIHRvIDI4IHNpbmNlIHNvbWVcbiAgICAvLyBicm93c2VycyBzbG93IGRvd24gd2hlbiBkZWFsaW5nIHdpdGggMzItYml0IG51bWJlcnMuXG4gICAgZnVuY3Rpb24gYW0zKGkseCx3LGosYyxuKSB7XG4gICAgICB2YXIgeGwgPSB4JjB4M2ZmZiwgeGggPSB4Pj4xNDtcbiAgICAgIHdoaWxlKC0tbiA+PSAwKSB7XG4gICAgICAgIHZhciBsID0gdGhpc1tpXSYweDNmZmY7XG4gICAgICAgIHZhciBoID0gdGhpc1tpKytdPj4xNDtcbiAgICAgICAgdmFyIG0gPSB4aCpsK2gqeGw7XG4gICAgICAgIGwgPSB4bCpsKygobSYweDNmZmYpPDwxNCkrd1tqXStjO1xuICAgICAgICBjID0gKGw+PjI4KSsobT4+MTQpK3hoKmg7XG4gICAgICAgIHdbaisrXSA9IGwmMHhmZmZmZmZmO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGM7XG4gICAgfVxuICAgIHZhciBpbkJyb3dzZXIgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSBcInVuZGVmaW5lZFwiO1xuICAgIGlmKGluQnJvd3NlciAmJiBqX2xtICYmIChuYXZpZ2F0b3IuYXBwTmFtZSA9PSBcIk1pY3Jvc29mdCBJbnRlcm5ldCBFeHBsb3JlclwiKSkge1xuICAgICAgQmlnSW50ZWdlci5wcm90b3R5cGUuYW0gPSBhbTI7XG4gICAgICBkYml0cyA9IDMwO1xuICAgIH1cbiAgICBlbHNlIGlmKGluQnJvd3NlciAmJiBqX2xtICYmIChuYXZpZ2F0b3IuYXBwTmFtZSAhPSBcIk5ldHNjYXBlXCIpKSB7XG4gICAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5hbSA9IGFtMTtcbiAgICAgIGRiaXRzID0gMjY7XG4gICAgfVxuICAgIGVsc2UgeyAvLyBNb3ppbGxhL05ldHNjYXBlIHNlZW1zIHRvIHByZWZlciBhbTNcbiAgICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmFtID0gYW0zO1xuICAgICAgZGJpdHMgPSAyODtcbiAgICB9XG5cbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5EQiA9IGRiaXRzO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLkRNID0gKCgxPDxkYml0cyktMSk7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuRFYgPSAoMTw8ZGJpdHMpO1xuXG4gICAgdmFyIEJJX0ZQID0gNTI7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuRlYgPSBNYXRoLnBvdygyLEJJX0ZQKTtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5GMSA9IEJJX0ZQLWRiaXRzO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLkYyID0gMipkYml0cy1CSV9GUDtcblxuICAgIC8vIERpZ2l0IGNvbnZlcnNpb25zXG4gICAgdmFyIEJJX1JNID0gXCIwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcIjtcbiAgICB2YXIgQklfUkMgPSBuZXcgQXJyYXkoKTtcbiAgICB2YXIgcnIsdnY7XG4gICAgcnIgPSBcIjBcIi5jaGFyQ29kZUF0KDApO1xuICAgIGZvcih2diA9IDA7IHZ2IDw9IDk7ICsrdnYpIEJJX1JDW3JyKytdID0gdnY7XG4gICAgcnIgPSBcImFcIi5jaGFyQ29kZUF0KDApO1xuICAgIGZvcih2diA9IDEwOyB2diA8IDM2OyArK3Z2KSBCSV9SQ1tycisrXSA9IHZ2O1xuICAgIHJyID0gXCJBXCIuY2hhckNvZGVBdCgwKTtcbiAgICBmb3IodnYgPSAxMDsgdnYgPCAzNjsgKyt2dikgQklfUkNbcnIrK10gPSB2djtcblxuICAgIGZ1bmN0aW9uIGludDJjaGFyKG4pIHsgcmV0dXJuIEJJX1JNLmNoYXJBdChuKTsgfVxuICAgIGZ1bmN0aW9uIGludEF0KHMsaSkge1xuICAgICAgdmFyIGMgPSBCSV9SQ1tzLmNoYXJDb2RlQXQoaSldO1xuICAgICAgcmV0dXJuIChjPT1udWxsKT8tMTpjO1xuICAgIH1cblxuICAgIC8vIChwcm90ZWN0ZWQpIGNvcHkgdGhpcyB0byByXG4gICAgZnVuY3Rpb24gYm5wQ29weVRvKHIpIHtcbiAgICAgIGZvcih2YXIgaSA9IHRoaXMudC0xOyBpID49IDA7IC0taSkgcltpXSA9IHRoaXNbaV07XG4gICAgICByLnQgPSB0aGlzLnQ7XG4gICAgICByLnMgPSB0aGlzLnM7XG4gICAgfVxuXG4gICAgLy8gKHByb3RlY3RlZCkgc2V0IGZyb20gaW50ZWdlciB2YWx1ZSB4LCAtRFYgPD0geCA8IERWXG4gICAgZnVuY3Rpb24gYm5wRnJvbUludCh4KSB7XG4gICAgICB0aGlzLnQgPSAxO1xuICAgICAgdGhpcy5zID0gKHg8MCk/LTE6MDtcbiAgICAgIGlmKHggPiAwKSB0aGlzWzBdID0geDtcbiAgICAgIGVsc2UgaWYoeCA8IC0xKSB0aGlzWzBdID0geCt0aGlzLkRWO1xuICAgICAgZWxzZSB0aGlzLnQgPSAwO1xuICAgIH1cblxuICAgIC8vIHJldHVybiBiaWdpbnQgaW5pdGlhbGl6ZWQgdG8gdmFsdWVcbiAgICBmdW5jdGlvbiBuYnYoaSkgeyB2YXIgciA9IG5iaSgpOyByLmZyb21JbnQoaSk7IHJldHVybiByOyB9XG5cbiAgICAvLyAocHJvdGVjdGVkKSBzZXQgZnJvbSBzdHJpbmcgYW5kIHJhZGl4XG4gICAgZnVuY3Rpb24gYm5wRnJvbVN0cmluZyhzLGIpIHtcbiAgICAgIHZhciBrO1xuICAgICAgaWYoYiA9PSAxNikgayA9IDQ7XG4gICAgICBlbHNlIGlmKGIgPT0gOCkgayA9IDM7XG4gICAgICBlbHNlIGlmKGIgPT0gMjU2KSBrID0gODsgLy8gYnl0ZSBhcnJheVxuICAgICAgZWxzZSBpZihiID09IDIpIGsgPSAxO1xuICAgICAgZWxzZSBpZihiID09IDMyKSBrID0gNTtcbiAgICAgIGVsc2UgaWYoYiA9PSA0KSBrID0gMjtcbiAgICAgIGVsc2UgeyB0aGlzLmZyb21SYWRpeChzLGIpOyByZXR1cm47IH1cbiAgICAgIHRoaXMudCA9IDA7XG4gICAgICB0aGlzLnMgPSAwO1xuICAgICAgdmFyIGkgPSBzLmxlbmd0aCwgbWkgPSBmYWxzZSwgc2ggPSAwO1xuICAgICAgd2hpbGUoLS1pID49IDApIHtcbiAgICAgICAgdmFyIHggPSAoaz09OCk/c1tpXSYweGZmOmludEF0KHMsaSk7XG4gICAgICAgIGlmKHggPCAwKSB7XG4gICAgICAgICAgaWYocy5jaGFyQXQoaSkgPT0gXCItXCIpIG1pID0gdHJ1ZTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBtaSA9IGZhbHNlO1xuICAgICAgICBpZihzaCA9PSAwKVxuICAgICAgICAgIHRoaXNbdGhpcy50KytdID0geDtcbiAgICAgICAgZWxzZSBpZihzaCtrID4gdGhpcy5EQikge1xuICAgICAgICAgIHRoaXNbdGhpcy50LTFdIHw9ICh4JigoMTw8KHRoaXMuREItc2gpKS0xKSk8PHNoO1xuICAgICAgICAgIHRoaXNbdGhpcy50KytdID0gKHg+Pih0aGlzLkRCLXNoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgIHRoaXNbdGhpcy50LTFdIHw9IHg8PHNoO1xuICAgICAgICBzaCArPSBrO1xuICAgICAgICBpZihzaCA+PSB0aGlzLkRCKSBzaCAtPSB0aGlzLkRCO1xuICAgICAgfVxuICAgICAgaWYoayA9PSA4ICYmIChzWzBdJjB4ODApICE9IDApIHtcbiAgICAgICAgdGhpcy5zID0gLTE7XG4gICAgICAgIGlmKHNoID4gMCkgdGhpc1t0aGlzLnQtMV0gfD0gKCgxPDwodGhpcy5EQi1zaCkpLTEpPDxzaDtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2xhbXAoKTtcbiAgICAgIGlmKG1pKSBCaWdJbnRlZ2VyLlpFUk8uc3ViVG8odGhpcyx0aGlzKTtcbiAgICB9XG5cbiAgICAvLyAocHJvdGVjdGVkKSBjbGFtcCBvZmYgZXhjZXNzIGhpZ2ggd29yZHNcbiAgICBmdW5jdGlvbiBibnBDbGFtcCgpIHtcbiAgICAgIHZhciBjID0gdGhpcy5zJnRoaXMuRE07XG4gICAgICB3aGlsZSh0aGlzLnQgPiAwICYmIHRoaXNbdGhpcy50LTFdID09IGMpIC0tdGhpcy50O1xuICAgIH1cblxuICAgIC8vIChwdWJsaWMpIHJldHVybiBzdHJpbmcgcmVwcmVzZW50YXRpb24gaW4gZ2l2ZW4gcmFkaXhcbiAgICBmdW5jdGlvbiBiblRvU3RyaW5nKGIpIHtcbiAgICAgIGlmKHRoaXMucyA8IDApIHJldHVybiBcIi1cIit0aGlzLm5lZ2F0ZSgpLnRvU3RyaW5nKGIpO1xuICAgICAgdmFyIGs7XG4gICAgICBpZihiID09IDE2KSBrID0gNDtcbiAgICAgIGVsc2UgaWYoYiA9PSA4KSBrID0gMztcbiAgICAgIGVsc2UgaWYoYiA9PSAyKSBrID0gMTtcbiAgICAgIGVsc2UgaWYoYiA9PSAzMikgayA9IDU7XG4gICAgICBlbHNlIGlmKGIgPT0gNCkgayA9IDI7XG4gICAgICBlbHNlIHJldHVybiB0aGlzLnRvUmFkaXgoYik7XG4gICAgICB2YXIga20gPSAoMTw8ayktMSwgZCwgbSA9IGZhbHNlLCByID0gXCJcIiwgaSA9IHRoaXMudDtcbiAgICAgIHZhciBwID0gdGhpcy5EQi0oaSp0aGlzLkRCKSVrO1xuICAgICAgaWYoaS0tID4gMCkge1xuICAgICAgICBpZihwIDwgdGhpcy5EQiAmJiAoZCA9IHRoaXNbaV0+PnApID4gMCkgeyBtID0gdHJ1ZTsgciA9IGludDJjaGFyKGQpOyB9XG4gICAgICAgIHdoaWxlKGkgPj0gMCkge1xuICAgICAgICAgIGlmKHAgPCBrKSB7XG4gICAgICAgICAgICBkID0gKHRoaXNbaV0mKCgxPDxwKS0xKSk8PChrLXApO1xuICAgICAgICAgICAgZCB8PSB0aGlzWy0taV0+PihwKz10aGlzLkRCLWspO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGQgPSAodGhpc1tpXT4+KHAtPWspKSZrbTtcbiAgICAgICAgICAgIGlmKHAgPD0gMCkgeyBwICs9IHRoaXMuREI7IC0taTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZihkID4gMCkgbSA9IHRydWU7XG4gICAgICAgICAgaWYobSkgciArPSBpbnQyY2hhcihkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG0/cjpcIjBcIjtcbiAgICB9XG5cbiAgICAvLyAocHVibGljKSAtdGhpc1xuICAgIGZ1bmN0aW9uIGJuTmVnYXRlKCkgeyB2YXIgciA9IG5iaSgpOyBCaWdJbnRlZ2VyLlpFUk8uc3ViVG8odGhpcyxyKTsgcmV0dXJuIHI7IH1cblxuICAgIC8vIChwdWJsaWMpIHx0aGlzfFxuICAgIGZ1bmN0aW9uIGJuQWJzKCkgeyByZXR1cm4gKHRoaXMuczwwKT90aGlzLm5lZ2F0ZSgpOnRoaXM7IH1cblxuICAgIC8vIChwdWJsaWMpIHJldHVybiArIGlmIHRoaXMgPiBhLCAtIGlmIHRoaXMgPCBhLCAwIGlmIGVxdWFsXG4gICAgZnVuY3Rpb24gYm5Db21wYXJlVG8oYSkge1xuICAgICAgdmFyIHIgPSB0aGlzLnMtYS5zO1xuICAgICAgaWYociAhPSAwKSByZXR1cm4gcjtcbiAgICAgIHZhciBpID0gdGhpcy50O1xuICAgICAgciA9IGktYS50O1xuICAgICAgaWYociAhPSAwKSByZXR1cm4gKHRoaXMuczwwKT8tcjpyO1xuICAgICAgd2hpbGUoLS1pID49IDApIGlmKChyPXRoaXNbaV0tYVtpXSkgIT0gMCkgcmV0dXJuIHI7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvLyByZXR1cm5zIGJpdCBsZW5ndGggb2YgdGhlIGludGVnZXIgeFxuICAgIGZ1bmN0aW9uIG5iaXRzKHgpIHtcbiAgICAgIHZhciByID0gMSwgdDtcbiAgICAgIGlmKCh0PXg+Pj4xNikgIT0gMCkgeyB4ID0gdDsgciArPSAxNjsgfVxuICAgICAgaWYoKHQ9eD4+OCkgIT0gMCkgeyB4ID0gdDsgciArPSA4OyB9XG4gICAgICBpZigodD14Pj40KSAhPSAwKSB7IHggPSB0OyByICs9IDQ7IH1cbiAgICAgIGlmKCh0PXg+PjIpICE9IDApIHsgeCA9IHQ7IHIgKz0gMjsgfVxuICAgICAgaWYoKHQ9eD4+MSkgIT0gMCkgeyB4ID0gdDsgciArPSAxOyB9XG4gICAgICByZXR1cm4gcjtcbiAgICB9XG5cbiAgICAvLyAocHVibGljKSByZXR1cm4gdGhlIG51bWJlciBvZiBiaXRzIGluIFwidGhpc1wiXG4gICAgZnVuY3Rpb24gYm5CaXRMZW5ndGgoKSB7XG4gICAgICBpZih0aGlzLnQgPD0gMCkgcmV0dXJuIDA7XG4gICAgICByZXR1cm4gdGhpcy5EQioodGhpcy50LTEpK25iaXRzKHRoaXNbdGhpcy50LTFdXih0aGlzLnMmdGhpcy5ETSkpO1xuICAgIH1cblxuICAgIC8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzIDw8IG4qREJcbiAgICBmdW5jdGlvbiBibnBETFNoaWZ0VG8obixyKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIGZvcihpID0gdGhpcy50LTE7IGkgPj0gMDsgLS1pKSByW2krbl0gPSB0aGlzW2ldO1xuICAgICAgZm9yKGkgPSBuLTE7IGkgPj0gMDsgLS1pKSByW2ldID0gMDtcbiAgICAgIHIudCA9IHRoaXMudCtuO1xuICAgICAgci5zID0gdGhpcy5zO1xuICAgIH1cblxuICAgIC8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzID4+IG4qREJcbiAgICBmdW5jdGlvbiBibnBEUlNoaWZ0VG8obixyKSB7XG4gICAgICBmb3IodmFyIGkgPSBuOyBpIDwgdGhpcy50OyArK2kpIHJbaS1uXSA9IHRoaXNbaV07XG4gICAgICByLnQgPSBNYXRoLm1heCh0aGlzLnQtbiwwKTtcbiAgICAgIHIucyA9IHRoaXMucztcbiAgICB9XG5cbiAgICAvLyAocHJvdGVjdGVkKSByID0gdGhpcyA8PCBuXG4gICAgZnVuY3Rpb24gYm5wTFNoaWZ0VG8obixyKSB7XG4gICAgICB2YXIgYnMgPSBuJXRoaXMuREI7XG4gICAgICB2YXIgY2JzID0gdGhpcy5EQi1icztcbiAgICAgIHZhciBibSA9ICgxPDxjYnMpLTE7XG4gICAgICB2YXIgZHMgPSBNYXRoLmZsb29yKG4vdGhpcy5EQiksIGMgPSAodGhpcy5zPDxicykmdGhpcy5ETSwgaTtcbiAgICAgIGZvcihpID0gdGhpcy50LTE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHJbaStkcysxXSA9ICh0aGlzW2ldPj5jYnMpfGM7XG4gICAgICAgIGMgPSAodGhpc1tpXSZibSk8PGJzO1xuICAgICAgfVxuICAgICAgZm9yKGkgPSBkcy0xOyBpID49IDA7IC0taSkgcltpXSA9IDA7XG4gICAgICByW2RzXSA9IGM7XG4gICAgICByLnQgPSB0aGlzLnQrZHMrMTtcbiAgICAgIHIucyA9IHRoaXMucztcbiAgICAgIHIuY2xhbXAoKTtcbiAgICB9XG5cbiAgICAvLyAocHJvdGVjdGVkKSByID0gdGhpcyA+PiBuXG4gICAgZnVuY3Rpb24gYm5wUlNoaWZ0VG8obixyKSB7XG4gICAgICByLnMgPSB0aGlzLnM7XG4gICAgICB2YXIgZHMgPSBNYXRoLmZsb29yKG4vdGhpcy5EQik7XG4gICAgICBpZihkcyA+PSB0aGlzLnQpIHsgci50ID0gMDsgcmV0dXJuOyB9XG4gICAgICB2YXIgYnMgPSBuJXRoaXMuREI7XG4gICAgICB2YXIgY2JzID0gdGhpcy5EQi1icztcbiAgICAgIHZhciBibSA9ICgxPDxicyktMTtcbiAgICAgIHJbMF0gPSB0aGlzW2RzXT4+YnM7XG4gICAgICBmb3IodmFyIGkgPSBkcysxOyBpIDwgdGhpcy50OyArK2kpIHtcbiAgICAgICAgcltpLWRzLTFdIHw9ICh0aGlzW2ldJmJtKTw8Y2JzO1xuICAgICAgICByW2ktZHNdID0gdGhpc1tpXT4+YnM7XG4gICAgICB9XG4gICAgICBpZihicyA+IDApIHJbdGhpcy50LWRzLTFdIHw9ICh0aGlzLnMmYm0pPDxjYnM7XG4gICAgICByLnQgPSB0aGlzLnQtZHM7XG4gICAgICByLmNsYW1wKCk7XG4gICAgfVxuXG4gICAgLy8gKHByb3RlY3RlZCkgciA9IHRoaXMgLSBhXG4gICAgZnVuY3Rpb24gYm5wU3ViVG8oYSxyKSB7XG4gICAgICB2YXIgaSA9IDAsIGMgPSAwLCBtID0gTWF0aC5taW4oYS50LHRoaXMudCk7XG4gICAgICB3aGlsZShpIDwgbSkge1xuICAgICAgICBjICs9IHRoaXNbaV0tYVtpXTtcbiAgICAgICAgcltpKytdID0gYyZ0aGlzLkRNO1xuICAgICAgICBjID4+PSB0aGlzLkRCO1xuICAgICAgfVxuICAgICAgaWYoYS50IDwgdGhpcy50KSB7XG4gICAgICAgIGMgLT0gYS5zO1xuICAgICAgICB3aGlsZShpIDwgdGhpcy50KSB7XG4gICAgICAgICAgYyArPSB0aGlzW2ldO1xuICAgICAgICAgIHJbaSsrXSA9IGMmdGhpcy5ETTtcbiAgICAgICAgICBjID4+PSB0aGlzLkRCO1xuICAgICAgICB9XG4gICAgICAgIGMgKz0gdGhpcy5zO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGMgKz0gdGhpcy5zO1xuICAgICAgICB3aGlsZShpIDwgYS50KSB7XG4gICAgICAgICAgYyAtPSBhW2ldO1xuICAgICAgICAgIHJbaSsrXSA9IGMmdGhpcy5ETTtcbiAgICAgICAgICBjID4+PSB0aGlzLkRCO1xuICAgICAgICB9XG4gICAgICAgIGMgLT0gYS5zO1xuICAgICAgfVxuICAgICAgci5zID0gKGM8MCk/LTE6MDtcbiAgICAgIGlmKGMgPCAtMSkgcltpKytdID0gdGhpcy5EVitjO1xuICAgICAgZWxzZSBpZihjID4gMCkgcltpKytdID0gYztcbiAgICAgIHIudCA9IGk7XG4gICAgICByLmNsYW1wKCk7XG4gICAgfVxuXG4gICAgLy8gKHByb3RlY3RlZCkgciA9IHRoaXMgKiBhLCByICE9IHRoaXMsYSAoSEFDIDE0LjEyKVxuICAgIC8vIFwidGhpc1wiIHNob3VsZCBiZSB0aGUgbGFyZ2VyIG9uZSBpZiBhcHByb3ByaWF0ZS5cbiAgICBmdW5jdGlvbiBibnBNdWx0aXBseVRvKGEscikge1xuICAgICAgdmFyIHggPSB0aGlzLmFicygpLCB5ID0gYS5hYnMoKTtcbiAgICAgIHZhciBpID0geC50O1xuICAgICAgci50ID0gaSt5LnQ7XG4gICAgICB3aGlsZSgtLWkgPj0gMCkgcltpXSA9IDA7XG4gICAgICBmb3IoaSA9IDA7IGkgPCB5LnQ7ICsraSkgcltpK3gudF0gPSB4LmFtKDAseVtpXSxyLGksMCx4LnQpO1xuICAgICAgci5zID0gMDtcbiAgICAgIHIuY2xhbXAoKTtcbiAgICAgIGlmKHRoaXMucyAhPSBhLnMpIEJpZ0ludGVnZXIuWkVSTy5zdWJUbyhyLHIpO1xuICAgIH1cblxuICAgIC8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzXjIsIHIgIT0gdGhpcyAoSEFDIDE0LjE2KVxuICAgIGZ1bmN0aW9uIGJucFNxdWFyZVRvKHIpIHtcbiAgICAgIHZhciB4ID0gdGhpcy5hYnMoKTtcbiAgICAgIHZhciBpID0gci50ID0gMip4LnQ7XG4gICAgICB3aGlsZSgtLWkgPj0gMCkgcltpXSA9IDA7XG4gICAgICBmb3IoaSA9IDA7IGkgPCB4LnQtMTsgKytpKSB7XG4gICAgICAgIHZhciBjID0geC5hbShpLHhbaV0sciwyKmksMCwxKTtcbiAgICAgICAgaWYoKHJbaSt4LnRdKz14LmFtKGkrMSwyKnhbaV0sciwyKmkrMSxjLHgudC1pLTEpKSA+PSB4LkRWKSB7XG4gICAgICAgICAgcltpK3gudF0gLT0geC5EVjtcbiAgICAgICAgICByW2kreC50KzFdID0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYoci50ID4gMCkgcltyLnQtMV0gKz0geC5hbShpLHhbaV0sciwyKmksMCwxKTtcbiAgICAgIHIucyA9IDA7XG4gICAgICByLmNsYW1wKCk7XG4gICAgfVxuXG4gICAgLy8gKHByb3RlY3RlZCkgZGl2aWRlIHRoaXMgYnkgbSwgcXVvdGllbnQgYW5kIHJlbWFpbmRlciB0byBxLCByIChIQUMgMTQuMjApXG4gICAgLy8gciAhPSBxLCB0aGlzICE9IG0uICBxIG9yIHIgbWF5IGJlIG51bGwuXG4gICAgZnVuY3Rpb24gYm5wRGl2UmVtVG8obSxxLHIpIHtcbiAgICAgIHZhciBwbSA9IG0uYWJzKCk7XG4gICAgICBpZihwbS50IDw9IDApIHJldHVybjtcbiAgICAgIHZhciBwdCA9IHRoaXMuYWJzKCk7XG4gICAgICBpZihwdC50IDwgcG0udCkge1xuICAgICAgICBpZihxICE9IG51bGwpIHEuZnJvbUludCgwKTtcbiAgICAgICAgaWYociAhPSBudWxsKSB0aGlzLmNvcHlUbyhyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYociA9PSBudWxsKSByID0gbmJpKCk7XG4gICAgICB2YXIgeSA9IG5iaSgpLCB0cyA9IHRoaXMucywgbXMgPSBtLnM7XG4gICAgICB2YXIgbnNoID0gdGhpcy5EQi1uYml0cyhwbVtwbS50LTFdKTsgICAvLyBub3JtYWxpemUgbW9kdWx1c1xuICAgICAgaWYobnNoID4gMCkgeyBwbS5sU2hpZnRUbyhuc2gseSk7IHB0LmxTaGlmdFRvKG5zaCxyKTsgfVxuICAgICAgZWxzZSB7IHBtLmNvcHlUbyh5KTsgcHQuY29weVRvKHIpOyB9XG4gICAgICB2YXIgeXMgPSB5LnQ7XG4gICAgICB2YXIgeTAgPSB5W3lzLTFdO1xuICAgICAgaWYoeTAgPT0gMCkgcmV0dXJuO1xuICAgICAgdmFyIHl0ID0geTAqKDE8PHRoaXMuRjEpKygoeXM+MSk/eVt5cy0yXT4+dGhpcy5GMjowKTtcbiAgICAgIHZhciBkMSA9IHRoaXMuRlYveXQsIGQyID0gKDE8PHRoaXMuRjEpL3l0LCBlID0gMTw8dGhpcy5GMjtcbiAgICAgIHZhciBpID0gci50LCBqID0gaS15cywgdCA9IChxPT1udWxsKT9uYmkoKTpxO1xuICAgICAgeS5kbFNoaWZ0VG8oaix0KTtcbiAgICAgIGlmKHIuY29tcGFyZVRvKHQpID49IDApIHtcbiAgICAgICAgcltyLnQrK10gPSAxO1xuICAgICAgICByLnN1YlRvKHQscik7XG4gICAgICB9XG4gICAgICBCaWdJbnRlZ2VyLk9ORS5kbFNoaWZ0VG8oeXMsdCk7XG4gICAgICB0LnN1YlRvKHkseSk7ICAvLyBcIm5lZ2F0aXZlXCIgeSBzbyB3ZSBjYW4gcmVwbGFjZSBzdWIgd2l0aCBhbSBsYXRlclxuICAgICAgd2hpbGUoeS50IDwgeXMpIHlbeS50KytdID0gMDtcbiAgICAgIHdoaWxlKC0taiA+PSAwKSB7XG4gICAgICAgIC8vIEVzdGltYXRlIHF1b3RpZW50IGRpZ2l0XG4gICAgICAgIHZhciBxZCA9IChyWy0taV09PXkwKT90aGlzLkRNOk1hdGguZmxvb3IocltpXSpkMSsocltpLTFdK2UpKmQyKTtcbiAgICAgICAgaWYoKHJbaV0rPXkuYW0oMCxxZCxyLGosMCx5cykpIDwgcWQpIHsgICAvLyBUcnkgaXQgb3V0XG4gICAgICAgICAgeS5kbFNoaWZ0VG8oaix0KTtcbiAgICAgICAgICByLnN1YlRvKHQscik7XG4gICAgICAgICAgd2hpbGUocltpXSA8IC0tcWQpIHIuc3ViVG8odCxyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYocSAhPSBudWxsKSB7XG4gICAgICAgIHIuZHJTaGlmdFRvKHlzLHEpO1xuICAgICAgICBpZih0cyAhPSBtcykgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHEscSk7XG4gICAgICB9XG4gICAgICByLnQgPSB5cztcbiAgICAgIHIuY2xhbXAoKTtcbiAgICAgIGlmKG5zaCA+IDApIHIuclNoaWZ0VG8obnNoLHIpOyAvLyBEZW5vcm1hbGl6ZSByZW1haW5kZXJcbiAgICAgIGlmKHRzIDwgMCkgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHIscik7XG4gICAgfVxuXG4gICAgLy8gKHB1YmxpYykgdGhpcyBtb2QgYVxuICAgIGZ1bmN0aW9uIGJuTW9kKGEpIHtcbiAgICAgIHZhciByID0gbmJpKCk7XG4gICAgICB0aGlzLmFicygpLmRpdlJlbVRvKGEsbnVsbCxyKTtcbiAgICAgIGlmKHRoaXMucyA8IDAgJiYgci5jb21wYXJlVG8oQmlnSW50ZWdlci5aRVJPKSA+IDApIGEuc3ViVG8ocixyKTtcbiAgICAgIHJldHVybiByO1xuICAgIH1cblxuICAgIC8vIE1vZHVsYXIgcmVkdWN0aW9uIHVzaW5nIFwiY2xhc3NpY1wiIGFsZ29yaXRobVxuICAgIGZ1bmN0aW9uIENsYXNzaWMobSkgeyB0aGlzLm0gPSBtOyB9XG4gICAgZnVuY3Rpb24gY0NvbnZlcnQoeCkge1xuICAgICAgaWYoeC5zIDwgMCB8fCB4LmNvbXBhcmVUbyh0aGlzLm0pID49IDApIHJldHVybiB4Lm1vZCh0aGlzLm0pO1xuICAgICAgZWxzZSByZXR1cm4geDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY1JldmVydCh4KSB7IHJldHVybiB4OyB9XG4gICAgZnVuY3Rpb24gY1JlZHVjZSh4KSB7IHguZGl2UmVtVG8odGhpcy5tLG51bGwseCk7IH1cbiAgICBmdW5jdGlvbiBjTXVsVG8oeCx5LHIpIHsgeC5tdWx0aXBseVRvKHkscik7IHRoaXMucmVkdWNlKHIpOyB9XG4gICAgZnVuY3Rpb24gY1NxclRvKHgscikgeyB4LnNxdWFyZVRvKHIpOyB0aGlzLnJlZHVjZShyKTsgfVxuXG4gICAgQ2xhc3NpYy5wcm90b3R5cGUuY29udmVydCA9IGNDb252ZXJ0O1xuICAgIENsYXNzaWMucHJvdG90eXBlLnJldmVydCA9IGNSZXZlcnQ7XG4gICAgQ2xhc3NpYy5wcm90b3R5cGUucmVkdWNlID0gY1JlZHVjZTtcbiAgICBDbGFzc2ljLnByb3RvdHlwZS5tdWxUbyA9IGNNdWxUbztcbiAgICBDbGFzc2ljLnByb3RvdHlwZS5zcXJUbyA9IGNTcXJUbztcblxuICAgIC8vIChwcm90ZWN0ZWQpIHJldHVybiBcIi0xL3RoaXMgJSAyXkRCXCI7IHVzZWZ1bCBmb3IgTW9udC4gcmVkdWN0aW9uXG4gICAgLy8ganVzdGlmaWNhdGlvbjpcbiAgICAvLyAgICAgICAgIHh5ID09IDEgKG1vZCBtKVxuICAgIC8vICAgICAgICAgeHkgPSAgMStrbVxuICAgIC8vICAgeHkoMi14eSkgPSAoMStrbSkoMS1rbSlcbiAgICAvLyB4W3koMi14eSldID0gMS1rXjJtXjJcbiAgICAvLyB4W3koMi14eSldID09IDEgKG1vZCBtXjIpXG4gICAgLy8gaWYgeSBpcyAxL3ggbW9kIG0sIHRoZW4geSgyLXh5KSBpcyAxL3ggbW9kIG1eMlxuICAgIC8vIHNob3VsZCByZWR1Y2UgeCBhbmQgeSgyLXh5KSBieSBtXjIgYXQgZWFjaCBzdGVwIHRvIGtlZXAgc2l6ZSBib3VuZGVkLlxuICAgIC8vIEpTIG11bHRpcGx5IFwib3ZlcmZsb3dzXCIgZGlmZmVyZW50bHkgZnJvbSBDL0MrKywgc28gY2FyZSBpcyBuZWVkZWQgaGVyZS5cbiAgICBmdW5jdGlvbiBibnBJbnZEaWdpdCgpIHtcbiAgICAgIGlmKHRoaXMudCA8IDEpIHJldHVybiAwO1xuICAgICAgdmFyIHggPSB0aGlzWzBdO1xuICAgICAgaWYoKHgmMSkgPT0gMCkgcmV0dXJuIDA7XG4gICAgICB2YXIgeSA9IHgmMzsgICAgICAgLy8geSA9PSAxL3ggbW9kIDJeMlxuICAgICAgeSA9ICh5KigyLSh4JjB4ZikqeSkpJjB4ZjsgLy8geSA9PSAxL3ggbW9kIDJeNFxuICAgICAgeSA9ICh5KigyLSh4JjB4ZmYpKnkpKSYweGZmOyAgIC8vIHkgPT0gMS94IG1vZCAyXjhcbiAgICAgIHkgPSAoeSooMi0oKCh4JjB4ZmZmZikqeSkmMHhmZmZmKSkpJjB4ZmZmZjsgICAgLy8geSA9PSAxL3ggbW9kIDJeMTZcbiAgICAgIC8vIGxhc3Qgc3RlcCAtIGNhbGN1bGF0ZSBpbnZlcnNlIG1vZCBEViBkaXJlY3RseTtcbiAgICAgIC8vIGFzc3VtZXMgMTYgPCBEQiA8PSAzMiBhbmQgYXNzdW1lcyBhYmlsaXR5IHRvIGhhbmRsZSA0OC1iaXQgaW50c1xuICAgICAgeSA9ICh5KigyLXgqeSV0aGlzLkRWKSkldGhpcy5EVjsgICAgICAgLy8geSA9PSAxL3ggbW9kIDJeZGJpdHNcbiAgICAgIC8vIHdlIHJlYWxseSB3YW50IHRoZSBuZWdhdGl2ZSBpbnZlcnNlLCBhbmQgLURWIDwgeSA8IERWXG4gICAgICByZXR1cm4gKHk+MCk/dGhpcy5EVi15Oi15O1xuICAgIH1cblxuICAgIC8vIE1vbnRnb21lcnkgcmVkdWN0aW9uXG4gICAgZnVuY3Rpb24gTW9udGdvbWVyeShtKSB7XG4gICAgICB0aGlzLm0gPSBtO1xuICAgICAgdGhpcy5tcCA9IG0uaW52RGlnaXQoKTtcbiAgICAgIHRoaXMubXBsID0gdGhpcy5tcCYweDdmZmY7XG4gICAgICB0aGlzLm1waCA9IHRoaXMubXA+PjE1O1xuICAgICAgdGhpcy51bSA9ICgxPDwobS5EQi0xNSkpLTE7XG4gICAgICB0aGlzLm10MiA9IDIqbS50O1xuICAgIH1cblxuICAgIC8vIHhSIG1vZCBtXG4gICAgZnVuY3Rpb24gbW9udENvbnZlcnQoeCkge1xuICAgICAgdmFyIHIgPSBuYmkoKTtcbiAgICAgIHguYWJzKCkuZGxTaGlmdFRvKHRoaXMubS50LHIpO1xuICAgICAgci5kaXZSZW1Ubyh0aGlzLm0sbnVsbCxyKTtcbiAgICAgIGlmKHgucyA8IDAgJiYgci5jb21wYXJlVG8oQmlnSW50ZWdlci5aRVJPKSA+IDApIHRoaXMubS5zdWJUbyhyLHIpO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfVxuXG4gICAgLy8geC9SIG1vZCBtXG4gICAgZnVuY3Rpb24gbW9udFJldmVydCh4KSB7XG4gICAgICB2YXIgciA9IG5iaSgpO1xuICAgICAgeC5jb3B5VG8ocik7XG4gICAgICB0aGlzLnJlZHVjZShyKTtcbiAgICAgIHJldHVybiByO1xuICAgIH1cblxuICAgIC8vIHggPSB4L1IgbW9kIG0gKEhBQyAxNC4zMilcbiAgICBmdW5jdGlvbiBtb250UmVkdWNlKHgpIHtcbiAgICAgIHdoaWxlKHgudCA8PSB0aGlzLm10MikgLy8gcGFkIHggc28gYW0gaGFzIGVub3VnaCByb29tIGxhdGVyXG4gICAgICAgIHhbeC50KytdID0gMDtcbiAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLm0udDsgKytpKSB7XG4gICAgICAgIC8vIGZhc3RlciB3YXkgb2YgY2FsY3VsYXRpbmcgdTAgPSB4W2ldKm1wIG1vZCBEVlxuICAgICAgICB2YXIgaiA9IHhbaV0mMHg3ZmZmO1xuICAgICAgICB2YXIgdTAgPSAoaip0aGlzLm1wbCsoKChqKnRoaXMubXBoKyh4W2ldPj4xNSkqdGhpcy5tcGwpJnRoaXMudW0pPDwxNSkpJnguRE07XG4gICAgICAgIC8vIHVzZSBhbSB0byBjb21iaW5lIHRoZSBtdWx0aXBseS1zaGlmdC1hZGQgaW50byBvbmUgY2FsbFxuICAgICAgICBqID0gaSt0aGlzLm0udDtcbiAgICAgICAgeFtqXSArPSB0aGlzLm0uYW0oMCx1MCx4LGksMCx0aGlzLm0udCk7XG4gICAgICAgIC8vIHByb3BhZ2F0ZSBjYXJyeVxuICAgICAgICB3aGlsZSh4W2pdID49IHguRFYpIHsgeFtqXSAtPSB4LkRWOyB4Wysral0rKzsgfVxuICAgICAgfVxuICAgICAgeC5jbGFtcCgpO1xuICAgICAgeC5kclNoaWZ0VG8odGhpcy5tLnQseCk7XG4gICAgICBpZih4LmNvbXBhcmVUbyh0aGlzLm0pID49IDApIHguc3ViVG8odGhpcy5tLHgpO1xuICAgIH1cblxuICAgIC8vIHIgPSBcInheMi9SIG1vZCBtXCI7IHggIT0gclxuICAgIGZ1bmN0aW9uIG1vbnRTcXJUbyh4LHIpIHsgeC5zcXVhcmVUbyhyKTsgdGhpcy5yZWR1Y2Uocik7IH1cblxuICAgIC8vIHIgPSBcInh5L1IgbW9kIG1cIjsgeCx5ICE9IHJcbiAgICBmdW5jdGlvbiBtb250TXVsVG8oeCx5LHIpIHsgeC5tdWx0aXBseVRvKHkscik7IHRoaXMucmVkdWNlKHIpOyB9XG5cbiAgICBNb250Z29tZXJ5LnByb3RvdHlwZS5jb252ZXJ0ID0gbW9udENvbnZlcnQ7XG4gICAgTW9udGdvbWVyeS5wcm90b3R5cGUucmV2ZXJ0ID0gbW9udFJldmVydDtcbiAgICBNb250Z29tZXJ5LnByb3RvdHlwZS5yZWR1Y2UgPSBtb250UmVkdWNlO1xuICAgIE1vbnRnb21lcnkucHJvdG90eXBlLm11bFRvID0gbW9udE11bFRvO1xuICAgIE1vbnRnb21lcnkucHJvdG90eXBlLnNxclRvID0gbW9udFNxclRvO1xuXG4gICAgLy8gKHByb3RlY3RlZCkgdHJ1ZSBpZmYgdGhpcyBpcyBldmVuXG4gICAgZnVuY3Rpb24gYm5wSXNFdmVuKCkgeyByZXR1cm4gKCh0aGlzLnQ+MCk/KHRoaXNbMF0mMSk6dGhpcy5zKSA9PSAwOyB9XG5cbiAgICAvLyAocHJvdGVjdGVkKSB0aGlzXmUsIGUgPCAyXjMyLCBkb2luZyBzcXIgYW5kIG11bCB3aXRoIFwiclwiIChIQUMgMTQuNzkpXG4gICAgZnVuY3Rpb24gYm5wRXhwKGUseikge1xuICAgICAgaWYoZSA+IDB4ZmZmZmZmZmYgfHwgZSA8IDEpIHJldHVybiBCaWdJbnRlZ2VyLk9ORTtcbiAgICAgIHZhciByID0gbmJpKCksIHIyID0gbmJpKCksIGcgPSB6LmNvbnZlcnQodGhpcyksIGkgPSBuYml0cyhlKS0xO1xuICAgICAgZy5jb3B5VG8ocik7XG4gICAgICB3aGlsZSgtLWkgPj0gMCkge1xuICAgICAgICB6LnNxclRvKHIscjIpO1xuICAgICAgICBpZigoZSYoMTw8aSkpID4gMCkgei5tdWxUbyhyMixnLHIpO1xuICAgICAgICBlbHNlIHsgdmFyIHQgPSByOyByID0gcjI7IHIyID0gdDsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHoucmV2ZXJ0KHIpO1xuICAgIH1cblxuICAgIC8vIChwdWJsaWMpIHRoaXNeZSAlIG0sIDAgPD0gZSA8IDJeMzJcbiAgICBmdW5jdGlvbiBibk1vZFBvd0ludChlLG0pIHtcbiAgICAgIHZhciB6O1xuICAgICAgaWYoZSA8IDI1NiB8fCBtLmlzRXZlbigpKSB6ID0gbmV3IENsYXNzaWMobSk7IGVsc2UgeiA9IG5ldyBNb250Z29tZXJ5KG0pO1xuICAgICAgcmV0dXJuIHRoaXMuZXhwKGUseik7XG4gICAgfVxuXG4gICAgLy8gcHJvdGVjdGVkXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuY29weVRvID0gYm5wQ29weVRvO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmZyb21JbnQgPSBibnBGcm9tSW50O1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmZyb21TdHJpbmcgPSBibnBGcm9tU3RyaW5nO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmNsYW1wID0gYm5wQ2xhbXA7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuZGxTaGlmdFRvID0gYm5wRExTaGlmdFRvO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmRyU2hpZnRUbyA9IGJucERSU2hpZnRUbztcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5sU2hpZnRUbyA9IGJucExTaGlmdFRvO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnJTaGlmdFRvID0gYm5wUlNoaWZ0VG87XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuc3ViVG8gPSBibnBTdWJUbztcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tdWx0aXBseVRvID0gYm5wTXVsdGlwbHlUbztcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5zcXVhcmVUbyA9IGJucFNxdWFyZVRvO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmRpdlJlbVRvID0gYm5wRGl2UmVtVG87XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuaW52RGlnaXQgPSBibnBJbnZEaWdpdDtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5pc0V2ZW4gPSBibnBJc0V2ZW47XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuZXhwID0gYm5wRXhwO1xuXG4gICAgLy8gcHVibGljXG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUudG9TdHJpbmcgPSBiblRvU3RyaW5nO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm5lZ2F0ZSA9IGJuTmVnYXRlO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmFicyA9IGJuQWJzO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmNvbXBhcmVUbyA9IGJuQ29tcGFyZVRvO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmJpdExlbmd0aCA9IGJuQml0TGVuZ3RoO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm1vZCA9IGJuTW9kO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm1vZFBvd0ludCA9IGJuTW9kUG93SW50O1xuXG4gICAgLy8gXCJjb25zdGFudHNcIlxuICAgIEJpZ0ludGVnZXIuWkVSTyA9IG5idigwKTtcbiAgICBCaWdJbnRlZ2VyLk9ORSA9IG5idigxKTtcblxuICAgIC8vIENvcHlyaWdodCAoYykgMjAwNS0yMDA5ICBUb20gV3VcbiAgICAvLyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICAgIC8vIFNlZSBcIkxJQ0VOU0VcIiBmb3IgZGV0YWlscy5cblxuICAgIC8vIEV4dGVuZGVkIEphdmFTY3JpcHQgQk4gZnVuY3Rpb25zLCByZXF1aXJlZCBmb3IgUlNBIHByaXZhdGUgb3BzLlxuXG4gICAgLy8gVmVyc2lvbiAxLjE6IG5ldyBCaWdJbnRlZ2VyKFwiMFwiLCAxMCkgcmV0dXJucyBcInByb3BlclwiIHplcm9cbiAgICAvLyBWZXJzaW9uIDEuMjogc3F1YXJlKCkgQVBJLCBpc1Byb2JhYmxlUHJpbWUgZml4XG5cbiAgICAvLyAocHVibGljKVxuICAgIGZ1bmN0aW9uIGJuQ2xvbmUoKSB7IHZhciByID0gbmJpKCk7IHRoaXMuY29weVRvKHIpOyByZXR1cm4gcjsgfVxuXG4gICAgLy8gKHB1YmxpYykgcmV0dXJuIHZhbHVlIGFzIGludGVnZXJcbiAgICBmdW5jdGlvbiBibkludFZhbHVlKCkge1xuICAgICAgaWYodGhpcy5zIDwgMCkge1xuICAgICAgICBpZih0aGlzLnQgPT0gMSkgcmV0dXJuIHRoaXNbMF0tdGhpcy5EVjtcbiAgICAgICAgZWxzZSBpZih0aGlzLnQgPT0gMCkgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgZWxzZSBpZih0aGlzLnQgPT0gMSkgcmV0dXJuIHRoaXNbMF07XG4gICAgICBlbHNlIGlmKHRoaXMudCA9PSAwKSByZXR1cm4gMDtcbiAgICAgIC8vIGFzc3VtZXMgMTYgPCBEQiA8IDMyXG4gICAgICByZXR1cm4gKCh0aGlzWzFdJigoMTw8KDMyLXRoaXMuREIpKS0xKSk8PHRoaXMuREIpfHRoaXNbMF07XG4gICAgfVxuXG4gICAgLy8gKHB1YmxpYykgcmV0dXJuIHZhbHVlIGFzIGJ5dGVcbiAgICBmdW5jdGlvbiBibkJ5dGVWYWx1ZSgpIHsgcmV0dXJuICh0aGlzLnQ9PTApP3RoaXMuczoodGhpc1swXTw8MjQpPj4yNDsgfVxuXG4gICAgLy8gKHB1YmxpYykgcmV0dXJuIHZhbHVlIGFzIHNob3J0IChhc3N1bWVzIERCPj0xNilcbiAgICBmdW5jdGlvbiBiblNob3J0VmFsdWUoKSB7IHJldHVybiAodGhpcy50PT0wKT90aGlzLnM6KHRoaXNbMF08PDE2KT4+MTY7IH1cblxuICAgIC8vIChwcm90ZWN0ZWQpIHJldHVybiB4IHMudC4gcl54IDwgRFZcbiAgICBmdW5jdGlvbiBibnBDaHVua1NpemUocikgeyByZXR1cm4gTWF0aC5mbG9vcihNYXRoLkxOMip0aGlzLkRCL01hdGgubG9nKHIpKTsgfVxuXG4gICAgLy8gKHB1YmxpYykgMCBpZiB0aGlzID09IDAsIDEgaWYgdGhpcyA+IDBcbiAgICBmdW5jdGlvbiBiblNpZ051bSgpIHtcbiAgICAgIGlmKHRoaXMucyA8IDApIHJldHVybiAtMTtcbiAgICAgIGVsc2UgaWYodGhpcy50IDw9IDAgfHwgKHRoaXMudCA9PSAxICYmIHRoaXNbMF0gPD0gMCkpIHJldHVybiAwO1xuICAgICAgZWxzZSByZXR1cm4gMTtcbiAgICB9XG5cbiAgICAvLyAocHJvdGVjdGVkKSBjb252ZXJ0IHRvIHJhZGl4IHN0cmluZ1xuICAgIGZ1bmN0aW9uIGJucFRvUmFkaXgoYikge1xuICAgICAgaWYoYiA9PSBudWxsKSBiID0gMTA7XG4gICAgICBpZih0aGlzLnNpZ251bSgpID09IDAgfHwgYiA8IDIgfHwgYiA+IDM2KSByZXR1cm4gXCIwXCI7XG4gICAgICB2YXIgY3MgPSB0aGlzLmNodW5rU2l6ZShiKTtcbiAgICAgIHZhciBhID0gTWF0aC5wb3coYixjcyk7XG4gICAgICB2YXIgZCA9IG5idihhKSwgeSA9IG5iaSgpLCB6ID0gbmJpKCksIHIgPSBcIlwiO1xuICAgICAgdGhpcy5kaXZSZW1UbyhkLHkseik7XG4gICAgICB3aGlsZSh5LnNpZ251bSgpID4gMCkge1xuICAgICAgICByID0gKGErei5pbnRWYWx1ZSgpKS50b1N0cmluZyhiKS5zdWJzdHIoMSkgKyByO1xuICAgICAgICB5LmRpdlJlbVRvKGQseSx6KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB6LmludFZhbHVlKCkudG9TdHJpbmcoYikgKyByO1xuICAgIH1cblxuICAgIC8vIChwcm90ZWN0ZWQpIGNvbnZlcnQgZnJvbSByYWRpeCBzdHJpbmdcbiAgICBmdW5jdGlvbiBibnBGcm9tUmFkaXgocyxiKSB7XG4gICAgICB0aGlzLmZyb21JbnQoMCk7XG4gICAgICBpZihiID09IG51bGwpIGIgPSAxMDtcbiAgICAgIHZhciBjcyA9IHRoaXMuY2h1bmtTaXplKGIpO1xuICAgICAgdmFyIGQgPSBNYXRoLnBvdyhiLGNzKSwgbWkgPSBmYWxzZSwgaiA9IDAsIHcgPSAwO1xuICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIHggPSBpbnRBdChzLGkpO1xuICAgICAgICBpZih4IDwgMCkge1xuICAgICAgICAgIGlmKHMuY2hhckF0KGkpID09IFwiLVwiICYmIHRoaXMuc2lnbnVtKCkgPT0gMCkgbWkgPSB0cnVlO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHcgPSBiKncreDtcbiAgICAgICAgaWYoKytqID49IGNzKSB7XG4gICAgICAgICAgdGhpcy5kTXVsdGlwbHkoZCk7XG4gICAgICAgICAgdGhpcy5kQWRkT2Zmc2V0KHcsMCk7XG4gICAgICAgICAgaiA9IDA7XG4gICAgICAgICAgdyA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmKGogPiAwKSB7XG4gICAgICAgIHRoaXMuZE11bHRpcGx5KE1hdGgucG93KGIsaikpO1xuICAgICAgICB0aGlzLmRBZGRPZmZzZXQodywwKTtcbiAgICAgIH1cbiAgICAgIGlmKG1pKSBCaWdJbnRlZ2VyLlpFUk8uc3ViVG8odGhpcyx0aGlzKTtcbiAgICB9XG5cbiAgICAvLyAocHJvdGVjdGVkKSBhbHRlcm5hdGUgY29uc3RydWN0b3JcbiAgICBmdW5jdGlvbiBibnBGcm9tTnVtYmVyKGEsYixjKSB7XG4gICAgICBpZihcIm51bWJlclwiID09IHR5cGVvZiBiKSB7XG4gICAgICAgIC8vIG5ldyBCaWdJbnRlZ2VyKGludCxpbnQsUk5HKVxuICAgICAgICBpZihhIDwgMikgdGhpcy5mcm9tSW50KDEpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB0aGlzLmZyb21OdW1iZXIoYSxjKTtcbiAgICAgICAgICBpZighdGhpcy50ZXN0Qml0KGEtMSkpXHQvLyBmb3JjZSBNU0Igc2V0XG4gICAgICAgICAgICB0aGlzLmJpdHdpc2VUbyhCaWdJbnRlZ2VyLk9ORS5zaGlmdExlZnQoYS0xKSxvcF9vcix0aGlzKTtcbiAgICAgICAgICBpZih0aGlzLmlzRXZlbigpKSB0aGlzLmRBZGRPZmZzZXQoMSwwKTsgLy8gZm9yY2Ugb2RkXG4gICAgICAgICAgd2hpbGUoIXRoaXMuaXNQcm9iYWJsZVByaW1lKGIpKSB7XG4gICAgICAgICAgICB0aGlzLmRBZGRPZmZzZXQoMiwwKTtcbiAgICAgICAgICAgIGlmKHRoaXMuYml0TGVuZ3RoKCkgPiBhKSB0aGlzLnN1YlRvKEJpZ0ludGVnZXIuT05FLnNoaWZ0TGVmdChhLTEpLHRoaXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIC8vIG5ldyBCaWdJbnRlZ2VyKGludCxSTkcpXG4gICAgICAgIHZhciB4ID0gbmV3IEFycmF5KCksIHQgPSBhJjc7XG4gICAgICAgIHgubGVuZ3RoID0gKGE+PjMpKzE7XG4gICAgICAgIGIubmV4dEJ5dGVzKHgpO1xuICAgICAgICBpZih0ID4gMCkgeFswXSAmPSAoKDE8PHQpLTEpOyBlbHNlIHhbMF0gPSAwO1xuICAgICAgICB0aGlzLmZyb21TdHJpbmcoeCwyNTYpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIChwdWJsaWMpIGNvbnZlcnQgdG8gYmlnZW5kaWFuIGJ5dGUgYXJyYXlcbiAgICBmdW5jdGlvbiBiblRvQnl0ZUFycmF5KCkge1xuICAgICAgdmFyIGkgPSB0aGlzLnQsIHIgPSBuZXcgQXJyYXkoKTtcbiAgICAgIHJbMF0gPSB0aGlzLnM7XG4gICAgICB2YXIgcCA9IHRoaXMuREItKGkqdGhpcy5EQiklOCwgZCwgayA9IDA7XG4gICAgICBpZihpLS0gPiAwKSB7XG4gICAgICAgIGlmKHAgPCB0aGlzLkRCICYmIChkID0gdGhpc1tpXT4+cCkgIT0gKHRoaXMucyZ0aGlzLkRNKT4+cClcbiAgICAgICAgICByW2srK10gPSBkfCh0aGlzLnM8PCh0aGlzLkRCLXApKTtcbiAgICAgICAgd2hpbGUoaSA+PSAwKSB7XG4gICAgICAgICAgaWYocCA8IDgpIHtcbiAgICAgICAgICAgIGQgPSAodGhpc1tpXSYoKDE8PHApLTEpKTw8KDgtcCk7XG4gICAgICAgICAgICBkIHw9IHRoaXNbLS1pXT4+KHArPXRoaXMuREItOCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZCA9ICh0aGlzW2ldPj4ocC09OCkpJjB4ZmY7XG4gICAgICAgICAgICBpZihwIDw9IDApIHsgcCArPSB0aGlzLkRCOyAtLWk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoKGQmMHg4MCkgIT0gMCkgZCB8PSAtMjU2O1xuICAgICAgICAgIGlmKGsgPT0gMCAmJiAodGhpcy5zJjB4ODApICE9IChkJjB4ODApKSArK2s7XG4gICAgICAgICAgaWYoayA+IDAgfHwgZCAhPSB0aGlzLnMpIHJbaysrXSA9IGQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJuRXF1YWxzKGEpIHsgcmV0dXJuKHRoaXMuY29tcGFyZVRvKGEpPT0wKTsgfVxuICAgIGZ1bmN0aW9uIGJuTWluKGEpIHsgcmV0dXJuKHRoaXMuY29tcGFyZVRvKGEpPDApP3RoaXM6YTsgfVxuICAgIGZ1bmN0aW9uIGJuTWF4KGEpIHsgcmV0dXJuKHRoaXMuY29tcGFyZVRvKGEpPjApP3RoaXM6YTsgfVxuXG4gICAgLy8gKHByb3RlY3RlZCkgciA9IHRoaXMgb3AgYSAoYml0d2lzZSlcbiAgICBmdW5jdGlvbiBibnBCaXR3aXNlVG8oYSxvcCxyKSB7XG4gICAgICB2YXIgaSwgZiwgbSA9IE1hdGgubWluKGEudCx0aGlzLnQpO1xuICAgICAgZm9yKGkgPSAwOyBpIDwgbTsgKytpKSByW2ldID0gb3AodGhpc1tpXSxhW2ldKTtcbiAgICAgIGlmKGEudCA8IHRoaXMudCkge1xuICAgICAgICBmID0gYS5zJnRoaXMuRE07XG4gICAgICAgIGZvcihpID0gbTsgaSA8IHRoaXMudDsgKytpKSByW2ldID0gb3AodGhpc1tpXSxmKTtcbiAgICAgICAgci50ID0gdGhpcy50O1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGYgPSB0aGlzLnMmdGhpcy5ETTtcbiAgICAgICAgZm9yKGkgPSBtOyBpIDwgYS50OyArK2kpIHJbaV0gPSBvcChmLGFbaV0pO1xuICAgICAgICByLnQgPSBhLnQ7XG4gICAgICB9XG4gICAgICByLnMgPSBvcCh0aGlzLnMsYS5zKTtcbiAgICAgIHIuY2xhbXAoKTtcbiAgICB9XG5cbiAgICAvLyAocHVibGljKSB0aGlzICYgYVxuICAgIGZ1bmN0aW9uIG9wX2FuZCh4LHkpIHsgcmV0dXJuIHgmeTsgfVxuICAgIGZ1bmN0aW9uIGJuQW5kKGEpIHsgdmFyIHIgPSBuYmkoKTsgdGhpcy5iaXR3aXNlVG8oYSxvcF9hbmQscik7IHJldHVybiByOyB9XG5cbiAgICAvLyAocHVibGljKSB0aGlzIHwgYVxuICAgIGZ1bmN0aW9uIG9wX29yKHgseSkgeyByZXR1cm4geHx5OyB9XG4gICAgZnVuY3Rpb24gYm5PcihhKSB7IHZhciByID0gbmJpKCk7IHRoaXMuYml0d2lzZVRvKGEsb3Bfb3Iscik7IHJldHVybiByOyB9XG5cbiAgICAvLyAocHVibGljKSB0aGlzIF4gYVxuICAgIGZ1bmN0aW9uIG9wX3hvcih4LHkpIHsgcmV0dXJuIHheeTsgfVxuICAgIGZ1bmN0aW9uIGJuWG9yKGEpIHsgdmFyIHIgPSBuYmkoKTsgdGhpcy5iaXR3aXNlVG8oYSxvcF94b3Iscik7IHJldHVybiByOyB9XG5cbiAgICAvLyAocHVibGljKSB0aGlzICYgfmFcbiAgICBmdW5jdGlvbiBvcF9hbmRub3QoeCx5KSB7IHJldHVybiB4Jn55OyB9XG4gICAgZnVuY3Rpb24gYm5BbmROb3QoYSkgeyB2YXIgciA9IG5iaSgpOyB0aGlzLmJpdHdpc2VUbyhhLG9wX2FuZG5vdCxyKTsgcmV0dXJuIHI7IH1cblxuICAgIC8vIChwdWJsaWMpIH50aGlzXG4gICAgZnVuY3Rpb24gYm5Ob3QoKSB7XG4gICAgICB2YXIgciA9IG5iaSgpO1xuICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHRoaXMudDsgKytpKSByW2ldID0gdGhpcy5ETSZ+dGhpc1tpXTtcbiAgICAgIHIudCA9IHRoaXMudDtcbiAgICAgIHIucyA9IH50aGlzLnM7XG4gICAgICByZXR1cm4gcjtcbiAgICB9XG5cbiAgICAvLyAocHVibGljKSB0aGlzIDw8IG5cbiAgICBmdW5jdGlvbiBiblNoaWZ0TGVmdChuKSB7XG4gICAgICB2YXIgciA9IG5iaSgpO1xuICAgICAgaWYobiA8IDApIHRoaXMuclNoaWZ0VG8oLW4scik7IGVsc2UgdGhpcy5sU2hpZnRUbyhuLHIpO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfVxuXG4gICAgLy8gKHB1YmxpYykgdGhpcyA+PiBuXG4gICAgZnVuY3Rpb24gYm5TaGlmdFJpZ2h0KG4pIHtcbiAgICAgIHZhciByID0gbmJpKCk7XG4gICAgICBpZihuIDwgMCkgdGhpcy5sU2hpZnRUbygtbixyKTsgZWxzZSB0aGlzLnJTaGlmdFRvKG4scik7XG4gICAgICByZXR1cm4gcjtcbiAgICB9XG5cbiAgICAvLyByZXR1cm4gaW5kZXggb2YgbG93ZXN0IDEtYml0IGluIHgsIHggPCAyXjMxXG4gICAgZnVuY3Rpb24gbGJpdCh4KSB7XG4gICAgICBpZih4ID09IDApIHJldHVybiAtMTtcbiAgICAgIHZhciByID0gMDtcbiAgICAgIGlmKCh4JjB4ZmZmZikgPT0gMCkgeyB4ID4+PSAxNjsgciArPSAxNjsgfVxuICAgICAgaWYoKHgmMHhmZikgPT0gMCkgeyB4ID4+PSA4OyByICs9IDg7IH1cbiAgICAgIGlmKCh4JjB4ZikgPT0gMCkgeyB4ID4+PSA0OyByICs9IDQ7IH1cbiAgICAgIGlmKCh4JjMpID09IDApIHsgeCA+Pj0gMjsgciArPSAyOyB9XG4gICAgICBpZigoeCYxKSA9PSAwKSArK3I7XG4gICAgICByZXR1cm4gcjtcbiAgICB9XG5cbiAgICAvLyAocHVibGljKSByZXR1cm5zIGluZGV4IG9mIGxvd2VzdCAxLWJpdCAob3IgLTEgaWYgbm9uZSlcbiAgICBmdW5jdGlvbiBibkdldExvd2VzdFNldEJpdCgpIHtcbiAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLnQ7ICsraSlcbiAgICAgICAgaWYodGhpc1tpXSAhPSAwKSByZXR1cm4gaSp0aGlzLkRCK2xiaXQodGhpc1tpXSk7XG4gICAgICBpZih0aGlzLnMgPCAwKSByZXR1cm4gdGhpcy50KnRoaXMuREI7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLy8gcmV0dXJuIG51bWJlciBvZiAxIGJpdHMgaW4geFxuICAgIGZ1bmN0aW9uIGNiaXQoeCkge1xuICAgICAgdmFyIHIgPSAwO1xuICAgICAgd2hpbGUoeCAhPSAwKSB7IHggJj0geC0xOyArK3I7IH1cbiAgICAgIHJldHVybiByO1xuICAgIH1cblxuICAgIC8vIChwdWJsaWMpIHJldHVybiBudW1iZXIgb2Ygc2V0IGJpdHNcbiAgICBmdW5jdGlvbiBibkJpdENvdW50KCkge1xuICAgICAgdmFyIHIgPSAwLCB4ID0gdGhpcy5zJnRoaXMuRE07XG4gICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy50OyArK2kpIHIgKz0gY2JpdCh0aGlzW2ldXngpO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfVxuXG4gICAgLy8gKHB1YmxpYykgdHJ1ZSBpZmYgbnRoIGJpdCBpcyBzZXRcbiAgICBmdW5jdGlvbiBiblRlc3RCaXQobikge1xuICAgICAgdmFyIGogPSBNYXRoLmZsb29yKG4vdGhpcy5EQik7XG4gICAgICBpZihqID49IHRoaXMudCkgcmV0dXJuKHRoaXMucyE9MCk7XG4gICAgICByZXR1cm4oKHRoaXNbal0mKDE8PChuJXRoaXMuREIpKSkhPTApO1xuICAgIH1cblxuICAgIC8vIChwcm90ZWN0ZWQpIHRoaXMgb3AgKDE8PG4pXG4gICAgZnVuY3Rpb24gYm5wQ2hhbmdlQml0KG4sb3ApIHtcbiAgICAgIHZhciByID0gQmlnSW50ZWdlci5PTkUuc2hpZnRMZWZ0KG4pO1xuICAgICAgdGhpcy5iaXR3aXNlVG8ocixvcCxyKTtcbiAgICAgIHJldHVybiByO1xuICAgIH1cblxuICAgIC8vIChwdWJsaWMpIHRoaXMgfCAoMTw8bilcbiAgICBmdW5jdGlvbiBiblNldEJpdChuKSB7IHJldHVybiB0aGlzLmNoYW5nZUJpdChuLG9wX29yKTsgfVxuXG4gICAgLy8gKHB1YmxpYykgdGhpcyAmIH4oMTw8bilcbiAgICBmdW5jdGlvbiBibkNsZWFyQml0KG4pIHsgcmV0dXJuIHRoaXMuY2hhbmdlQml0KG4sb3BfYW5kbm90KTsgfVxuXG4gICAgLy8gKHB1YmxpYykgdGhpcyBeICgxPDxuKVxuICAgIGZ1bmN0aW9uIGJuRmxpcEJpdChuKSB7IHJldHVybiB0aGlzLmNoYW5nZUJpdChuLG9wX3hvcik7IH1cblxuICAgIC8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzICsgYVxuICAgIGZ1bmN0aW9uIGJucEFkZFRvKGEscikge1xuICAgICAgdmFyIGkgPSAwLCBjID0gMCwgbSA9IE1hdGgubWluKGEudCx0aGlzLnQpO1xuICAgICAgd2hpbGUoaSA8IG0pIHtcbiAgICAgICAgYyArPSB0aGlzW2ldK2FbaV07XG4gICAgICAgIHJbaSsrXSA9IGMmdGhpcy5ETTtcbiAgICAgICAgYyA+Pj0gdGhpcy5EQjtcbiAgICAgIH1cbiAgICAgIGlmKGEudCA8IHRoaXMudCkge1xuICAgICAgICBjICs9IGEucztcbiAgICAgICAgd2hpbGUoaSA8IHRoaXMudCkge1xuICAgICAgICAgIGMgKz0gdGhpc1tpXTtcbiAgICAgICAgICByW2krK10gPSBjJnRoaXMuRE07XG4gICAgICAgICAgYyA+Pj0gdGhpcy5EQjtcbiAgICAgICAgfVxuICAgICAgICBjICs9IHRoaXMucztcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBjICs9IHRoaXMucztcbiAgICAgICAgd2hpbGUoaSA8IGEudCkge1xuICAgICAgICAgIGMgKz0gYVtpXTtcbiAgICAgICAgICByW2krK10gPSBjJnRoaXMuRE07XG4gICAgICAgICAgYyA+Pj0gdGhpcy5EQjtcbiAgICAgICAgfVxuICAgICAgICBjICs9IGEucztcbiAgICAgIH1cbiAgICAgIHIucyA9IChjPDApPy0xOjA7XG4gICAgICBpZihjID4gMCkgcltpKytdID0gYztcbiAgICAgIGVsc2UgaWYoYyA8IC0xKSByW2krK10gPSB0aGlzLkRWK2M7XG4gICAgICByLnQgPSBpO1xuICAgICAgci5jbGFtcCgpO1xuICAgIH1cblxuICAgIC8vIChwdWJsaWMpIHRoaXMgKyBhXG4gICAgZnVuY3Rpb24gYm5BZGQoYSkgeyB2YXIgciA9IG5iaSgpOyB0aGlzLmFkZFRvKGEscik7IHJldHVybiByOyB9XG5cbiAgICAvLyAocHVibGljKSB0aGlzIC0gYVxuICAgIGZ1bmN0aW9uIGJuU3VidHJhY3QoYSkgeyB2YXIgciA9IG5iaSgpOyB0aGlzLnN1YlRvKGEscik7IHJldHVybiByOyB9XG5cbiAgICAvLyAocHVibGljKSB0aGlzICogYVxuICAgIGZ1bmN0aW9uIGJuTXVsdGlwbHkoYSkgeyB2YXIgciA9IG5iaSgpOyB0aGlzLm11bHRpcGx5VG8oYSxyKTsgcmV0dXJuIHI7IH1cblxuICAgIC8vIChwdWJsaWMpIHRoaXNeMlxuICAgIGZ1bmN0aW9uIGJuU3F1YXJlKCkgeyB2YXIgciA9IG5iaSgpOyB0aGlzLnNxdWFyZVRvKHIpOyByZXR1cm4gcjsgfVxuXG4gICAgLy8gKHB1YmxpYykgdGhpcyAvIGFcbiAgICBmdW5jdGlvbiBibkRpdmlkZShhKSB7IHZhciByID0gbmJpKCk7IHRoaXMuZGl2UmVtVG8oYSxyLG51bGwpOyByZXR1cm4gcjsgfVxuXG4gICAgLy8gKHB1YmxpYykgdGhpcyAlIGFcbiAgICBmdW5jdGlvbiBiblJlbWFpbmRlcihhKSB7IHZhciByID0gbmJpKCk7IHRoaXMuZGl2UmVtVG8oYSxudWxsLHIpOyByZXR1cm4gcjsgfVxuXG4gICAgLy8gKHB1YmxpYykgW3RoaXMvYSx0aGlzJWFdXG4gICAgZnVuY3Rpb24gYm5EaXZpZGVBbmRSZW1haW5kZXIoYSkge1xuICAgICAgdmFyIHEgPSBuYmkoKSwgciA9IG5iaSgpO1xuICAgICAgdGhpcy5kaXZSZW1UbyhhLHEscik7XG4gICAgICByZXR1cm4gbmV3IEFycmF5KHEscik7XG4gICAgfVxuXG4gICAgLy8gKHByb3RlY3RlZCkgdGhpcyAqPSBuLCB0aGlzID49IDAsIDEgPCBuIDwgRFZcbiAgICBmdW5jdGlvbiBibnBETXVsdGlwbHkobikge1xuICAgICAgdGhpc1t0aGlzLnRdID0gdGhpcy5hbSgwLG4tMSx0aGlzLDAsMCx0aGlzLnQpO1xuICAgICAgKyt0aGlzLnQ7XG4gICAgICB0aGlzLmNsYW1wKCk7XG4gICAgfVxuXG4gICAgLy8gKHByb3RlY3RlZCkgdGhpcyArPSBuIDw8IHcgd29yZHMsIHRoaXMgPj0gMFxuICAgIGZ1bmN0aW9uIGJucERBZGRPZmZzZXQobix3KSB7XG4gICAgICBpZihuID09IDApIHJldHVybjtcbiAgICAgIHdoaWxlKHRoaXMudCA8PSB3KSB0aGlzW3RoaXMudCsrXSA9IDA7XG4gICAgICB0aGlzW3ddICs9IG47XG4gICAgICB3aGlsZSh0aGlzW3ddID49IHRoaXMuRFYpIHtcbiAgICAgICAgdGhpc1t3XSAtPSB0aGlzLkRWO1xuICAgICAgICBpZigrK3cgPj0gdGhpcy50KSB0aGlzW3RoaXMudCsrXSA9IDA7XG4gICAgICAgICsrdGhpc1t3XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBIFwibnVsbFwiIHJlZHVjZXJcbiAgICBmdW5jdGlvbiBOdWxsRXhwKCkge31cbiAgICBmdW5jdGlvbiBuTm9wKHgpIHsgcmV0dXJuIHg7IH1cbiAgICBmdW5jdGlvbiBuTXVsVG8oeCx5LHIpIHsgeC5tdWx0aXBseVRvKHkscik7IH1cbiAgICBmdW5jdGlvbiBuU3FyVG8oeCxyKSB7IHguc3F1YXJlVG8ocik7IH1cblxuICAgIE51bGxFeHAucHJvdG90eXBlLmNvbnZlcnQgPSBuTm9wO1xuICAgIE51bGxFeHAucHJvdG90eXBlLnJldmVydCA9IG5Ob3A7XG4gICAgTnVsbEV4cC5wcm90b3R5cGUubXVsVG8gPSBuTXVsVG87XG4gICAgTnVsbEV4cC5wcm90b3R5cGUuc3FyVG8gPSBuU3FyVG87XG5cbiAgICAvLyAocHVibGljKSB0aGlzXmVcbiAgICBmdW5jdGlvbiBiblBvdyhlKSB7IHJldHVybiB0aGlzLmV4cChlLG5ldyBOdWxsRXhwKCkpOyB9XG5cbiAgICAvLyAocHJvdGVjdGVkKSByID0gbG93ZXIgbiB3b3JkcyBvZiBcInRoaXMgKiBhXCIsIGEudCA8PSBuXG4gICAgLy8gXCJ0aGlzXCIgc2hvdWxkIGJlIHRoZSBsYXJnZXIgb25lIGlmIGFwcHJvcHJpYXRlLlxuICAgIGZ1bmN0aW9uIGJucE11bHRpcGx5TG93ZXJUbyhhLG4scikge1xuICAgICAgdmFyIGkgPSBNYXRoLm1pbih0aGlzLnQrYS50LG4pO1xuICAgICAgci5zID0gMDsgLy8gYXNzdW1lcyBhLHRoaXMgPj0gMFxuICAgICAgci50ID0gaTtcbiAgICAgIHdoaWxlKGkgPiAwKSByWy0taV0gPSAwO1xuICAgICAgdmFyIGo7XG4gICAgICBmb3IoaiA9IHIudC10aGlzLnQ7IGkgPCBqOyArK2kpIHJbaSt0aGlzLnRdID0gdGhpcy5hbSgwLGFbaV0scixpLDAsdGhpcy50KTtcbiAgICAgIGZvcihqID0gTWF0aC5taW4oYS50LG4pOyBpIDwgajsgKytpKSB0aGlzLmFtKDAsYVtpXSxyLGksMCxuLWkpO1xuICAgICAgci5jbGFtcCgpO1xuICAgIH1cblxuICAgIC8vIChwcm90ZWN0ZWQpIHIgPSBcInRoaXMgKiBhXCIgd2l0aG91dCBsb3dlciBuIHdvcmRzLCBuID4gMFxuICAgIC8vIFwidGhpc1wiIHNob3VsZCBiZSB0aGUgbGFyZ2VyIG9uZSBpZiBhcHByb3ByaWF0ZS5cbiAgICBmdW5jdGlvbiBibnBNdWx0aXBseVVwcGVyVG8oYSxuLHIpIHtcbiAgICAgIC0tbjtcbiAgICAgIHZhciBpID0gci50ID0gdGhpcy50K2EudC1uO1xuICAgICAgci5zID0gMDsgLy8gYXNzdW1lcyBhLHRoaXMgPj0gMFxuICAgICAgd2hpbGUoLS1pID49IDApIHJbaV0gPSAwO1xuICAgICAgZm9yKGkgPSBNYXRoLm1heChuLXRoaXMudCwwKTsgaSA8IGEudDsgKytpKVxuICAgICAgICByW3RoaXMudCtpLW5dID0gdGhpcy5hbShuLWksYVtpXSxyLDAsMCx0aGlzLnQraS1uKTtcbiAgICAgIHIuY2xhbXAoKTtcbiAgICAgIHIuZHJTaGlmdFRvKDEscik7XG4gICAgfVxuXG4gICAgLy8gQmFycmV0dCBtb2R1bGFyIHJlZHVjdGlvblxuICAgIGZ1bmN0aW9uIEJhcnJldHQobSkge1xuICAgICAgLy8gc2V0dXAgQmFycmV0dFxuICAgICAgdGhpcy5yMiA9IG5iaSgpO1xuICAgICAgdGhpcy5xMyA9IG5iaSgpO1xuICAgICAgQmlnSW50ZWdlci5PTkUuZGxTaGlmdFRvKDIqbS50LHRoaXMucjIpO1xuICAgICAgdGhpcy5tdSA9IHRoaXMucjIuZGl2aWRlKG0pO1xuICAgICAgdGhpcy5tID0gbTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBiYXJyZXR0Q29udmVydCh4KSB7XG4gICAgICBpZih4LnMgPCAwIHx8IHgudCA+IDIqdGhpcy5tLnQpIHJldHVybiB4Lm1vZCh0aGlzLm0pO1xuICAgICAgZWxzZSBpZih4LmNvbXBhcmVUbyh0aGlzLm0pIDwgMCkgcmV0dXJuIHg7XG4gICAgICBlbHNlIHsgdmFyIHIgPSBuYmkoKTsgeC5jb3B5VG8ocik7IHRoaXMucmVkdWNlKHIpOyByZXR1cm4gcjsgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJhcnJldHRSZXZlcnQoeCkgeyByZXR1cm4geDsgfVxuXG4gICAgLy8geCA9IHggbW9kIG0gKEhBQyAxNC40MilcbiAgICBmdW5jdGlvbiBiYXJyZXR0UmVkdWNlKHgpIHtcbiAgICAgIHguZHJTaGlmdFRvKHRoaXMubS50LTEsdGhpcy5yMik7XG4gICAgICBpZih4LnQgPiB0aGlzLm0udCsxKSB7IHgudCA9IHRoaXMubS50KzE7IHguY2xhbXAoKTsgfVxuICAgICAgdGhpcy5tdS5tdWx0aXBseVVwcGVyVG8odGhpcy5yMix0aGlzLm0udCsxLHRoaXMucTMpO1xuICAgICAgdGhpcy5tLm11bHRpcGx5TG93ZXJUbyh0aGlzLnEzLHRoaXMubS50KzEsdGhpcy5yMik7XG4gICAgICB3aGlsZSh4LmNvbXBhcmVUbyh0aGlzLnIyKSA8IDApIHguZEFkZE9mZnNldCgxLHRoaXMubS50KzEpO1xuICAgICAgeC5zdWJUbyh0aGlzLnIyLHgpO1xuICAgICAgd2hpbGUoeC5jb21wYXJlVG8odGhpcy5tKSA+PSAwKSB4LnN1YlRvKHRoaXMubSx4KTtcbiAgICB9XG5cbiAgICAvLyByID0geF4yIG1vZCBtOyB4ICE9IHJcbiAgICBmdW5jdGlvbiBiYXJyZXR0U3FyVG8oeCxyKSB7IHguc3F1YXJlVG8ocik7IHRoaXMucmVkdWNlKHIpOyB9XG5cbiAgICAvLyByID0geCp5IG1vZCBtOyB4LHkgIT0gclxuICAgIGZ1bmN0aW9uIGJhcnJldHRNdWxUbyh4LHkscikgeyB4Lm11bHRpcGx5VG8oeSxyKTsgdGhpcy5yZWR1Y2Uocik7IH1cblxuICAgIEJhcnJldHQucHJvdG90eXBlLmNvbnZlcnQgPSBiYXJyZXR0Q29udmVydDtcbiAgICBCYXJyZXR0LnByb3RvdHlwZS5yZXZlcnQgPSBiYXJyZXR0UmV2ZXJ0O1xuICAgIEJhcnJldHQucHJvdG90eXBlLnJlZHVjZSA9IGJhcnJldHRSZWR1Y2U7XG4gICAgQmFycmV0dC5wcm90b3R5cGUubXVsVG8gPSBiYXJyZXR0TXVsVG87XG4gICAgQmFycmV0dC5wcm90b3R5cGUuc3FyVG8gPSBiYXJyZXR0U3FyVG87XG5cbiAgICAvLyAocHVibGljKSB0aGlzXmUgJSBtIChIQUMgMTQuODUpXG4gICAgZnVuY3Rpb24gYm5Nb2RQb3coZSxtKSB7XG4gICAgICB2YXIgaSA9IGUuYml0TGVuZ3RoKCksIGssIHIgPSBuYnYoMSksIHo7XG4gICAgICBpZihpIDw9IDApIHJldHVybiByO1xuICAgICAgZWxzZSBpZihpIDwgMTgpIGsgPSAxO1xuICAgICAgZWxzZSBpZihpIDwgNDgpIGsgPSAzO1xuICAgICAgZWxzZSBpZihpIDwgMTQ0KSBrID0gNDtcbiAgICAgIGVsc2UgaWYoaSA8IDc2OCkgayA9IDU7XG4gICAgICBlbHNlIGsgPSA2O1xuICAgICAgaWYoaSA8IDgpXG4gICAgICAgIHogPSBuZXcgQ2xhc3NpYyhtKTtcbiAgICAgIGVsc2UgaWYobS5pc0V2ZW4oKSlcbiAgICAgICAgeiA9IG5ldyBCYXJyZXR0KG0pO1xuICAgICAgZWxzZVxuICAgICAgICB6ID0gbmV3IE1vbnRnb21lcnkobSk7XG5cbiAgICAgIC8vIHByZWNvbXB1dGF0aW9uXG4gICAgICB2YXIgZyA9IG5ldyBBcnJheSgpLCBuID0gMywgazEgPSBrLTEsIGttID0gKDE8PGspLTE7XG4gICAgICBnWzFdID0gei5jb252ZXJ0KHRoaXMpO1xuICAgICAgaWYoayA+IDEpIHtcbiAgICAgICAgdmFyIGcyID0gbmJpKCk7XG4gICAgICAgIHouc3FyVG8oZ1sxXSxnMik7XG4gICAgICAgIHdoaWxlKG4gPD0ga20pIHtcbiAgICAgICAgICBnW25dID0gbmJpKCk7XG4gICAgICAgICAgei5tdWxUbyhnMixnW24tMl0sZ1tuXSk7XG4gICAgICAgICAgbiArPSAyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBqID0gZS50LTEsIHcsIGlzMSA9IHRydWUsIHIyID0gbmJpKCksIHQ7XG4gICAgICBpID0gbmJpdHMoZVtqXSktMTtcbiAgICAgIHdoaWxlKGogPj0gMCkge1xuICAgICAgICBpZihpID49IGsxKSB3ID0gKGVbal0+PihpLWsxKSkma207XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHcgPSAoZVtqXSYoKDE8PChpKzEpKS0xKSk8PChrMS1pKTtcbiAgICAgICAgICBpZihqID4gMCkgdyB8PSBlW2otMV0+Pih0aGlzLkRCK2ktazEpO1xuICAgICAgICB9XG5cbiAgICAgICAgbiA9IGs7XG4gICAgICAgIHdoaWxlKCh3JjEpID09IDApIHsgdyA+Pj0gMTsgLS1uOyB9XG4gICAgICAgIGlmKChpIC09IG4pIDwgMCkgeyBpICs9IHRoaXMuREI7IC0tajsgfVxuICAgICAgICBpZihpczEpIHtcdC8vIHJldCA9PSAxLCBkb24ndCBib3RoZXIgc3F1YXJpbmcgb3IgbXVsdGlwbHlpbmcgaXRcbiAgICAgICAgICBnW3ddLmNvcHlUbyhyKTtcbiAgICAgICAgICBpczEgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB3aGlsZShuID4gMSkgeyB6LnNxclRvKHIscjIpOyB6LnNxclRvKHIyLHIpOyBuIC09IDI7IH1cbiAgICAgICAgICBpZihuID4gMCkgei5zcXJUbyhyLHIyKTsgZWxzZSB7IHQgPSByOyByID0gcjI7IHIyID0gdDsgfVxuICAgICAgICAgIHoubXVsVG8ocjIsZ1t3XSxyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlKGogPj0gMCAmJiAoZVtqXSYoMTw8aSkpID09IDApIHtcbiAgICAgICAgICB6LnNxclRvKHIscjIpOyB0ID0gcjsgciA9IHIyOyByMiA9IHQ7XG4gICAgICAgICAgaWYoLS1pIDwgMCkgeyBpID0gdGhpcy5EQi0xOyAtLWo7IH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHoucmV2ZXJ0KHIpO1xuICAgIH1cblxuICAgIC8vIChwdWJsaWMpIGdjZCh0aGlzLGEpIChIQUMgMTQuNTQpXG4gICAgZnVuY3Rpb24gYm5HQ0QoYSkge1xuICAgICAgdmFyIHggPSAodGhpcy5zPDApP3RoaXMubmVnYXRlKCk6dGhpcy5jbG9uZSgpO1xuICAgICAgdmFyIHkgPSAoYS5zPDApP2EubmVnYXRlKCk6YS5jbG9uZSgpO1xuICAgICAgaWYoeC5jb21wYXJlVG8oeSkgPCAwKSB7IHZhciB0ID0geDsgeCA9IHk7IHkgPSB0OyB9XG4gICAgICB2YXIgaSA9IHguZ2V0TG93ZXN0U2V0Qml0KCksIGcgPSB5LmdldExvd2VzdFNldEJpdCgpO1xuICAgICAgaWYoZyA8IDApIHJldHVybiB4O1xuICAgICAgaWYoaSA8IGcpIGcgPSBpO1xuICAgICAgaWYoZyA+IDApIHtcbiAgICAgICAgeC5yU2hpZnRUbyhnLHgpO1xuICAgICAgICB5LnJTaGlmdFRvKGcseSk7XG4gICAgICB9XG4gICAgICB3aGlsZSh4LnNpZ251bSgpID4gMCkge1xuICAgICAgICBpZigoaSA9IHguZ2V0TG93ZXN0U2V0Qml0KCkpID4gMCkgeC5yU2hpZnRUbyhpLHgpO1xuICAgICAgICBpZigoaSA9IHkuZ2V0TG93ZXN0U2V0Qml0KCkpID4gMCkgeS5yU2hpZnRUbyhpLHkpO1xuICAgICAgICBpZih4LmNvbXBhcmVUbyh5KSA+PSAwKSB7XG4gICAgICAgICAgeC5zdWJUbyh5LHgpO1xuICAgICAgICAgIHguclNoaWZ0VG8oMSx4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB5LnN1YlRvKHgseSk7XG4gICAgICAgICAgeS5yU2hpZnRUbygxLHkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZihnID4gMCkgeS5sU2hpZnRUbyhnLHkpO1xuICAgICAgcmV0dXJuIHk7XG4gICAgfVxuXG4gICAgLy8gKHByb3RlY3RlZCkgdGhpcyAlIG4sIG4gPCAyXjI2XG4gICAgZnVuY3Rpb24gYm5wTW9kSW50KG4pIHtcbiAgICAgIGlmKG4gPD0gMCkgcmV0dXJuIDA7XG4gICAgICB2YXIgZCA9IHRoaXMuRFYlbiwgciA9ICh0aGlzLnM8MCk/bi0xOjA7XG4gICAgICBpZih0aGlzLnQgPiAwKVxuICAgICAgICBpZihkID09IDApIHIgPSB0aGlzWzBdJW47XG4gICAgICAgIGVsc2UgZm9yKHZhciBpID0gdGhpcy50LTE7IGkgPj0gMDsgLS1pKSByID0gKGQqcit0aGlzW2ldKSVuO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfVxuXG4gICAgLy8gKHB1YmxpYykgMS90aGlzICUgbSAoSEFDIDE0LjYxKVxuICAgIGZ1bmN0aW9uIGJuTW9kSW52ZXJzZShtKSB7XG4gICAgICB2YXIgYWMgPSBtLmlzRXZlbigpO1xuICAgICAgaWYoKHRoaXMuaXNFdmVuKCkgJiYgYWMpIHx8IG0uc2lnbnVtKCkgPT0gMCkgcmV0dXJuIEJpZ0ludGVnZXIuWkVSTztcbiAgICAgIHZhciB1ID0gbS5jbG9uZSgpLCB2ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgdmFyIGEgPSBuYnYoMSksIGIgPSBuYnYoMCksIGMgPSBuYnYoMCksIGQgPSBuYnYoMSk7XG4gICAgICB3aGlsZSh1LnNpZ251bSgpICE9IDApIHtcbiAgICAgICAgd2hpbGUodS5pc0V2ZW4oKSkge1xuICAgICAgICAgIHUuclNoaWZ0VG8oMSx1KTtcbiAgICAgICAgICBpZihhYykge1xuICAgICAgICAgICAgaWYoIWEuaXNFdmVuKCkgfHwgIWIuaXNFdmVuKCkpIHsgYS5hZGRUbyh0aGlzLGEpOyBiLnN1YlRvKG0sYik7IH1cbiAgICAgICAgICAgIGEuclNoaWZ0VG8oMSxhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZighYi5pc0V2ZW4oKSkgYi5zdWJUbyhtLGIpO1xuICAgICAgICAgIGIuclNoaWZ0VG8oMSxiKTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSh2LmlzRXZlbigpKSB7XG4gICAgICAgICAgdi5yU2hpZnRUbygxLHYpO1xuICAgICAgICAgIGlmKGFjKSB7XG4gICAgICAgICAgICBpZighYy5pc0V2ZW4oKSB8fCAhZC5pc0V2ZW4oKSkgeyBjLmFkZFRvKHRoaXMsYyk7IGQuc3ViVG8obSxkKTsgfVxuICAgICAgICAgICAgYy5yU2hpZnRUbygxLGMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmKCFkLmlzRXZlbigpKSBkLnN1YlRvKG0sZCk7XG4gICAgICAgICAgZC5yU2hpZnRUbygxLGQpO1xuICAgICAgICB9XG4gICAgICAgIGlmKHUuY29tcGFyZVRvKHYpID49IDApIHtcbiAgICAgICAgICB1LnN1YlRvKHYsdSk7XG4gICAgICAgICAgaWYoYWMpIGEuc3ViVG8oYyxhKTtcbiAgICAgICAgICBiLnN1YlRvKGQsYik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdi5zdWJUbyh1LHYpO1xuICAgICAgICAgIGlmKGFjKSBjLnN1YlRvKGEsYyk7XG4gICAgICAgICAgZC5zdWJUbyhiLGQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZih2LmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSkgIT0gMCkgcmV0dXJuIEJpZ0ludGVnZXIuWkVSTztcbiAgICAgIGlmKGQuY29tcGFyZVRvKG0pID49IDApIHJldHVybiBkLnN1YnRyYWN0KG0pO1xuICAgICAgaWYoZC5zaWdudW0oKSA8IDApIGQuYWRkVG8obSxkKTsgZWxzZSByZXR1cm4gZDtcbiAgICAgIGlmKGQuc2lnbnVtKCkgPCAwKSByZXR1cm4gZC5hZGQobSk7IGVsc2UgcmV0dXJuIGQ7XG4gICAgfVxuXG4gICAgdmFyIGxvd3ByaW1lcyA9IFsyLDMsNSw3LDExLDEzLDE3LDE5LDIzLDI5LDMxLDM3LDQxLDQzLDQ3LDUzLDU5LDYxLDY3LDcxLDczLDc5LDgzLDg5LDk3LDEwMSwxMDMsMTA3LDEwOSwxMTMsMTI3LDEzMSwxMzcsMTM5LDE0OSwxNTEsMTU3LDE2MywxNjcsMTczLDE3OSwxODEsMTkxLDE5MywxOTcsMTk5LDIxMSwyMjMsMjI3LDIyOSwyMzMsMjM5LDI0MSwyNTEsMjU3LDI2MywyNjksMjcxLDI3NywyODEsMjgzLDI5MywzMDcsMzExLDMxMywzMTcsMzMxLDMzNywzNDcsMzQ5LDM1MywzNTksMzY3LDM3MywzNzksMzgzLDM4OSwzOTcsNDAxLDQwOSw0MTksNDIxLDQzMSw0MzMsNDM5LDQ0Myw0NDksNDU3LDQ2MSw0NjMsNDY3LDQ3OSw0ODcsNDkxLDQ5OSw1MDMsNTA5LDUyMSw1MjMsNTQxLDU0Nyw1NTcsNTYzLDU2OSw1NzEsNTc3LDU4Nyw1OTMsNTk5LDYwMSw2MDcsNjEzLDYxNyw2MTksNjMxLDY0MSw2NDMsNjQ3LDY1Myw2NTksNjYxLDY3Myw2NzcsNjgzLDY5MSw3MDEsNzA5LDcxOSw3MjcsNzMzLDczOSw3NDMsNzUxLDc1Nyw3NjEsNzY5LDc3Myw3ODcsNzk3LDgwOSw4MTEsODIxLDgyMyw4MjcsODI5LDgzOSw4NTMsODU3LDg1OSw4NjMsODc3LDg4MSw4ODMsODg3LDkwNyw5MTEsOTE5LDkyOSw5MzcsOTQxLDk0Nyw5NTMsOTY3LDk3MSw5NzcsOTgzLDk5MSw5OTddO1xuICAgIHZhciBscGxpbSA9ICgxPDwyNikvbG93cHJpbWVzW2xvd3ByaW1lcy5sZW5ndGgtMV07XG5cbiAgICAvLyAocHVibGljKSB0ZXN0IHByaW1hbGl0eSB3aXRoIGNlcnRhaW50eSA+PSAxLS41XnRcbiAgICBmdW5jdGlvbiBibklzUHJvYmFibGVQcmltZSh0KSB7XG4gICAgICB2YXIgaSwgeCA9IHRoaXMuYWJzKCk7XG4gICAgICBpZih4LnQgPT0gMSAmJiB4WzBdIDw9IGxvd3ByaW1lc1tsb3dwcmltZXMubGVuZ3RoLTFdKSB7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IGxvd3ByaW1lcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICBpZih4WzBdID09IGxvd3ByaW1lc1tpXSkgcmV0dXJuIHRydWU7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmKHguaXNFdmVuKCkpIHJldHVybiBmYWxzZTtcbiAgICAgIGkgPSAxO1xuICAgICAgd2hpbGUoaSA8IGxvd3ByaW1lcy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIG0gPSBsb3dwcmltZXNbaV0sIGogPSBpKzE7XG4gICAgICAgIHdoaWxlKGogPCBsb3dwcmltZXMubGVuZ3RoICYmIG0gPCBscGxpbSkgbSAqPSBsb3dwcmltZXNbaisrXTtcbiAgICAgICAgbSA9IHgubW9kSW50KG0pO1xuICAgICAgICB3aGlsZShpIDwgaikgaWYobSVsb3dwcmltZXNbaSsrXSA9PSAwKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4geC5taWxsZXJSYWJpbih0KTtcbiAgICB9XG5cbiAgICAvLyAocHJvdGVjdGVkKSB0cnVlIGlmIHByb2JhYmx5IHByaW1lIChIQUMgNC4yNCwgTWlsbGVyLVJhYmluKVxuICAgIGZ1bmN0aW9uIGJucE1pbGxlclJhYmluKHQpIHtcbiAgICAgIHZhciBuMSA9IHRoaXMuc3VidHJhY3QoQmlnSW50ZWdlci5PTkUpO1xuICAgICAgdmFyIGsgPSBuMS5nZXRMb3dlc3RTZXRCaXQoKTtcbiAgICAgIGlmKGsgPD0gMCkgcmV0dXJuIGZhbHNlO1xuICAgICAgdmFyIHIgPSBuMS5zaGlmdFJpZ2h0KGspO1xuICAgICAgdCA9ICh0KzEpPj4xO1xuICAgICAgaWYodCA+IGxvd3ByaW1lcy5sZW5ndGgpIHQgPSBsb3dwcmltZXMubGVuZ3RoO1xuICAgICAgdmFyIGEgPSBuYmkoKTtcbiAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0OyArK2kpIHtcbiAgICAgICAgLy9QaWNrIGJhc2VzIGF0IHJhbmRvbSwgaW5zdGVhZCBvZiBzdGFydGluZyBhdCAyXG4gICAgICAgIGEuZnJvbUludChsb3dwcmltZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKmxvd3ByaW1lcy5sZW5ndGgpXSk7XG4gICAgICAgIHZhciB5ID0gYS5tb2RQb3cocix0aGlzKTtcbiAgICAgICAgaWYoeS5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpICE9IDAgJiYgeS5jb21wYXJlVG8objEpICE9IDApIHtcbiAgICAgICAgICB2YXIgaiA9IDE7XG4gICAgICAgICAgd2hpbGUoaisrIDwgayAmJiB5LmNvbXBhcmVUbyhuMSkgIT0gMCkge1xuICAgICAgICAgICAgeSA9IHkubW9kUG93SW50KDIsdGhpcyk7XG4gICAgICAgICAgICBpZih5LmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSkgPT0gMCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZih5LmNvbXBhcmVUbyhuMSkgIT0gMCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBwcm90ZWN0ZWRcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5jaHVua1NpemUgPSBibnBDaHVua1NpemU7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUudG9SYWRpeCA9IGJucFRvUmFkaXg7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuZnJvbVJhZGl4ID0gYm5wRnJvbVJhZGl4O1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmZyb21OdW1iZXIgPSBibnBGcm9tTnVtYmVyO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmJpdHdpc2VUbyA9IGJucEJpdHdpc2VUbztcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5jaGFuZ2VCaXQgPSBibnBDaGFuZ2VCaXQ7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuYWRkVG8gPSBibnBBZGRUbztcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5kTXVsdGlwbHkgPSBibnBETXVsdGlwbHk7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuZEFkZE9mZnNldCA9IGJucERBZGRPZmZzZXQ7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUubXVsdGlwbHlMb3dlclRvID0gYm5wTXVsdGlwbHlMb3dlclRvO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5VXBwZXJUbyA9IGJucE11bHRpcGx5VXBwZXJUbztcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RJbnQgPSBibnBNb2RJbnQ7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUubWlsbGVyUmFiaW4gPSBibnBNaWxsZXJSYWJpbjtcblxuICAgIC8vIHB1YmxpY1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmNsb25lID0gYm5DbG9uZTtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5pbnRWYWx1ZSA9IGJuSW50VmFsdWU7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuYnl0ZVZhbHVlID0gYm5CeXRlVmFsdWU7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuc2hvcnRWYWx1ZSA9IGJuU2hvcnRWYWx1ZTtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5zaWdudW0gPSBiblNpZ051bTtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS50b0J5dGVBcnJheSA9IGJuVG9CeXRlQXJyYXk7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuZXF1YWxzID0gYm5FcXVhbHM7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUubWluID0gYm5NaW47XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUubWF4ID0gYm5NYXg7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuYW5kID0gYm5BbmQ7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUub3IgPSBibk9yO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnhvciA9IGJuWG9yO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmFuZE5vdCA9IGJuQW5kTm90O1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm5vdCA9IGJuTm90O1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnNoaWZ0TGVmdCA9IGJuU2hpZnRMZWZ0O1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnNoaWZ0UmlnaHQgPSBiblNoaWZ0UmlnaHQ7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuZ2V0TG93ZXN0U2V0Qml0ID0gYm5HZXRMb3dlc3RTZXRCaXQ7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuYml0Q291bnQgPSBibkJpdENvdW50O1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnRlc3RCaXQgPSBiblRlc3RCaXQ7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuc2V0Qml0ID0gYm5TZXRCaXQ7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuY2xlYXJCaXQgPSBibkNsZWFyQml0O1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmZsaXBCaXQgPSBibkZsaXBCaXQ7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuYWRkID0gYm5BZGQ7XG4gICAgQmlnSW50ZWdlci5wcm90b3R5cGUuc3VidHJhY3QgPSBiblN1YnRyYWN0O1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5ID0gYm5NdWx0aXBseTtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5kaXZpZGUgPSBibkRpdmlkZTtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5yZW1haW5kZXIgPSBiblJlbWFpbmRlcjtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5kaXZpZGVBbmRSZW1haW5kZXIgPSBibkRpdmlkZUFuZFJlbWFpbmRlcjtcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RQb3cgPSBibk1vZFBvdztcbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RJbnZlcnNlID0gYm5Nb2RJbnZlcnNlO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLnBvdyA9IGJuUG93O1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmdjZCA9IGJuR0NEO1xuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLmlzUHJvYmFibGVQcmltZSA9IGJuSXNQcm9iYWJsZVByaW1lO1xuXG4gICAgLy8gSlNCTi1zcGVjaWZpYyBleHRlbnNpb25cbiAgICBCaWdJbnRlZ2VyLnByb3RvdHlwZS5zcXVhcmUgPSBiblNxdWFyZTtcblxuICAgIC8vIEV4cG9zZSB0aGUgQmFycmV0dCBmdW5jdGlvblxuICAgIEJpZ0ludGVnZXIucHJvdG90eXBlLkJhcnJldHQgPSBCYXJyZXR0XG5cbiAgICAvLyBCaWdJbnRlZ2VyIGludGVyZmFjZXMgbm90IGltcGxlbWVudGVkIGluIGpzYm46XG5cbiAgICAvLyBCaWdJbnRlZ2VyKGludCBzaWdudW0sIGJ5dGVbXSBtYWduaXR1ZGUpXG4gICAgLy8gZG91YmxlIGRvdWJsZVZhbHVlKClcbiAgICAvLyBmbG9hdCBmbG9hdFZhbHVlKClcbiAgICAvLyBpbnQgaGFzaENvZGUoKVxuICAgIC8vIGxvbmcgbG9uZ1ZhbHVlKClcbiAgICAvLyBzdGF0aWMgQmlnSW50ZWdlciB2YWx1ZU9mKGxvbmcgdmFsKVxuXG5cdC8vIFJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yIC0gcmVxdWlyZXMgYSBQUk5HIGJhY2tlbmQsIGUuZy4gcHJuZzQuanNcblxuXHQvLyBGb3IgYmVzdCByZXN1bHRzLCBwdXQgY29kZSBsaWtlXG5cdC8vIDxib2R5IG9uQ2xpY2s9J3JuZ19zZWVkX3RpbWUoKTsnIG9uS2V5UHJlc3M9J3JuZ19zZWVkX3RpbWUoKTsnPlxuXHQvLyBpbiB5b3VyIG1haW4gSFRNTCBkb2N1bWVudC5cblxuXHR2YXIgcm5nX3N0YXRlO1xuXHR2YXIgcm5nX3Bvb2w7XG5cdHZhciBybmdfcHB0cjtcblxuXHQvLyBNaXggaW4gYSAzMi1iaXQgaW50ZWdlciBpbnRvIHRoZSBwb29sXG5cdGZ1bmN0aW9uIHJuZ19zZWVkX2ludCh4KSB7XG5cdCAgcm5nX3Bvb2xbcm5nX3BwdHIrK10gXj0geCAmIDI1NTtcblx0ICBybmdfcG9vbFtybmdfcHB0cisrXSBePSAoeCA+PiA4KSAmIDI1NTtcblx0ICBybmdfcG9vbFtybmdfcHB0cisrXSBePSAoeCA+PiAxNikgJiAyNTU7XG5cdCAgcm5nX3Bvb2xbcm5nX3BwdHIrK10gXj0gKHggPj4gMjQpICYgMjU1O1xuXHQgIGlmKHJuZ19wcHRyID49IHJuZ19wc2l6ZSkgcm5nX3BwdHIgLT0gcm5nX3BzaXplO1xuXHR9XG5cblx0Ly8gTWl4IGluIHRoZSBjdXJyZW50IHRpbWUgKHcvbWlsbGlzZWNvbmRzKSBpbnRvIHRoZSBwb29sXG5cdGZ1bmN0aW9uIHJuZ19zZWVkX3RpbWUoKSB7XG5cdCAgcm5nX3NlZWRfaW50KG5ldyBEYXRlKCkuZ2V0VGltZSgpKTtcblx0fVxuXG5cdC8vIEluaXRpYWxpemUgdGhlIHBvb2wgd2l0aCBqdW5rIGlmIG5lZWRlZC5cblx0aWYocm5nX3Bvb2wgPT0gbnVsbCkge1xuXHQgIHJuZ19wb29sID0gbmV3IEFycmF5KCk7XG5cdCAgcm5nX3BwdHIgPSAwO1xuXHQgIHZhciB0O1xuXHQgIGlmKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmNyeXB0bykge1xuXHRcdGlmICh3aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuXHRcdCAgLy8gVXNlIHdlYmNyeXB0byBpZiBhdmFpbGFibGVcblx0XHQgIHZhciB1YSA9IG5ldyBVaW50OEFycmF5KDMyKTtcblx0XHQgIHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHVhKTtcblx0XHQgIGZvcih0ID0gMDsgdCA8IDMyOyArK3QpXG5cdFx0XHRybmdfcG9vbFtybmdfcHB0cisrXSA9IHVhW3RdO1xuXHRcdH1cblx0XHRlbHNlIGlmKG5hdmlnYXRvci5hcHBOYW1lID09IFwiTmV0c2NhcGVcIiAmJiBuYXZpZ2F0b3IuYXBwVmVyc2lvbiA8IFwiNVwiKSB7XG5cdFx0ICAvLyBFeHRyYWN0IGVudHJvcHkgKDI1NiBiaXRzKSBmcm9tIE5TNCBSTkcgaWYgYXZhaWxhYmxlXG5cdFx0ICB2YXIgeiA9IHdpbmRvdy5jcnlwdG8ucmFuZG9tKDMyKTtcblx0XHQgIGZvcih0ID0gMDsgdCA8IHoubGVuZ3RoOyArK3QpXG5cdFx0XHRybmdfcG9vbFtybmdfcHB0cisrXSA9IHouY2hhckNvZGVBdCh0KSAmIDI1NTtcblx0XHR9XG5cdCAgfVxuXHQgIHdoaWxlKHJuZ19wcHRyIDwgcm5nX3BzaXplKSB7ICAvLyBleHRyYWN0IHNvbWUgcmFuZG9tbmVzcyBmcm9tIE1hdGgucmFuZG9tKClcblx0XHR0ID0gTWF0aC5mbG9vcig2NTUzNiAqIE1hdGgucmFuZG9tKCkpO1xuXHRcdHJuZ19wb29sW3JuZ19wcHRyKytdID0gdCA+Pj4gODtcblx0XHRybmdfcG9vbFtybmdfcHB0cisrXSA9IHQgJiAyNTU7XG5cdCAgfVxuXHQgIHJuZ19wcHRyID0gMDtcblx0ICBybmdfc2VlZF90aW1lKCk7XG5cdCAgLy9ybmdfc2VlZF9pbnQod2luZG93LnNjcmVlblgpO1xuXHQgIC8vcm5nX3NlZWRfaW50KHdpbmRvdy5zY3JlZW5ZKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHJuZ19nZXRfYnl0ZSgpIHtcblx0ICBpZihybmdfc3RhdGUgPT0gbnVsbCkge1xuXHRcdHJuZ19zZWVkX3RpbWUoKTtcblx0XHRybmdfc3RhdGUgPSBwcm5nX25ld3N0YXRlKCk7XG5cdFx0cm5nX3N0YXRlLmluaXQocm5nX3Bvb2wpO1xuXHRcdGZvcihybmdfcHB0ciA9IDA7IHJuZ19wcHRyIDwgcm5nX3Bvb2wubGVuZ3RoOyArK3JuZ19wcHRyKVxuXHRcdCAgcm5nX3Bvb2xbcm5nX3BwdHJdID0gMDtcblx0XHRybmdfcHB0ciA9IDA7XG5cdFx0Ly9ybmdfcG9vbCA9IG51bGw7XG5cdCAgfVxuXHQgIC8vIFRPRE86IGFsbG93IHJlc2VlZGluZyBhZnRlciBmaXJzdCByZXF1ZXN0XG5cdCAgcmV0dXJuIHJuZ19zdGF0ZS5uZXh0KCk7XG5cdH1cblxuXHRmdW5jdGlvbiBybmdfZ2V0X2J5dGVzKGJhKSB7XG5cdCAgdmFyIGk7XG5cdCAgZm9yKGkgPSAwOyBpIDwgYmEubGVuZ3RoOyArK2kpIGJhW2ldID0gcm5nX2dldF9ieXRlKCk7XG5cdH1cblxuXHRmdW5jdGlvbiBTZWN1cmVSYW5kb20oKSB7fVxuXG5cdFNlY3VyZVJhbmRvbS5wcm90b3R5cGUubmV4dEJ5dGVzID0gcm5nX2dldF9ieXRlcztcblxuXHQvLyBwcm5nNC5qcyAtIHVzZXMgQXJjZm91ciBhcyBhIFBSTkdcblxuXHRmdW5jdGlvbiBBcmNmb3VyKCkge1xuXHQgIHRoaXMuaSA9IDA7XG5cdCAgdGhpcy5qID0gMDtcblx0ICB0aGlzLlMgPSBuZXcgQXJyYXkoKTtcblx0fVxuXG5cdC8vIEluaXRpYWxpemUgYXJjZm91ciBjb250ZXh0IGZyb20ga2V5LCBhbiBhcnJheSBvZiBpbnRzLCBlYWNoIGZyb20gWzAuLjI1NV1cblx0ZnVuY3Rpb24gQVJDNGluaXQoa2V5KSB7XG5cdCAgdmFyIGksIGosIHQ7XG5cdCAgZm9yKGkgPSAwOyBpIDwgMjU2OyArK2kpXG5cdFx0dGhpcy5TW2ldID0gaTtcblx0ICBqID0gMDtcblx0ICBmb3IoaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuXHRcdGogPSAoaiArIHRoaXMuU1tpXSArIGtleVtpICUga2V5Lmxlbmd0aF0pICYgMjU1O1xuXHRcdHQgPSB0aGlzLlNbaV07XG5cdFx0dGhpcy5TW2ldID0gdGhpcy5TW2pdO1xuXHRcdHRoaXMuU1tqXSA9IHQ7XG5cdCAgfVxuXHQgIHRoaXMuaSA9IDA7XG5cdCAgdGhpcy5qID0gMDtcblx0fVxuXG5cdGZ1bmN0aW9uIEFSQzRuZXh0KCkge1xuXHQgIHZhciB0O1xuXHQgIHRoaXMuaSA9ICh0aGlzLmkgKyAxKSAmIDI1NTtcblx0ICB0aGlzLmogPSAodGhpcy5qICsgdGhpcy5TW3RoaXMuaV0pICYgMjU1O1xuXHQgIHQgPSB0aGlzLlNbdGhpcy5pXTtcblx0ICB0aGlzLlNbdGhpcy5pXSA9IHRoaXMuU1t0aGlzLmpdO1xuXHQgIHRoaXMuU1t0aGlzLmpdID0gdDtcblx0ICByZXR1cm4gdGhpcy5TWyh0ICsgdGhpcy5TW3RoaXMuaV0pICYgMjU1XTtcblx0fVxuXG5cdEFyY2ZvdXIucHJvdG90eXBlLmluaXQgPSBBUkM0aW5pdDtcblx0QXJjZm91ci5wcm90b3R5cGUubmV4dCA9IEFSQzRuZXh0O1xuXG5cdC8vIFBsdWcgaW4geW91ciBSTkcgY29uc3RydWN0b3IgaGVyZVxuXHRmdW5jdGlvbiBwcm5nX25ld3N0YXRlKCkge1xuXHQgIHJldHVybiBuZXcgQXJjZm91cigpO1xuXHR9XG5cblx0Ly8gUG9vbCBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0IGFuZCBncmVhdGVyIHRoYW4gMzIuXG5cdC8vIEFuIGFycmF5IG9mIGJ5dGVzIHRoZSBzaXplIG9mIHRoZSBwb29sIHdpbGwgYmUgcGFzc2VkIHRvIGluaXQoKVxuXHR2YXIgcm5nX3BzaXplID0gMjU2O1xuXG4gIEJpZ0ludGVnZXIuU2VjdXJlUmFuZG9tID0gU2VjdXJlUmFuZG9tO1xuICBCaWdJbnRlZ2VyLkJpZ0ludGVnZXIgPSBCaWdJbnRlZ2VyO1xuICBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gQmlnSW50ZWdlcjtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLkJpZ0ludGVnZXIgPSBCaWdJbnRlZ2VyO1xuICAgIHRoaXMuU2VjdXJlUmFuZG9tID0gU2VjdXJlUmFuZG9tO1xuICB9XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiZGJpdHMiLCJjYW5hcnkiLCJqX2xtIiwiQmlnSW50ZWdlciIsImEiLCJiIiwiYyIsImZyb21OdW1iZXIiLCJmcm9tU3RyaW5nIiwibmJpIiwiYW0xIiwiaSIsIngiLCJ3IiwiaiIsIm4iLCJ2IiwiTWF0aCIsImZsb29yIiwiYW0yIiwieGwiLCJ4aCIsImwiLCJoIiwibSIsImFtMyIsImluQnJvd3NlciIsIm5hdmlnYXRvciIsImFwcE5hbWUiLCJwcm90b3R5cGUiLCJhbSIsIkRCIiwiRE0iLCJEViIsIkJJX0ZQIiwiRlYiLCJwb3ciLCJGMSIsIkYyIiwiQklfUk0iLCJCSV9SQyIsIkFycmF5IiwicnIiLCJ2diIsImNoYXJDb2RlQXQiLCJpbnQyY2hhciIsImNoYXJBdCIsImludEF0IiwicyIsImJucENvcHlUbyIsInIiLCJ0IiwiYm5wRnJvbUludCIsIm5idiIsImZyb21JbnQiLCJibnBGcm9tU3RyaW5nIiwiayIsImZyb21SYWRpeCIsImxlbmd0aCIsIm1pIiwic2giLCJjbGFtcCIsIlpFUk8iLCJzdWJUbyIsImJucENsYW1wIiwiYm5Ub1N0cmluZyIsIm5lZ2F0ZSIsInRvU3RyaW5nIiwidG9SYWRpeCIsImttIiwiZCIsInAiLCJibk5lZ2F0ZSIsImJuQWJzIiwiYm5Db21wYXJlVG8iLCJuYml0cyIsImJuQml0TGVuZ3RoIiwiYm5wRExTaGlmdFRvIiwiYm5wRFJTaGlmdFRvIiwibWF4IiwiYm5wTFNoaWZ0VG8iLCJicyIsImNicyIsImJtIiwiZHMiLCJibnBSU2hpZnRUbyIsImJucFN1YlRvIiwibWluIiwiYm5wTXVsdGlwbHlUbyIsImFicyIsInkiLCJibnBTcXVhcmVUbyIsImJucERpdlJlbVRvIiwicSIsInBtIiwicHQiLCJjb3B5VG8iLCJ0cyIsIm1zIiwibnNoIiwibFNoaWZ0VG8iLCJ5cyIsInkwIiwieXQiLCJkMSIsImQyIiwiZSIsImRsU2hpZnRUbyIsImNvbXBhcmVUbyIsIk9ORSIsInFkIiwiZHJTaGlmdFRvIiwiclNoaWZ0VG8iLCJibk1vZCIsImRpdlJlbVRvIiwiQ2xhc3NpYyIsImNDb252ZXJ0IiwibW9kIiwiY1JldmVydCIsImNSZWR1Y2UiLCJjTXVsVG8iLCJtdWx0aXBseVRvIiwicmVkdWNlIiwiY1NxclRvIiwic3F1YXJlVG8iLCJjb252ZXJ0IiwicmV2ZXJ0IiwibXVsVG8iLCJzcXJUbyIsImJucEludkRpZ2l0IiwiTW9udGdvbWVyeSIsIm1wIiwiaW52RGlnaXQiLCJtcGwiLCJtcGgiLCJ1bSIsIm10MiIsIm1vbnRDb252ZXJ0IiwibW9udFJldmVydCIsIm1vbnRSZWR1Y2UiLCJ1MCIsIm1vbnRTcXJUbyIsIm1vbnRNdWxUbyIsImJucElzRXZlbiIsImJucEV4cCIsInoiLCJyMiIsImciLCJibk1vZFBvd0ludCIsImlzRXZlbiIsImV4cCIsImJpdExlbmd0aCIsIm1vZFBvd0ludCIsImJuQ2xvbmUiLCJibkludFZhbHVlIiwiYm5CeXRlVmFsdWUiLCJiblNob3J0VmFsdWUiLCJibnBDaHVua1NpemUiLCJMTjIiLCJsb2ciLCJiblNpZ051bSIsImJucFRvUmFkaXgiLCJzaWdudW0iLCJjcyIsImNodW5rU2l6ZSIsImludFZhbHVlIiwic3Vic3RyIiwiYm5wRnJvbVJhZGl4IiwiZE11bHRpcGx5IiwiZEFkZE9mZnNldCIsImJucEZyb21OdW1iZXIiLCJ0ZXN0Qml0IiwiYml0d2lzZVRvIiwic2hpZnRMZWZ0Iiwib3Bfb3IiLCJpc1Byb2JhYmxlUHJpbWUiLCJuZXh0Qnl0ZXMiLCJiblRvQnl0ZUFycmF5IiwiYm5FcXVhbHMiLCJibk1pbiIsImJuTWF4IiwiYm5wQml0d2lzZVRvIiwib3AiLCJmIiwib3BfYW5kIiwiYm5BbmQiLCJibk9yIiwib3BfeG9yIiwiYm5Yb3IiLCJvcF9hbmRub3QiLCJibkFuZE5vdCIsImJuTm90IiwiYm5TaGlmdExlZnQiLCJiblNoaWZ0UmlnaHQiLCJsYml0IiwiYm5HZXRMb3dlc3RTZXRCaXQiLCJjYml0IiwiYm5CaXRDb3VudCIsImJuVGVzdEJpdCIsImJucENoYW5nZUJpdCIsImJuU2V0Qml0IiwiY2hhbmdlQml0IiwiYm5DbGVhckJpdCIsImJuRmxpcEJpdCIsImJucEFkZFRvIiwiYm5BZGQiLCJhZGRUbyIsImJuU3VidHJhY3QiLCJibk11bHRpcGx5IiwiYm5TcXVhcmUiLCJibkRpdmlkZSIsImJuUmVtYWluZGVyIiwiYm5EaXZpZGVBbmRSZW1haW5kZXIiLCJibnBETXVsdGlwbHkiLCJibnBEQWRkT2Zmc2V0IiwiTnVsbEV4cCIsIm5Ob3AiLCJuTXVsVG8iLCJuU3FyVG8iLCJiblBvdyIsImJucE11bHRpcGx5TG93ZXJUbyIsImJucE11bHRpcGx5VXBwZXJUbyIsIkJhcnJldHQiLCJxMyIsIm11IiwiZGl2aWRlIiwiYmFycmV0dENvbnZlcnQiLCJiYXJyZXR0UmV2ZXJ0IiwiYmFycmV0dFJlZHVjZSIsIm11bHRpcGx5VXBwZXJUbyIsIm11bHRpcGx5TG93ZXJUbyIsImJhcnJldHRTcXJUbyIsImJhcnJldHRNdWxUbyIsImJuTW9kUG93IiwiazEiLCJnMiIsImlzMSIsImJuR0NEIiwiY2xvbmUiLCJnZXRMb3dlc3RTZXRCaXQiLCJibnBNb2RJbnQiLCJibk1vZEludmVyc2UiLCJhYyIsInUiLCJzdWJ0cmFjdCIsImFkZCIsImxvd3ByaW1lcyIsImxwbGltIiwiYm5Jc1Byb2JhYmxlUHJpbWUiLCJtb2RJbnQiLCJtaWxsZXJSYWJpbiIsImJucE1pbGxlclJhYmluIiwibjEiLCJzaGlmdFJpZ2h0IiwicmFuZG9tIiwibW9kUG93IiwiYnl0ZVZhbHVlIiwic2hvcnRWYWx1ZSIsInRvQnl0ZUFycmF5IiwiZXF1YWxzIiwiYW5kIiwib3IiLCJ4b3IiLCJhbmROb3QiLCJub3QiLCJiaXRDb3VudCIsInNldEJpdCIsImNsZWFyQml0IiwiZmxpcEJpdCIsIm11bHRpcGx5IiwicmVtYWluZGVyIiwiZGl2aWRlQW5kUmVtYWluZGVyIiwibW9kSW52ZXJzZSIsImdjZCIsInNxdWFyZSIsInJuZ19zdGF0ZSIsInJuZ19wb29sIiwicm5nX3BwdHIiLCJybmdfc2VlZF9pbnQiLCJybmdfcHNpemUiLCJybmdfc2VlZF90aW1lIiwiRGF0ZSIsImdldFRpbWUiLCJ3aW5kb3ciLCJjcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJ1YSIsIlVpbnQ4QXJyYXkiLCJhcHBWZXJzaW9uIiwicm5nX2dldF9ieXRlIiwicHJuZ19uZXdzdGF0ZSIsImluaXQiLCJuZXh0Iiwicm5nX2dldF9ieXRlcyIsImJhIiwiU2VjdXJlUmFuZG9tIiwiQXJjZm91ciIsIlMiLCJBUkM0aW5pdCIsImtleSIsIkFSQzRuZXh0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/jsbn/index.js\n");

/***/ })

};
;