"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/request";
exports.ids = ["vendor-chunks/request"];
exports.modules = {

/***/ "(action-browser)/./node_modules/request/index.js":
/*!***************************************!*\
  !*** ./node_modules/request/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2010-2012 Mikeal Rogers\n//\n//    Licensed under the Apache License, Version 2.0 (the \"License\");\n//    you may not use this file except in compliance with the License.\n//    You may obtain a copy of the License at\n//\n//        http://www.apache.org/licenses/LICENSE-2.0\n//\n//    Unless required by applicable law or agreed to in writing, software\n//    distributed under the License is distributed on an \"AS IS\" BASIS,\n//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//    See the License for the specific language governing permissions and\n//    limitations under the License.\n\nvar extend = __webpack_require__(/*! extend */ \"(action-browser)/./node_modules/extend/index.js\");\nvar cookies = __webpack_require__(/*! ./lib/cookies */ \"(action-browser)/./node_modules/request/lib/cookies.js\");\nvar helpers = __webpack_require__(/*! ./lib/helpers */ \"(action-browser)/./node_modules/request/lib/helpers.js\");\nvar paramsHaveRequestBody = helpers.paramsHaveRequestBody;\n// organize params for patch, post, put, head, del\nfunction initParams(uri, options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n    }\n    var params = {};\n    if (options !== null && typeof options === \"object\") {\n        extend(params, options, {\n            uri: uri\n        });\n    } else if (typeof uri === \"string\") {\n        extend(params, {\n            uri: uri\n        });\n    } else {\n        extend(params, uri);\n    }\n    params.callback = callback || params.callback;\n    return params;\n}\nfunction request(uri, options, callback) {\n    if (typeof uri === \"undefined\") {\n        throw new Error(\"undefined is not a valid uri or options object.\");\n    }\n    var params = initParams(uri, options, callback);\n    if (params.method === \"HEAD\" && paramsHaveRequestBody(params)) {\n        throw new Error(\"HTTP HEAD requests MUST NOT include a request body.\");\n    }\n    return new request.Request(params);\n}\nfunction verbFunc(verb) {\n    var method = verb.toUpperCase();\n    return function(uri, options, callback) {\n        var params = initParams(uri, options, callback);\n        params.method = method;\n        return request(params, params.callback);\n    };\n}\n// define like this to please codeintel/intellisense IDEs\nrequest.get = verbFunc(\"get\");\nrequest.head = verbFunc(\"head\");\nrequest.options = verbFunc(\"options\");\nrequest.post = verbFunc(\"post\");\nrequest.put = verbFunc(\"put\");\nrequest.patch = verbFunc(\"patch\");\nrequest.del = verbFunc(\"delete\");\nrequest[\"delete\"] = verbFunc(\"delete\");\nrequest.jar = function(store) {\n    return cookies.jar(store);\n};\nrequest.cookie = function(str) {\n    return cookies.parse(str);\n};\nfunction wrapRequestMethod(method, options, requester, verb) {\n    return function(uri, opts, callback) {\n        var params = initParams(uri, opts, callback);\n        var target = {};\n        extend(true, target, options, params);\n        target.pool = params.pool || options.pool;\n        if (verb) {\n            target.method = verb.toUpperCase();\n        }\n        if (typeof requester === \"function\") {\n            method = requester;\n        }\n        return method(target, target.callback);\n    };\n}\nrequest.defaults = function(options, requester) {\n    var self = this;\n    options = options || {};\n    if (typeof options === \"function\") {\n        requester = options;\n        options = {};\n    }\n    var defaults = wrapRequestMethod(self, options, requester);\n    var verbs = [\n        \"get\",\n        \"head\",\n        \"post\",\n        \"put\",\n        \"patch\",\n        \"del\",\n        \"delete\"\n    ];\n    verbs.forEach(function(verb) {\n        defaults[verb] = wrapRequestMethod(self[verb], options, requester, verb);\n    });\n    defaults.cookie = wrapRequestMethod(self.cookie, options, requester);\n    defaults.jar = self.jar;\n    defaults.defaults = self.defaults;\n    return defaults;\n};\nrequest.forever = function(agentOptions, optionsArg) {\n    var options = {};\n    if (optionsArg) {\n        extend(options, optionsArg);\n    }\n    if (agentOptions) {\n        options.agentOptions = agentOptions;\n    }\n    options.forever = true;\n    return request.defaults(options);\n};\n// Exports\nmodule.exports = request;\nrequest.Request = __webpack_require__(/*! ./request */ \"(action-browser)/./node_modules/request/request.js\");\nrequest.initParams = initParams;\n// Backwards compatibility for request.debug\nObject.defineProperty(request, \"debug\", {\n    enumerable: true,\n    get: function() {\n        return request.Request.debug;\n    },\n    set: function(debug) {\n        request.Request.debug = debug;\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZXF1ZXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLG9DQUFvQztBQUNwQyxFQUFFO0FBQ0YscUVBQXFFO0FBQ3JFLHNFQUFzRTtBQUN0RSw2Q0FBNkM7QUFDN0MsRUFBRTtBQUNGLG9EQUFvRDtBQUNwRCxFQUFFO0FBQ0YseUVBQXlFO0FBQ3pFLHVFQUF1RTtBQUN2RSw4RUFBOEU7QUFDOUUseUVBQXlFO0FBQ3pFLG9DQUFvQztBQUVwQztBQUVBLElBQUlBLFNBQVNDLG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlDLFVBQVVELG1CQUFPQSxDQUFDO0FBQ3RCLElBQUlFLFVBQVVGLG1CQUFPQSxDQUFDO0FBRXRCLElBQUlHLHdCQUF3QkQsUUFBUUMscUJBQXFCO0FBRXpELGtEQUFrRDtBQUNsRCxTQUFTQyxXQUFZQyxHQUFHLEVBQUVDLE9BQU8sRUFBRUMsUUFBUTtJQUN6QyxJQUFJLE9BQU9ELFlBQVksWUFBWTtRQUNqQ0MsV0FBV0Q7SUFDYjtJQUVBLElBQUlFLFNBQVMsQ0FBQztJQUNkLElBQUlGLFlBQVksUUFBUSxPQUFPQSxZQUFZLFVBQVU7UUFDbkRQLE9BQU9TLFFBQVFGLFNBQVM7WUFBQ0QsS0FBS0E7UUFBRztJQUNuQyxPQUFPLElBQUksT0FBT0EsUUFBUSxVQUFVO1FBQ2xDTixPQUFPUyxRQUFRO1lBQUNILEtBQUtBO1FBQUc7SUFDMUIsT0FBTztRQUNMTixPQUFPUyxRQUFRSDtJQUNqQjtJQUVBRyxPQUFPRCxRQUFRLEdBQUdBLFlBQVlDLE9BQU9ELFFBQVE7SUFDN0MsT0FBT0M7QUFDVDtBQUVBLFNBQVNDLFFBQVNKLEdBQUcsRUFBRUMsT0FBTyxFQUFFQyxRQUFRO0lBQ3RDLElBQUksT0FBT0YsUUFBUSxhQUFhO1FBQzlCLE1BQU0sSUFBSUssTUFBTTtJQUNsQjtJQUVBLElBQUlGLFNBQVNKLFdBQVdDLEtBQUtDLFNBQVNDO0lBRXRDLElBQUlDLE9BQU9HLE1BQU0sS0FBSyxVQUFVUixz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QUFDMUI7QUFDMUI7QUFFQSxVQUFVO0FBRVZpQyxPQUFPQyxPQUFPLEdBQUcvQjtBQUNqQkEsUUFBUUcsT0FBTyxHQUFHWixtQkFBT0EsQ0FBQztBQUMxQlMsUUFBUUwsVUFBVSxHQUFHQTtBQUVyQiw0Q0FBNEM7QUFDNUNxQyxPQUFPQyxjQUFjLENBQUNqQyxTQUFTLFNBQVM7SUFDdENrQyxZQUFZO0lBQ1ozQixLQUFLO1FBQ0gsT0FBT1AsUUFBUUcsT0FBTyxDQUFDZ0MsS0FBSztJQUM5QjtJQUNBQyxLQUFLLFNBQVVELEtBQUs7UUFDbEJuQyxRQUFRRyxPQUFPLENBQUNnQyxLQUFLLEdBQUdBO0lBQzFCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbm5vdmF0aW9uLWNvYWNoLy4vbm9kZV9tb2R1bGVzL3JlcXVlc3QvaW5kZXguanM/N2RhOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMC0yMDEyIE1pa2VhbCBSb2dlcnNcbi8vXG4vLyAgICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8gICAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gICAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vICAgIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vICAgIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vICAgIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gICAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgZXh0ZW5kID0gcmVxdWlyZSgnZXh0ZW5kJylcbnZhciBjb29raWVzID0gcmVxdWlyZSgnLi9saWIvY29va2llcycpXG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4vbGliL2hlbHBlcnMnKVxuXG52YXIgcGFyYW1zSGF2ZVJlcXVlc3RCb2R5ID0gaGVscGVycy5wYXJhbXNIYXZlUmVxdWVzdEJvZHlcblxuLy8gb3JnYW5pemUgcGFyYW1zIGZvciBwYXRjaCwgcG9zdCwgcHV0LCBoZWFkLCBkZWxcbmZ1bmN0aW9uIGluaXRQYXJhbXMgKHVyaSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBvcHRpb25zXG4gIH1cblxuICB2YXIgcGFyYW1zID0ge31cbiAgaWYgKG9wdGlvbnMgIT09IG51bGwgJiYgdHlwZW9mIG9wdGlvbnMgPT09ICdvYmplY3QnKSB7XG4gICAgZXh0ZW5kKHBhcmFtcywgb3B0aW9ucywge3VyaTogdXJpfSlcbiAgfSBlbHNlIGlmICh0eXBlb2YgdXJpID09PSAnc3RyaW5nJykge1xuICAgIGV4dGVuZChwYXJhbXMsIHt1cmk6IHVyaX0pXG4gIH0gZWxzZSB7XG4gICAgZXh0ZW5kKHBhcmFtcywgdXJpKVxuICB9XG5cbiAgcGFyYW1zLmNhbGxiYWNrID0gY2FsbGJhY2sgfHwgcGFyYW1zLmNhbGxiYWNrXG4gIHJldHVybiBwYXJhbXNcbn1cblxuZnVuY3Rpb24gcmVxdWVzdCAodXJpLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIHVyaSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuZGVmaW5lZCBpcyBub3QgYSB2YWxpZCB1cmkgb3Igb3B0aW9ucyBvYmplY3QuJylcbiAgfVxuXG4gIHZhciBwYXJhbXMgPSBpbml0UGFyYW1zKHVyaSwgb3B0aW9ucywgY2FsbGJhY2spXG5cbiAgaWYgKHBhcmFtcy5tZXRob2QgPT09ICdIRUFEJyAmJiBwYXJhbXNIYXZlUmVxdWVzdEJvZHkocGFyYW1zKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignSFRUUCBIRUFEIHJlcXVlc3RzIE1VU1QgTk9UIGluY2x1ZGUgYSByZXF1ZXN0IGJvZHkuJylcbiAgfVxuXG4gIHJldHVybiBuZXcgcmVxdWVzdC5SZXF1ZXN0KHBhcmFtcylcbn1cblxuZnVuY3Rpb24gdmVyYkZ1bmMgKHZlcmIpIHtcbiAgdmFyIG1ldGhvZCA9IHZlcmIudG9VcHBlckNhc2UoKVxuICByZXR1cm4gZnVuY3Rpb24gKHVyaSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICB2YXIgcGFyYW1zID0gaW5pdFBhcmFtcyh1cmksIG9wdGlvbnMsIGNhbGxiYWNrKVxuICAgIHBhcmFtcy5tZXRob2QgPSBtZXRob2RcbiAgICByZXR1cm4gcmVxdWVzdChwYXJhbXMsIHBhcmFtcy5jYWxsYmFjaylcbiAgfVxufVxuXG4vLyBkZWZpbmUgbGlrZSB0aGlzIHRvIHBsZWFzZSBjb2RlaW50ZWwvaW50ZWxsaXNlbnNlIElERXNcbnJlcXVlc3QuZ2V0ID0gdmVyYkZ1bmMoJ2dldCcpXG5yZXF1ZXN0LmhlYWQgPSB2ZXJiRnVuYygnaGVhZCcpXG5yZXF1ZXN0Lm9wdGlvbnMgPSB2ZXJiRnVuYygnb3B0aW9ucycpXG5yZXF1ZXN0LnBvc3QgPSB2ZXJiRnVuYygncG9zdCcpXG5yZXF1ZXN0LnB1dCA9IHZlcmJGdW5jKCdwdXQnKVxucmVxdWVzdC5wYXRjaCA9IHZlcmJGdW5jKCdwYXRjaCcpXG5yZXF1ZXN0LmRlbCA9IHZlcmJGdW5jKCdkZWxldGUnKVxucmVxdWVzdFsnZGVsZXRlJ10gPSB2ZXJiRnVuYygnZGVsZXRlJylcblxucmVxdWVzdC5qYXIgPSBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgcmV0dXJuIGNvb2tpZXMuamFyKHN0b3JlKVxufVxuXG5yZXF1ZXN0LmNvb2tpZSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIGNvb2tpZXMucGFyc2Uoc3RyKVxufVxuXG5mdW5jdGlvbiB3cmFwUmVxdWVzdE1ldGhvZCAobWV0aG9kLCBvcHRpb25zLCByZXF1ZXN0ZXIsIHZlcmIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh1cmksIG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHBhcmFtcyA9IGluaXRQYXJhbXModXJpLCBvcHRzLCBjYWxsYmFjaylcblxuICAgIHZhciB0YXJnZXQgPSB7fVxuICAgIGV4dGVuZCh0cnVlLCB0YXJnZXQsIG9wdGlvbnMsIHBhcmFtcylcblxuICAgIHRhcmdldC5wb29sID0gcGFyYW1zLnBvb2wgfHwgb3B0aW9ucy5wb29sXG5cbiAgICBpZiAodmVyYikge1xuICAgICAgdGFyZ2V0Lm1ldGhvZCA9IHZlcmIudG9VcHBlckNhc2UoKVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVxdWVzdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBtZXRob2QgPSByZXF1ZXN0ZXJcbiAgICB9XG5cbiAgICByZXR1cm4gbWV0aG9kKHRhcmdldCwgdGFyZ2V0LmNhbGxiYWNrKVxuICB9XG59XG5cbnJlcXVlc3QuZGVmYXVsdHMgPSBmdW5jdGlvbiAob3B0aW9ucywgcmVxdWVzdGVyKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmVxdWVzdGVyID0gb3B0aW9uc1xuICAgIG9wdGlvbnMgPSB7fVxuICB9XG5cbiAgdmFyIGRlZmF1bHRzID0gd3JhcFJlcXVlc3RNZXRob2Qoc2VsZiwgb3B0aW9ucywgcmVxdWVzdGVyKVxuXG4gIHZhciB2ZXJicyA9IFsnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnZGVsJywgJ2RlbGV0ZSddXG4gIHZlcmJzLmZvckVhY2goZnVuY3Rpb24gKHZlcmIpIHtcbiAgICBkZWZhdWx0c1t2ZXJiXSA9IHdyYXBSZXF1ZXN0TWV0aG9kKHNlbGZbdmVyYl0sIG9wdGlvbnMsIHJlcXVlc3RlciwgdmVyYilcbiAgfSlcblxuICBkZWZhdWx0cy5jb29raWUgPSB3cmFwUmVxdWVzdE1ldGhvZChzZWxmLmNvb2tpZSwgb3B0aW9ucywgcmVxdWVzdGVyKVxuICBkZWZhdWx0cy5qYXIgPSBzZWxmLmphclxuICBkZWZhdWx0cy5kZWZhdWx0cyA9IHNlbGYuZGVmYXVsdHNcbiAgcmV0dXJuIGRlZmF1bHRzXG59XG5cbnJlcXVlc3QuZm9yZXZlciA9IGZ1bmN0aW9uIChhZ2VudE9wdGlvbnMsIG9wdGlvbnNBcmcpIHtcbiAgdmFyIG9wdGlvbnMgPSB7fVxuICBpZiAob3B0aW9uc0FyZykge1xuICAgIGV4dGVuZChvcHRpb25zLCBvcHRpb25zQXJnKVxuICB9XG4gIGlmIChhZ2VudE9wdGlvbnMpIHtcbiAgICBvcHRpb25zLmFnZW50T3B0aW9ucyA9IGFnZW50T3B0aW9uc1xuICB9XG5cbiAgb3B0aW9ucy5mb3JldmVyID0gdHJ1ZVxuICByZXR1cm4gcmVxdWVzdC5kZWZhdWx0cyhvcHRpb25zKVxufVxuXG4vLyBFeHBvcnRzXG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWVzdFxucmVxdWVzdC5SZXF1ZXN0ID0gcmVxdWlyZSgnLi9yZXF1ZXN0JylcbnJlcXVlc3QuaW5pdFBhcmFtcyA9IGluaXRQYXJhbXNcblxuLy8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHkgZm9yIHJlcXVlc3QuZGVidWdcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1ZXN0LCAnZGVidWcnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiByZXF1ZXN0LlJlcXVlc3QuZGVidWdcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoZGVidWcpIHtcbiAgICByZXF1ZXN0LlJlcXVlc3QuZGVidWcgPSBkZWJ1Z1xuICB9XG59KVxuIl0sIm5hbWVzIjpbImV4dGVuZCIsInJlcXVpcmUiLCJjb29raWVzIiwiaGVscGVycyIsInBhcmFtc0hhdmVSZXF1ZXN0Qm9keSIsImluaXRQYXJhbXMiLCJ1cmkiLCJvcHRpb25zIiwiY2FsbGJhY2siLCJwYXJhbXMiLCJyZXF1ZXN0IiwiRXJyb3IiLCJtZXRob2QiLCJSZXF1ZXN0IiwidmVyYkZ1bmMiLCJ2ZXJiIiwidG9VcHBlckNhc2UiLCJnZXQiLCJoZWFkIiwicG9zdCIsInB1dCIsInBhdGNoIiwiZGVsIiwiamFyIiwic3RvcmUiLCJjb29raWUiLCJzdHIiLCJwYXJzZSIsIndyYXBSZXF1ZXN0TWV0aG9kIiwicmVxdWVzdGVyIiwib3B0cyIsInRhcmdldCIsInBvb2wiLCJkZWZhdWx0cyIsInNlbGYiLCJ2ZXJicyIsImZvckVhY2giLCJmb3JldmVyIiwiYWdlbnRPcHRpb25zIiwib3B0aW9uc0FyZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJkZWJ1ZyIsInNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/request/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/request/lib/auth.js":
/*!******************************************!*\
  !*** ./node_modules/request/lib/auth.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar caseless = __webpack_require__(/*! caseless */ \"(action-browser)/./node_modules/caseless/index.js\");\nvar uuid = __webpack_require__(/*! uuid/v4 */ \"(action-browser)/./node_modules/uuid/v4.js\");\nvar helpers = __webpack_require__(/*! ./helpers */ \"(action-browser)/./node_modules/request/lib/helpers.js\");\nvar md5 = helpers.md5;\nvar toBase64 = helpers.toBase64;\nfunction Auth(request) {\n    // define all public properties here\n    this.request = request;\n    this.hasAuth = false;\n    this.sentAuth = false;\n    this.bearerToken = null;\n    this.user = null;\n    this.pass = null;\n}\nAuth.prototype.basic = function(user, pass, sendImmediately) {\n    var self = this;\n    if (typeof user !== \"string\" || pass !== undefined && typeof pass !== \"string\") {\n        self.request.emit(\"error\", new Error(\"auth() received invalid user or password\"));\n    }\n    self.user = user;\n    self.pass = pass;\n    self.hasAuth = true;\n    var header = user + \":\" + (pass || \"\");\n    if (sendImmediately || typeof sendImmediately === \"undefined\") {\n        var authHeader = \"Basic \" + toBase64(header);\n        self.sentAuth = true;\n        return authHeader;\n    }\n};\nAuth.prototype.bearer = function(bearer, sendImmediately) {\n    var self = this;\n    self.bearerToken = bearer;\n    self.hasAuth = true;\n    if (sendImmediately || typeof sendImmediately === \"undefined\") {\n        if (typeof bearer === \"function\") {\n            bearer = bearer();\n        }\n        var authHeader = \"Bearer \" + (bearer || \"\");\n        self.sentAuth = true;\n        return authHeader;\n    }\n};\nAuth.prototype.digest = function(method, path, authHeader) {\n    // TODO: More complete implementation of RFC 2617.\n    //   - handle challenge.domain\n    //   - support qop=\"auth-int\" only\n    //   - handle Authentication-Info (not necessarily?)\n    //   - check challenge.stale (not necessarily?)\n    //   - increase nc (not necessarily?)\n    // For reference:\n    // http://tools.ietf.org/html/rfc2617#section-3\n    // https://github.com/bagder/curl/blob/master/lib/http_digest.c\n    var self = this;\n    var challenge = {};\n    var re = /([a-z0-9_-]+)=(?:\"([^\"]+)\"|([a-z0-9_-]+))/gi;\n    while(true){\n        var match = re.exec(authHeader);\n        if (!match) {\n            break;\n        }\n        challenge[match[1]] = match[2] || match[3];\n    }\n    /**\n   * RFC 2617: handle both MD5 and MD5-sess algorithms.\n   *\n   * If the algorithm directive's value is \"MD5\" or unspecified, then HA1 is\n   *   HA1=MD5(username:realm:password)\n   * If the algorithm directive's value is \"MD5-sess\", then HA1 is\n   *   HA1=MD5(MD5(username:realm:password):nonce:cnonce)\n   */ var ha1Compute = function(algorithm, user, realm, pass, nonce, cnonce) {\n        var ha1 = md5(user + \":\" + realm + \":\" + pass);\n        if (algorithm && algorithm.toLowerCase() === \"md5-sess\") {\n            return md5(ha1 + \":\" + nonce + \":\" + cnonce);\n        } else {\n            return ha1;\n        }\n    };\n    var qop = /(^|,)\\s*auth\\s*($|,)/.test(challenge.qop) && \"auth\";\n    var nc = qop && \"00000001\";\n    var cnonce = qop && uuid().replace(/-/g, \"\");\n    var ha1 = ha1Compute(challenge.algorithm, self.user, challenge.realm, self.pass, challenge.nonce, cnonce);\n    var ha2 = md5(method + \":\" + path);\n    var digestResponse = qop ? md5(ha1 + \":\" + challenge.nonce + \":\" + nc + \":\" + cnonce + \":\" + qop + \":\" + ha2) : md5(ha1 + \":\" + challenge.nonce + \":\" + ha2);\n    var authValues = {\n        username: self.user,\n        realm: challenge.realm,\n        nonce: challenge.nonce,\n        uri: path,\n        qop: qop,\n        response: digestResponse,\n        nc: nc,\n        cnonce: cnonce,\n        algorithm: challenge.algorithm,\n        opaque: challenge.opaque\n    };\n    authHeader = [];\n    for(var k in authValues){\n        if (authValues[k]) {\n            if (k === \"qop\" || k === \"nc\" || k === \"algorithm\") {\n                authHeader.push(k + \"=\" + authValues[k]);\n            } else {\n                authHeader.push(k + '=\"' + authValues[k] + '\"');\n            }\n        }\n    }\n    authHeader = \"Digest \" + authHeader.join(\", \");\n    self.sentAuth = true;\n    return authHeader;\n};\nAuth.prototype.onRequest = function(user, pass, sendImmediately, bearer) {\n    var self = this;\n    var request = self.request;\n    var authHeader;\n    if (bearer === undefined && user === undefined) {\n        self.request.emit(\"error\", new Error(\"no auth mechanism defined\"));\n    } else if (bearer !== undefined) {\n        authHeader = self.bearer(bearer, sendImmediately);\n    } else {\n        authHeader = self.basic(user, pass, sendImmediately);\n    }\n    if (authHeader) {\n        request.setHeader(\"authorization\", authHeader);\n    }\n};\nAuth.prototype.onResponse = function(response) {\n    var self = this;\n    var request = self.request;\n    if (!self.hasAuth || self.sentAuth) {\n        return null;\n    }\n    var c = caseless(response.headers);\n    var authHeader = c.get(\"www-authenticate\");\n    var authVerb = authHeader && authHeader.split(\" \")[0].toLowerCase();\n    request.debug(\"reauth\", authVerb);\n    switch(authVerb){\n        case \"basic\":\n            return self.basic(self.user, self.pass, true);\n        case \"bearer\":\n            return self.bearer(self.bearerToken, true);\n        case \"digest\":\n            return self.digest(request.method, request.path, authHeader);\n    }\n};\nexports.Auth = Auth;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/request/lib/auth.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/request/lib/cookies.js":
/*!*********************************************!*\
  !*** ./node_modules/request/lib/cookies.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar tough = __webpack_require__(/*! tough-cookie */ \"(action-browser)/./node_modules/tough-cookie/lib/cookie.js\");\nvar Cookie = tough.Cookie;\nvar CookieJar = tough.CookieJar;\nexports.parse = function(str) {\n    if (str && str.uri) {\n        str = str.uri;\n    }\n    if (typeof str !== \"string\") {\n        throw new Error(\"The cookie function only accepts STRING as param\");\n    }\n    return Cookie.parse(str, {\n        loose: true\n    });\n};\n// Adapt the sometimes-Async api of tough.CookieJar to our requirements\nfunction RequestJar(store) {\n    var self = this;\n    self._jar = new CookieJar(store, {\n        looseMode: true\n    });\n}\nRequestJar.prototype.setCookie = function(cookieOrStr, uri, options) {\n    var self = this;\n    return self._jar.setCookieSync(cookieOrStr, uri, options || {});\n};\nRequestJar.prototype.getCookieString = function(uri) {\n    var self = this;\n    return self._jar.getCookieStringSync(uri);\n};\nRequestJar.prototype.getCookies = function(uri) {\n    var self = this;\n    return self._jar.getCookiesSync(uri);\n};\nexports.jar = function(store) {\n    return new RequestJar(store);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZXF1ZXN0L2xpYi9jb29raWVzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUM7QUFFcEIsSUFBSUMsU0FBU0YsTUFBTUUsTUFBTTtBQUN6QixJQUFJQyxZQUFZSCxNQUFNRyxTQUFTO0FBRS9CQyxhQUFhLEdBQUcsU0FBVUUsR0FBRztJQUMzQixJQUFJQSxPQUFPQSxJQUFJQyxHQUFHLEVBQUU7UUFDbEJELE1BQU1BLElBQUlDLEdBQUc7SUFDZjtJQUNBLElBQUksT0FBT0QsUUFBUSxVQUFVO1FBQzNCLE1BQU0sSUFBSUUsTUFBTTtJQUNsQjtJQUNBLE9BQU9OLE9BQU9HLEtBQUssQ0FBQ0MsS0FBSztRQUFDRyxPQUFPO0lBQUk7QUFDdkM7QUFFQSx1RUFBdUU7QUFDdkUsU0FBU0MsV0FBWUMsS0FBSztJQUN4QixJQUFJQyxPQUFPLElBQUk7SUFDZkEsS0FBS0MsSUFBSSxHQUFHLElBQUlWLFVBQVVRLE9BQU87UUFBQ0csV0FBVztJQUFJO0FBQ25EO0FBQ0FKLFdBQVdLLFNBQVMsQ0FBQ0MsU0FBUyxHQUFHLFNBQVVDLFdBQVcsRUFBRVYsR0FBRyxFQUFFVyxPQUFPO0lBQ2xFLElBQUlOLE9BQU8sSUFBSTtJQUNmLE9BQU9BLEtBQUtDLElBQUksQ0FBQ00sYUFBYSxDQUFDRixhQUFhVixLQUFLVyxXQUFXLENBQUM7QUFDL0Q7QUFDQVIsV0FBV0ssU0FBUyxDQUFDSyxlQUFlLEdBQUcsU0FBVWIsR0FBRztJQUNsRCxJQUFJSyxPQUFPLElBQUk7SUFDZixPQUFPQSxLQUFLQyxJQUFJLENBQUNRLG1CQUFtQixDQUFDZDtBQUN2QztBQUNBRyxXQUFXSyxTQUFTLENBQUNPLFVBQVUsR0FBRyxTQUFVZixHQUFHO0lBQzdDLElBQUlLLE9BQU8sSUFBSTtJQUNmLE9BQU9BLEtBQUtDLElBQUksQ0FBQ1UsY0FBYyxDQUFDaEI7QUFDbEM7QUFFQUgsV0FBVyxHQUFHLFNBQVVPLEtBQUs7SUFDM0IsT0FBTyxJQUFJRCxXQUFXQztBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2lubm92YXRpb24tY29hY2gvLi9ub2RlX21vZHVsZXMvcmVxdWVzdC9saWIvY29va2llcy5qcz9jMzlhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG52YXIgdG91Z2ggPSByZXF1aXJlKCd0b3VnaC1jb29raWUnKVxuXG52YXIgQ29va2llID0gdG91Z2guQ29va2llXG52YXIgQ29va2llSmFyID0gdG91Z2guQ29va2llSmFyXG5cbmV4cG9ydHMucGFyc2UgPSBmdW5jdGlvbiAoc3RyKSB7XG4gIGlmIChzdHIgJiYgc3RyLnVyaSkge1xuICAgIHN0ciA9IHN0ci51cmlcbiAgfVxuICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBjb29raWUgZnVuY3Rpb24gb25seSBhY2NlcHRzIFNUUklORyBhcyBwYXJhbScpXG4gIH1cbiAgcmV0dXJuIENvb2tpZS5wYXJzZShzdHIsIHtsb29zZTogdHJ1ZX0pXG59XG5cbi8vIEFkYXB0IHRoZSBzb21ldGltZXMtQXN5bmMgYXBpIG9mIHRvdWdoLkNvb2tpZUphciB0byBvdXIgcmVxdWlyZW1lbnRzXG5mdW5jdGlvbiBSZXF1ZXN0SmFyIChzdG9yZSkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgc2VsZi5famFyID0gbmV3IENvb2tpZUphcihzdG9yZSwge2xvb3NlTW9kZTogdHJ1ZX0pXG59XG5SZXF1ZXN0SmFyLnByb3RvdHlwZS5zZXRDb29raWUgPSBmdW5jdGlvbiAoY29va2llT3JTdHIsIHVyaSwgb3B0aW9ucykge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgcmV0dXJuIHNlbGYuX2phci5zZXRDb29raWVTeW5jKGNvb2tpZU9yU3RyLCB1cmksIG9wdGlvbnMgfHwge30pXG59XG5SZXF1ZXN0SmFyLnByb3RvdHlwZS5nZXRDb29raWVTdHJpbmcgPSBmdW5jdGlvbiAodXJpKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICByZXR1cm4gc2VsZi5famFyLmdldENvb2tpZVN0cmluZ1N5bmModXJpKVxufVxuUmVxdWVzdEphci5wcm90b3R5cGUuZ2V0Q29va2llcyA9IGZ1bmN0aW9uICh1cmkpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHJldHVybiBzZWxmLl9qYXIuZ2V0Q29va2llc1N5bmModXJpKVxufVxuXG5leHBvcnRzLmphciA9IGZ1bmN0aW9uIChzdG9yZSkge1xuICByZXR1cm4gbmV3IFJlcXVlc3RKYXIoc3RvcmUpXG59XG4iXSwibmFtZXMiOlsidG91Z2giLCJyZXF1aXJlIiwiQ29va2llIiwiQ29va2llSmFyIiwiZXhwb3J0cyIsInBhcnNlIiwic3RyIiwidXJpIiwiRXJyb3IiLCJsb29zZSIsIlJlcXVlc3RKYXIiLCJzdG9yZSIsInNlbGYiLCJfamFyIiwibG9vc2VNb2RlIiwicHJvdG90eXBlIiwic2V0Q29va2llIiwiY29va2llT3JTdHIiLCJvcHRpb25zIiwic2V0Q29va2llU3luYyIsImdldENvb2tpZVN0cmluZyIsImdldENvb2tpZVN0cmluZ1N5bmMiLCJnZXRDb29raWVzIiwiZ2V0Q29va2llc1N5bmMiLCJqYXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/request/lib/cookies.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/request/lib/getProxyFromURI.js":
/*!*****************************************************!*\
  !*** ./node_modules/request/lib/getProxyFromURI.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\nfunction formatHostname(hostname) {\n    // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'\n    return hostname.replace(/^\\.*/, \".\").toLowerCase();\n}\nfunction parseNoProxyZone(zone) {\n    zone = zone.trim().toLowerCase();\n    var zoneParts = zone.split(\":\", 2);\n    var zoneHost = formatHostname(zoneParts[0]);\n    var zonePort = zoneParts[1];\n    var hasPort = zone.indexOf(\":\") > -1;\n    return {\n        hostname: zoneHost,\n        port: zonePort,\n        hasPort: hasPort\n    };\n}\nfunction uriInNoProxy(uri, noProxy) {\n    var port = uri.port || (uri.protocol === \"https:\" ? \"443\" : \"80\");\n    var hostname = formatHostname(uri.hostname);\n    var noProxyList = noProxy.split(\",\");\n    // iterate through the noProxyList until it finds a match.\n    return noProxyList.map(parseNoProxyZone).some(function(noProxyZone) {\n        var isMatchedAt = hostname.indexOf(noProxyZone.hostname);\n        var hostnameMatched = isMatchedAt > -1 && isMatchedAt === hostname.length - noProxyZone.hostname.length;\n        if (noProxyZone.hasPort) {\n            return port === noProxyZone.port && hostnameMatched;\n        }\n        return hostnameMatched;\n    });\n}\nfunction getProxyFromURI(uri) {\n    // Decide the proper request proxy to use based on the request URI object and the\n    // environmental variables (NO_PROXY, HTTP_PROXY, etc.)\n    // respect NO_PROXY environment variables (see: https://lynx.invisible-island.net/lynx2.8.7/breakout/lynx_help/keystrokes/environments.html)\n    var noProxy = process.env.NO_PROXY || process.env.no_proxy || \"\";\n    // if the noProxy is a wildcard then return null\n    if (noProxy === \"*\") {\n        return null;\n    }\n    // if the noProxy is not empty and the uri is found return null\n    if (noProxy !== \"\" && uriInNoProxy(uri, noProxy)) {\n        return null;\n    }\n    // Check for HTTP or HTTPS Proxy in environment Else default to null\n    if (uri.protocol === \"http:\") {\n        return process.env.HTTP_PROXY || process.env.http_proxy || null;\n    }\n    if (uri.protocol === \"https:\") {\n        return process.env.HTTPS_PROXY || process.env.https_proxy || process.env.HTTP_PROXY || process.env.http_proxy || null;\n    }\n    // if none of that works, return null\n    // (What uri protocol are you using then?)\n    return null;\n}\nmodule.exports = getProxyFromURI;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZXF1ZXN0L2xpYi9nZXRQcm94eUZyb21VUkkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxTQUFTQSxlQUFnQkMsUUFBUTtJQUMvQiwwRUFBMEU7SUFDMUUsT0FBT0EsU0FBU0MsT0FBTyxDQUFDLFFBQVEsS0FBS0MsV0FBVztBQUNsRDtBQUVBLFNBQVNDLGlCQUFrQkMsSUFBSTtJQUM3QkEsT0FBT0EsS0FBS0MsSUFBSSxHQUFHSCxXQUFXO0lBRTlCLElBQUlJLFlBQVlGLEtBQUtHLEtBQUssQ0FBQyxLQUFLO0lBQ2hDLElBQUlDLFdBQVdULGVBQWVPLFNBQVMsQ0FBQyxFQUFFO0lBQzFDLElBQUlHLFdBQVdILFNBQVMsQ0FBQyxFQUFFO0lBQzNCLElBQUlJLFVBQVVOLEtBQUtPLE9BQU8sQ0FBQyxPQUFPLENBQUM7SUFFbkMsT0FBTztRQUFDWCxVQUFVUTtRQUFVSSxNQUFNSDtRQUFVQyxTQUFTQTtJQUFPO0FBQzlEO0FBRUEsU0FBU0csYUFBY0MsR0FBRyxFQUFFQyxPQUFPO0lBQ2pDLElBQUlILE9BQU9FLElBQUlGLElBQUksSUFBS0UsQ0FBQUEsSUFBSUUsUUFBUSxLQUFLLFdBQVcsUUFBUSxJQUFHO0lBQy9ELElBQUloQixXQUFXRCxlQUFlZSxJQUFJZCxRQUFRO0lBQzFDLElBQUlpQixjQUFjRixRQUFRUixLQUFLLENBQUM7SUFFaEMsMERBQTBEO0lBQzFELE9BQU9VLFlBQVlDLEdBQUcsQ0FBQ2Ysa0JBQWtCZ0IsSUFBSSxDQUFDLFNBQVVDLFdBQVc7UUFDakUsSUFBSUMsY0FBY3JCLFNBQVNXLE9BQU8sQ0FBQ1MsWUFBWXBCLFFBQVE7UUFDdkQsSUFBSXNCLGtCQUNGRCxjQUFjLENBQUMsS0FDWkEsZ0JBQWdCckIsU0FBU3VCLE1BQU0sR0FBR0gsWUFBWXBCLFFBQVEsQ0FBQ3VCLE1BQU07UUFHbEUsSUFBSUgsWUFBWVYsT0FBTyxFQUFFO1lBQ3ZCLE9BQU8sU0FBVVUsWUFBWVIsSUFBSSxJQUFLVTtRQUN4QztRQUVBLE9BQU9BO0lBQ1Q7QUFDRjtBQUVBLFNBQVNFLGdCQUFpQlYsR0FBRztJQUMzQixpRkFBaUY7SUFDakYsdURBQXVEO0lBQ3ZELDRJQUE0STtJQUU1SSxJQUFJQyxVQUFVVSxRQUFRQyxHQUFHLENBQUNDLFFBQVEsSUFBSUYsUUFBUUMsR0FBRyxDQUFDRSxRQUFRLElBQUk7SUFFOUQsZ0RBQWdEO0lBRWhELElBQUliLFlBQVksS0FBSztRQUNuQixPQUFPO0lBQ1Q7SUFFQSwrREFBK0Q7SUFFL0QsSUFBSUEsWUFBWSxNQUFNRixhQUFhQyxLQUFLQyxVQUFVO1FBQ2hELE9BQU87SUFDVDtJQUVBLG9FQUFvRTtJQUVwRSxJQUFJRCxJQUFJRSxRQUFRLEtBQUssU0FBUztRQUM1QixPQUFPUyxRQUFRQyxHQUFHLENBQUNHLFVBQVUsSUFDM0JKLFFBQVFDLEdBQUcsQ0FBQ0ksVUFBVSxJQUFJO0lBQzlCO0lBRUEsSUFBSWhCLElBQUlFLFFBQVEsS0FBSyxVQUFVO1FBQzdCLE9BQU9TLFFBQVFDLEdBQUcsQ0FBQ0ssV0FBVyxJQUM1Qk4sUUFBUUMsR0FBRyxDQUFDTSxXQUFXLElBQ3ZCUCxRQUFRQyxHQUFHLENBQUNHLFVBQVUsSUFDdEJKLFFBQVFDLEdBQUcsQ0FBQ0ksVUFBVSxJQUFJO0lBQzlCO0lBRUEscUNBQXFDO0lBQ3JDLDBDQUEwQztJQUUxQyxPQUFPO0FBQ1Q7QUFFQUcsT0FBT0MsT0FBTyxHQUFHViIsInNvdXJjZXMiOlsid2VicGFjazovL2lubm92YXRpb24tY29hY2gvLi9ub2RlX21vZHVsZXMvcmVxdWVzdC9saWIvZ2V0UHJveHlGcm9tVVJJLmpzP2Q4NzIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmZ1bmN0aW9uIGZvcm1hdEhvc3RuYW1lIChob3N0bmFtZSkge1xuICAvLyBjYW5vbmljYWxpemUgdGhlIGhvc3RuYW1lLCBzbyB0aGF0ICdvb2dsZS5jb20nIHdvbid0IG1hdGNoICdnb29nbGUuY29tJ1xuICByZXR1cm4gaG9zdG5hbWUucmVwbGFjZSgvXlxcLiovLCAnLicpLnRvTG93ZXJDYXNlKClcbn1cblxuZnVuY3Rpb24gcGFyc2VOb1Byb3h5Wm9uZSAoem9uZSkge1xuICB6b25lID0gem9uZS50cmltKCkudG9Mb3dlckNhc2UoKVxuXG4gIHZhciB6b25lUGFydHMgPSB6b25lLnNwbGl0KCc6JywgMilcbiAgdmFyIHpvbmVIb3N0ID0gZm9ybWF0SG9zdG5hbWUoem9uZVBhcnRzWzBdKVxuICB2YXIgem9uZVBvcnQgPSB6b25lUGFydHNbMV1cbiAgdmFyIGhhc1BvcnQgPSB6b25lLmluZGV4T2YoJzonKSA+IC0xXG5cbiAgcmV0dXJuIHtob3N0bmFtZTogem9uZUhvc3QsIHBvcnQ6IHpvbmVQb3J0LCBoYXNQb3J0OiBoYXNQb3J0fVxufVxuXG5mdW5jdGlvbiB1cmlJbk5vUHJveHkgKHVyaSwgbm9Qcm94eSkge1xuICB2YXIgcG9ydCA9IHVyaS5wb3J0IHx8ICh1cmkucHJvdG9jb2wgPT09ICdodHRwczonID8gJzQ0MycgOiAnODAnKVxuICB2YXIgaG9zdG5hbWUgPSBmb3JtYXRIb3N0bmFtZSh1cmkuaG9zdG5hbWUpXG4gIHZhciBub1Byb3h5TGlzdCA9IG5vUHJveHkuc3BsaXQoJywnKVxuXG4gIC8vIGl0ZXJhdGUgdGhyb3VnaCB0aGUgbm9Qcm94eUxpc3QgdW50aWwgaXQgZmluZHMgYSBtYXRjaC5cbiAgcmV0dXJuIG5vUHJveHlMaXN0Lm1hcChwYXJzZU5vUHJveHlab25lKS5zb21lKGZ1bmN0aW9uIChub1Byb3h5Wm9uZSkge1xuICAgIHZhciBpc01hdGNoZWRBdCA9IGhvc3RuYW1lLmluZGV4T2Yobm9Qcm94eVpvbmUuaG9zdG5hbWUpXG4gICAgdmFyIGhvc3RuYW1lTWF0Y2hlZCA9IChcbiAgICAgIGlzTWF0Y2hlZEF0ID4gLTEgJiZcbiAgICAgICAgKGlzTWF0Y2hlZEF0ID09PSBob3N0bmFtZS5sZW5ndGggLSBub1Byb3h5Wm9uZS5ob3N0bmFtZS5sZW5ndGgpXG4gICAgKVxuXG4gICAgaWYgKG5vUHJveHlab25lLmhhc1BvcnQpIHtcbiAgICAgIHJldHVybiAocG9ydCA9PT0gbm9Qcm94eVpvbmUucG9ydCkgJiYgaG9zdG5hbWVNYXRjaGVkXG4gICAgfVxuXG4gICAgcmV0dXJuIGhvc3RuYW1lTWF0Y2hlZFxuICB9KVxufVxuXG5mdW5jdGlvbiBnZXRQcm94eUZyb21VUkkgKHVyaSkge1xuICAvLyBEZWNpZGUgdGhlIHByb3BlciByZXF1ZXN0IHByb3h5IHRvIHVzZSBiYXNlZCBvbiB0aGUgcmVxdWVzdCBVUkkgb2JqZWN0IGFuZCB0aGVcbiAgLy8gZW52aXJvbm1lbnRhbCB2YXJpYWJsZXMgKE5PX1BST1hZLCBIVFRQX1BST1hZLCBldGMuKVxuICAvLyByZXNwZWN0IE5PX1BST1hZIGVudmlyb25tZW50IHZhcmlhYmxlcyAoc2VlOiBodHRwczovL2x5bnguaW52aXNpYmxlLWlzbGFuZC5uZXQvbHlueDIuOC43L2JyZWFrb3V0L2x5bnhfaGVscC9rZXlzdHJva2VzL2Vudmlyb25tZW50cy5odG1sKVxuXG4gIHZhciBub1Byb3h5ID0gcHJvY2Vzcy5lbnYuTk9fUFJPWFkgfHwgcHJvY2Vzcy5lbnYubm9fcHJveHkgfHwgJydcblxuICAvLyBpZiB0aGUgbm9Qcm94eSBpcyBhIHdpbGRjYXJkIHRoZW4gcmV0dXJuIG51bGxcblxuICBpZiAobm9Qcm94eSA9PT0gJyonKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIC8vIGlmIHRoZSBub1Byb3h5IGlzIG5vdCBlbXB0eSBhbmQgdGhlIHVyaSBpcyBmb3VuZCByZXR1cm4gbnVsbFxuXG4gIGlmIChub1Byb3h5ICE9PSAnJyAmJiB1cmlJbk5vUHJveHkodXJpLCBub1Byb3h5KSkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICAvLyBDaGVjayBmb3IgSFRUUCBvciBIVFRQUyBQcm94eSBpbiBlbnZpcm9ubWVudCBFbHNlIGRlZmF1bHQgdG8gbnVsbFxuXG4gIGlmICh1cmkucHJvdG9jb2wgPT09ICdodHRwOicpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5lbnYuSFRUUF9QUk9YWSB8fFxuICAgICAgcHJvY2Vzcy5lbnYuaHR0cF9wcm94eSB8fCBudWxsXG4gIH1cblxuICBpZiAodXJpLnByb3RvY29sID09PSAnaHR0cHM6Jykge1xuICAgIHJldHVybiBwcm9jZXNzLmVudi5IVFRQU19QUk9YWSB8fFxuICAgICAgcHJvY2Vzcy5lbnYuaHR0cHNfcHJveHkgfHxcbiAgICAgIHByb2Nlc3MuZW52LkhUVFBfUFJPWFkgfHxcbiAgICAgIHByb2Nlc3MuZW52Lmh0dHBfcHJveHkgfHwgbnVsbFxuICB9XG5cbiAgLy8gaWYgbm9uZSBvZiB0aGF0IHdvcmtzLCByZXR1cm4gbnVsbFxuICAvLyAoV2hhdCB1cmkgcHJvdG9jb2wgYXJlIHlvdSB1c2luZyB0aGVuPylcblxuICByZXR1cm4gbnVsbFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFByb3h5RnJvbVVSSVxuIl0sIm5hbWVzIjpbImZvcm1hdEhvc3RuYW1lIiwiaG9zdG5hbWUiLCJyZXBsYWNlIiwidG9Mb3dlckNhc2UiLCJwYXJzZU5vUHJveHlab25lIiwiem9uZSIsInRyaW0iLCJ6b25lUGFydHMiLCJzcGxpdCIsInpvbmVIb3N0Iiwiem9uZVBvcnQiLCJoYXNQb3J0IiwiaW5kZXhPZiIsInBvcnQiLCJ1cmlJbk5vUHJveHkiLCJ1cmkiLCJub1Byb3h5IiwicHJvdG9jb2wiLCJub1Byb3h5TGlzdCIsIm1hcCIsInNvbWUiLCJub1Byb3h5Wm9uZSIsImlzTWF0Y2hlZEF0IiwiaG9zdG5hbWVNYXRjaGVkIiwibGVuZ3RoIiwiZ2V0UHJveHlGcm9tVVJJIiwicHJvY2VzcyIsImVudiIsIk5PX1BST1hZIiwibm9fcHJveHkiLCJIVFRQX1BST1hZIiwiaHR0cF9wcm94eSIsIkhUVFBTX1BST1hZIiwiaHR0cHNfcHJveHkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/request/lib/getProxyFromURI.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/request/lib/har.js":
/*!*****************************************!*\
  !*** ./node_modules/request/lib/har.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar qs = __webpack_require__(/*! querystring */ \"querystring\");\nvar validate = __webpack_require__(/*! har-validator */ \"(action-browser)/./node_modules/har-validator/lib/promise.js\");\nvar extend = __webpack_require__(/*! extend */ \"(action-browser)/./node_modules/extend/index.js\");\nfunction Har(request) {\n    this.request = request;\n}\nHar.prototype.reducer = function(obj, pair) {\n    // new property ?\n    if (obj[pair.name] === undefined) {\n        obj[pair.name] = pair.value;\n        return obj;\n    }\n    // existing? convert to array\n    var arr = [\n        obj[pair.name],\n        pair.value\n    ];\n    obj[pair.name] = arr;\n    return obj;\n};\nHar.prototype.prep = function(data) {\n    // construct utility properties\n    data.queryObj = {};\n    data.headersObj = {};\n    data.postData.jsonObj = false;\n    data.postData.paramsObj = false;\n    // construct query objects\n    if (data.queryString && data.queryString.length) {\n        data.queryObj = data.queryString.reduce(this.reducer, {});\n    }\n    // construct headers objects\n    if (data.headers && data.headers.length) {\n        // loweCase header keys\n        data.headersObj = data.headers.reduceRight(function(headers, header) {\n            headers[header.name] = header.value;\n            return headers;\n        }, {});\n    }\n    // construct Cookie header\n    if (data.cookies && data.cookies.length) {\n        var cookies = data.cookies.map(function(cookie) {\n            return cookie.name + \"=\" + cookie.value;\n        });\n        if (cookies.length) {\n            data.headersObj.cookie = cookies.join(\"; \");\n        }\n    }\n    // prep body\n    function some(arr) {\n        return arr.some(function(type) {\n            return data.postData.mimeType.indexOf(type) === 0;\n        });\n    }\n    if (some([\n        \"multipart/mixed\",\n        \"multipart/related\",\n        \"multipart/form-data\",\n        \"multipart/alternative\"\n    ])) {\n        // reset values\n        data.postData.mimeType = \"multipart/form-data\";\n    } else if (some([\n        \"application/x-www-form-urlencoded\"\n    ])) {\n        if (!data.postData.params) {\n            data.postData.text = \"\";\n        } else {\n            data.postData.paramsObj = data.postData.params.reduce(this.reducer, {});\n            // always overwrite\n            data.postData.text = qs.stringify(data.postData.paramsObj);\n        }\n    } else if (some([\n        \"text/json\",\n        \"text/x-json\",\n        \"application/json\",\n        \"application/x-json\"\n    ])) {\n        data.postData.mimeType = \"application/json\";\n        if (data.postData.text) {\n            try {\n                data.postData.jsonObj = JSON.parse(data.postData.text);\n            } catch (e) {\n                this.request.debug(e);\n                // force back to text/plain\n                data.postData.mimeType = \"text/plain\";\n            }\n        }\n    }\n    return data;\n};\nHar.prototype.options = function(options) {\n    // skip if no har property defined\n    if (!options.har) {\n        return options;\n    }\n    var har = {};\n    extend(har, options.har);\n    // only process the first entry\n    if (har.log && har.log.entries) {\n        har = har.log.entries[0];\n    }\n    // add optional properties to make validation successful\n    har.url = har.url || options.url || options.uri || options.baseUrl || \"/\";\n    har.httpVersion = har.httpVersion || \"HTTP/1.1\";\n    har.queryString = har.queryString || [];\n    har.headers = har.headers || [];\n    har.cookies = har.cookies || [];\n    har.postData = har.postData || {};\n    har.postData.mimeType = har.postData.mimeType || \"application/octet-stream\";\n    har.bodySize = 0;\n    har.headersSize = 0;\n    har.postData.size = 0;\n    if (!validate.request(har)) {\n        return options;\n    }\n    // clean up and get some utility properties\n    var req = this.prep(har);\n    // construct new options\n    if (req.url) {\n        options.url = req.url;\n    }\n    if (req.method) {\n        options.method = req.method;\n    }\n    if (Object.keys(req.queryObj).length) {\n        options.qs = req.queryObj;\n    }\n    if (Object.keys(req.headersObj).length) {\n        options.headers = req.headersObj;\n    }\n    function test(type) {\n        return req.postData.mimeType.indexOf(type) === 0;\n    }\n    if (test(\"application/x-www-form-urlencoded\")) {\n        options.form = req.postData.paramsObj;\n    } else if (test(\"application/json\")) {\n        if (req.postData.jsonObj) {\n            options.body = req.postData.jsonObj;\n            options.json = true;\n        }\n    } else if (test(\"multipart/form-data\")) {\n        options.formData = {};\n        req.postData.params.forEach(function(param) {\n            var attachment = {};\n            if (!param.fileName && !param.contentType) {\n                options.formData[param.name] = param.value;\n                return;\n            }\n            // attempt to read from disk!\n            if (param.fileName && !param.value) {\n                attachment.value = fs.createReadStream(param.fileName);\n            } else if (param.value) {\n                attachment.value = param.value;\n            }\n            if (param.fileName) {\n                attachment.options = {\n                    filename: param.fileName,\n                    contentType: param.contentType ? param.contentType : null\n                };\n            }\n            options.formData[param.name] = attachment;\n        });\n    } else {\n        if (req.postData.text) {\n            options.body = req.postData.text;\n        }\n    }\n    return options;\n};\nexports.Har = Har;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/request/lib/har.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/request/lib/hawk.js":
/*!******************************************!*\
  !*** ./node_modules/request/lib/hawk.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nfunction randomString(size) {\n    var bits = (size + 1) * 6;\n    var buffer = crypto.randomBytes(Math.ceil(bits / 8));\n    var string = buffer.toString(\"base64\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n    return string.slice(0, size);\n}\nfunction calculatePayloadHash(payload, algorithm, contentType) {\n    var hash = crypto.createHash(algorithm);\n    hash.update(\"hawk.1.payload\\n\");\n    hash.update((contentType ? contentType.split(\";\")[0].trim().toLowerCase() : \"\") + \"\\n\");\n    hash.update(payload || \"\");\n    hash.update(\"\\n\");\n    return hash.digest(\"base64\");\n}\nexports.calculateMac = function(credentials, opts) {\n    var normalized = \"hawk.1.header\\n\" + opts.ts + \"\\n\" + opts.nonce + \"\\n\" + (opts.method || \"\").toUpperCase() + \"\\n\" + opts.resource + \"\\n\" + opts.host.toLowerCase() + \"\\n\" + opts.port + \"\\n\" + (opts.hash || \"\") + \"\\n\";\n    if (opts.ext) {\n        normalized = normalized + opts.ext.replace(\"\\\\\", \"\\\\\\\\\").replace(\"\\n\", \"\\\\n\");\n    }\n    normalized = normalized + \"\\n\";\n    if (opts.app) {\n        normalized = normalized + opts.app + \"\\n\" + (opts.dlg || \"\") + \"\\n\";\n    }\n    var hmac = crypto.createHmac(credentials.algorithm, credentials.key).update(normalized);\n    var digest = hmac.digest(\"base64\");\n    return digest;\n};\nexports.header = function(uri, method, opts) {\n    var timestamp = opts.timestamp || Math.floor((Date.now() + (opts.localtimeOffsetMsec || 0)) / 1000);\n    var credentials = opts.credentials;\n    if (!credentials || !credentials.id || !credentials.key || !credentials.algorithm) {\n        return \"\";\n    }\n    if ([\n        \"sha1\",\n        \"sha256\"\n    ].indexOf(credentials.algorithm) === -1) {\n        return \"\";\n    }\n    var artifacts = {\n        ts: timestamp,\n        nonce: opts.nonce || randomString(6),\n        method: method,\n        resource: uri.pathname + (uri.search || \"\"),\n        host: uri.hostname,\n        port: uri.port || (uri.protocol === \"http:\" ? 80 : 443),\n        hash: opts.hash,\n        ext: opts.ext,\n        app: opts.app,\n        dlg: opts.dlg\n    };\n    if (!artifacts.hash && (opts.payload || opts.payload === \"\")) {\n        artifacts.hash = calculatePayloadHash(opts.payload, credentials.algorithm, opts.contentType);\n    }\n    var mac = exports.calculateMac(credentials, artifacts);\n    var hasExt = artifacts.ext !== null && artifacts.ext !== undefined && artifacts.ext !== \"\";\n    var header = 'Hawk id=\"' + credentials.id + '\", ts=\"' + artifacts.ts + '\", nonce=\"' + artifacts.nonce + (artifacts.hash ? '\", hash=\"' + artifacts.hash : \"\") + (hasExt ? '\", ext=\"' + artifacts.ext.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') : \"\") + '\", mac=\"' + mac + '\"';\n    if (artifacts.app) {\n        header = header + ', app=\"' + artifacts.app + (artifacts.dlg ? '\", dlg=\"' + artifacts.dlg : \"\") + '\"';\n    }\n    return header;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/request/lib/hawk.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/request/lib/helpers.js":
/*!*********************************************!*\
  !*** ./node_modules/request/lib/helpers.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar jsonSafeStringify = __webpack_require__(/*! json-stringify-safe */ \"(action-browser)/./node_modules/json-stringify-safe/stringify.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"(action-browser)/./node_modules/safe-buffer/index.js\").Buffer);\nvar defer = typeof setImmediate === \"undefined\" ? process.nextTick : setImmediate;\nfunction paramsHaveRequestBody(params) {\n    return params.body || params.requestBodyStream || params.json && typeof params.json !== \"boolean\" || params.multipart;\n}\nfunction safeStringify(obj, replacer) {\n    var ret;\n    try {\n        ret = JSON.stringify(obj, replacer);\n    } catch (e) {\n        ret = jsonSafeStringify(obj, replacer);\n    }\n    return ret;\n}\nfunction md5(str) {\n    return crypto.createHash(\"md5\").update(str).digest(\"hex\");\n}\nfunction isReadStream(rs) {\n    return rs.readable && rs.path && rs.mode;\n}\nfunction toBase64(str) {\n    return Buffer.from(str || \"\", \"utf8\").toString(\"base64\");\n}\nfunction copy(obj) {\n    var o = {};\n    Object.keys(obj).forEach(function(i) {\n        o[i] = obj[i];\n    });\n    return o;\n}\nfunction version() {\n    var numbers = process.version.replace(\"v\", \"\").split(\".\");\n    return {\n        major: parseInt(numbers[0], 10),\n        minor: parseInt(numbers[1], 10),\n        patch: parseInt(numbers[2], 10)\n    };\n}\nexports.paramsHaveRequestBody = paramsHaveRequestBody;\nexports.safeStringify = safeStringify;\nexports.md5 = md5;\nexports.isReadStream = isReadStream;\nexports.toBase64 = toBase64;\nexports.copy = copy;\nexports.version = version;\nexports.defer = defer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZXF1ZXN0L2xpYi9oZWxwZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsb0JBQW9CQyxtQkFBT0EsQ0FBQztBQUNoQyxJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJRSxTQUFTRix1R0FBNkI7QUFFMUMsSUFBSUcsUUFBUSxPQUFPQyxpQkFBaUIsY0FDaENDLFFBQVFDLFFBQVEsR0FDaEJGO0FBRUosU0FBU0csc0JBQXVCQyxNQUFNO0lBQ3BDLE9BQ0VBLE9BQU9DLElBQUksSUFDWEQsT0FBT0UsaUJBQWlCLElBQ3ZCRixPQUFPRyxJQUFJLElBQUksT0FBT0gsT0FBT0csSUFBSSxLQUFLLGFBQ3ZDSCxPQUFPSSxTQUFTO0FBRXBCO0FBRUEsU0FBU0MsY0FBZUMsR0FBRyxFQUFFQyxRQUFRO0lBQ25DLElBQUlDO0lBQ0osSUFBSTtRQUNGQSxNQUFNQyxLQUFLQyxTQUFTLENBQUNKLEtBQUtDO0lBQzVCLEVBQUUsT0FBT0ksR0FBRztRQUNWSCxNQUFNakIsa0JBQWtCZSxLQUFLQztJQUMvQjtJQUNBLE9BQU9DO0FBQ1Q7QUFFQSxTQUFTSSxJQUFLQyxHQUFHO0lBQ2YsT0FBT3BCLE9BQU9xQixVQUFVLENBQUMsT0FBT0MsTUFBTSxDQUFDRixLQUFLRyxNQUFNLENBQUM7QUFDckQ7QUFFQSxTQUFTQyxhQUFjQyxFQUFFO0lBQ3ZCLE9BQU9BLEdBQUdDLFFBQVEsSUFBSUQsR0FBR0UsSUFBSSxJQUFJRixHQUFHRyxJQUFJO0FBQzFDO0FBRUEsU0FBU0MsU0FBVVQsR0FBRztJQUNwQixPQUFPbkIsT0FBTzZCLElBQUksQ0FBQ1YsT0FBTyxJQUFJLFFBQVFXLFFBQVEsQ0FBQztBQUNqRDtBQUVBLFNBQVNDLEtBQU1uQixHQUFHO0lBQ2hCLElBQUlvQixJQUFJLENBQUM7SUFDVEMsT0FBT0MsSUFBSSxDQUFDdEIsS0FBS3VCLE9BQU8sQ0FBQyxTQUFVQyxDQUFDO1FBQ2xDSixDQUFDLENBQUNJLEVBQUUsR0FBR3hCLEdBQUcsQ0FBQ3dCLEVBQUU7SUFDZjtJQUNBLE9BQU9KO0FBQ1Q7QUFFQSxTQUFTSztJQUNQLElBQUlDLFVBQVVuQyxRQUFRa0MsT0FBTyxDQUFDRSxPQUFPLENBQUMsS0FBSyxJQUFJQyxLQUFLLENBQUM7SUFDckQsT0FBTztRQUNMQyxPQUFPQyxTQUFTSixPQUFPLENBQUMsRUFBRSxFQUFFO1FBQzVCSyxPQUFPRCxTQUFTSixPQUFPLENBQUMsRUFBRSxFQUFFO1FBQzVCTSxPQUFPRixTQUFTSixPQUFPLENBQUMsRUFBRSxFQUFFO0lBQzlCO0FBQ0Y7QUFFQU8sNkJBQTZCLEdBQUd4QztBQUNoQ3dDLHFCQUFxQixHQUFHbEM7QUFDeEJrQyxXQUFXLEdBQUczQjtBQUNkMkIsb0JBQW9CLEdBQUd0QjtBQUN2QnNCLGdCQUFnQixHQUFHakI7QUFDbkJpQixZQUFZLEdBQUdkO0FBQ2ZjLGVBQWUsR0FBR1I7QUFDbEJRLGFBQWEsR0FBRzVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW5ub3ZhdGlvbi1jb2FjaC8uL25vZGVfbW9kdWxlcy9yZXF1ZXN0L2xpYi9oZWxwZXJzLmpzP2QxMDQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbnZhciBqc29uU2FmZVN0cmluZ2lmeSA9IHJlcXVpcmUoJ2pzb24tc3RyaW5naWZ5LXNhZmUnKVxudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIGRlZmVyID0gdHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ3VuZGVmaW5lZCdcbiAgPyBwcm9jZXNzLm5leHRUaWNrXG4gIDogc2V0SW1tZWRpYXRlXG5cbmZ1bmN0aW9uIHBhcmFtc0hhdmVSZXF1ZXN0Qm9keSAocGFyYW1zKSB7XG4gIHJldHVybiAoXG4gICAgcGFyYW1zLmJvZHkgfHxcbiAgICBwYXJhbXMucmVxdWVzdEJvZHlTdHJlYW0gfHxcbiAgICAocGFyYW1zLmpzb24gJiYgdHlwZW9mIHBhcmFtcy5qc29uICE9PSAnYm9vbGVhbicpIHx8XG4gICAgcGFyYW1zLm11bHRpcGFydFxuICApXG59XG5cbmZ1bmN0aW9uIHNhZmVTdHJpbmdpZnkgKG9iaiwgcmVwbGFjZXIpIHtcbiAgdmFyIHJldFxuICB0cnkge1xuICAgIHJldCA9IEpTT04uc3RyaW5naWZ5KG9iaiwgcmVwbGFjZXIpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXQgPSBqc29uU2FmZVN0cmluZ2lmeShvYmosIHJlcGxhY2VyKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbWQ1IChzdHIpIHtcbiAgcmV0dXJuIGNyeXB0by5jcmVhdGVIYXNoKCdtZDUnKS51cGRhdGUoc3RyKS5kaWdlc3QoJ2hleCcpXG59XG5cbmZ1bmN0aW9uIGlzUmVhZFN0cmVhbSAocnMpIHtcbiAgcmV0dXJuIHJzLnJlYWRhYmxlICYmIHJzLnBhdGggJiYgcnMubW9kZVxufVxuXG5mdW5jdGlvbiB0b0Jhc2U2NCAoc3RyKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShzdHIgfHwgJycsICd1dGY4JykudG9TdHJpbmcoJ2Jhc2U2NCcpXG59XG5cbmZ1bmN0aW9uIGNvcHkgKG9iaikge1xuICB2YXIgbyA9IHt9XG4gIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoaSkge1xuICAgIG9baV0gPSBvYmpbaV1cbiAgfSlcbiAgcmV0dXJuIG9cbn1cblxuZnVuY3Rpb24gdmVyc2lvbiAoKSB7XG4gIHZhciBudW1iZXJzID0gcHJvY2Vzcy52ZXJzaW9uLnJlcGxhY2UoJ3YnLCAnJykuc3BsaXQoJy4nKVxuICByZXR1cm4ge1xuICAgIG1ham9yOiBwYXJzZUludChudW1iZXJzWzBdLCAxMCksXG4gICAgbWlub3I6IHBhcnNlSW50KG51bWJlcnNbMV0sIDEwKSxcbiAgICBwYXRjaDogcGFyc2VJbnQobnVtYmVyc1syXSwgMTApXG4gIH1cbn1cblxuZXhwb3J0cy5wYXJhbXNIYXZlUmVxdWVzdEJvZHkgPSBwYXJhbXNIYXZlUmVxdWVzdEJvZHlcbmV4cG9ydHMuc2FmZVN0cmluZ2lmeSA9IHNhZmVTdHJpbmdpZnlcbmV4cG9ydHMubWQ1ID0gbWQ1XG5leHBvcnRzLmlzUmVhZFN0cmVhbSA9IGlzUmVhZFN0cmVhbVxuZXhwb3J0cy50b0Jhc2U2NCA9IHRvQmFzZTY0XG5leHBvcnRzLmNvcHkgPSBjb3B5XG5leHBvcnRzLnZlcnNpb24gPSB2ZXJzaW9uXG5leHBvcnRzLmRlZmVyID0gZGVmZXJcbiJdLCJuYW1lcyI6WyJqc29uU2FmZVN0cmluZ2lmeSIsInJlcXVpcmUiLCJjcnlwdG8iLCJCdWZmZXIiLCJkZWZlciIsInNldEltbWVkaWF0ZSIsInByb2Nlc3MiLCJuZXh0VGljayIsInBhcmFtc0hhdmVSZXF1ZXN0Qm9keSIsInBhcmFtcyIsImJvZHkiLCJyZXF1ZXN0Qm9keVN0cmVhbSIsImpzb24iLCJtdWx0aXBhcnQiLCJzYWZlU3RyaW5naWZ5Iiwib2JqIiwicmVwbGFjZXIiLCJyZXQiLCJKU09OIiwic3RyaW5naWZ5IiwiZSIsIm1kNSIsInN0ciIsImNyZWF0ZUhhc2giLCJ1cGRhdGUiLCJkaWdlc3QiLCJpc1JlYWRTdHJlYW0iLCJycyIsInJlYWRhYmxlIiwicGF0aCIsIm1vZGUiLCJ0b0Jhc2U2NCIsImZyb20iLCJ0b1N0cmluZyIsImNvcHkiLCJvIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJpIiwidmVyc2lvbiIsIm51bWJlcnMiLCJyZXBsYWNlIiwic3BsaXQiLCJtYWpvciIsInBhcnNlSW50IiwibWlub3IiLCJwYXRjaCIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/request/lib/helpers.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/request/lib/multipart.js":
/*!***********************************************!*\
  !*** ./node_modules/request/lib/multipart.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar uuid = __webpack_require__(/*! uuid/v4 */ \"(action-browser)/./node_modules/uuid/v4.js\");\nvar CombinedStream = __webpack_require__(/*! combined-stream */ \"(action-browser)/./node_modules/combined-stream/lib/combined_stream.js\");\nvar isstream = __webpack_require__(/*! isstream */ \"(action-browser)/./node_modules/isstream/isstream.js\");\nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"(action-browser)/./node_modules/safe-buffer/index.js\").Buffer);\nfunction Multipart(request) {\n    this.request = request;\n    this.boundary = uuid();\n    this.chunked = false;\n    this.body = null;\n}\nMultipart.prototype.isChunked = function(options) {\n    var self = this;\n    var chunked = false;\n    var parts = options.data || options;\n    if (!parts.forEach) {\n        self.request.emit(\"error\", new Error(\"Argument error, options.multipart.\"));\n    }\n    if (options.chunked !== undefined) {\n        chunked = options.chunked;\n    }\n    if (self.request.getHeader(\"transfer-encoding\") === \"chunked\") {\n        chunked = true;\n    }\n    if (!chunked) {\n        parts.forEach(function(part) {\n            if (typeof part.body === \"undefined\") {\n                self.request.emit(\"error\", new Error(\"Body attribute missing in multipart.\"));\n            }\n            if (isstream(part.body)) {\n                chunked = true;\n            }\n        });\n    }\n    return chunked;\n};\nMultipart.prototype.setHeaders = function(chunked) {\n    var self = this;\n    if (chunked && !self.request.hasHeader(\"transfer-encoding\")) {\n        self.request.setHeader(\"transfer-encoding\", \"chunked\");\n    }\n    var header = self.request.getHeader(\"content-type\");\n    if (!header || header.indexOf(\"multipart\") === -1) {\n        self.request.setHeader(\"content-type\", \"multipart/related; boundary=\" + self.boundary);\n    } else {\n        if (header.indexOf(\"boundary\") !== -1) {\n            self.boundary = header.replace(/.*boundary=([^\\s;]+).*/, \"$1\");\n        } else {\n            self.request.setHeader(\"content-type\", header + \"; boundary=\" + self.boundary);\n        }\n    }\n};\nMultipart.prototype.build = function(parts, chunked) {\n    var self = this;\n    var body = chunked ? new CombinedStream() : [];\n    function add(part) {\n        if (typeof part === \"number\") {\n            part = part.toString();\n        }\n        return chunked ? body.append(part) : body.push(Buffer.from(part));\n    }\n    if (self.request.preambleCRLF) {\n        add(\"\\r\\n\");\n    }\n    parts.forEach(function(part) {\n        var preamble = \"--\" + self.boundary + \"\\r\\n\";\n        Object.keys(part).forEach(function(key) {\n            if (key === \"body\") {\n                return;\n            }\n            preamble += key + \": \" + part[key] + \"\\r\\n\";\n        });\n        preamble += \"\\r\\n\";\n        add(preamble);\n        add(part.body);\n        add(\"\\r\\n\");\n    });\n    add(\"--\" + self.boundary + \"--\");\n    if (self.request.postambleCRLF) {\n        add(\"\\r\\n\");\n    }\n    return body;\n};\nMultipart.prototype.onRequest = function(options) {\n    var self = this;\n    var chunked = self.isChunked(options);\n    var parts = options.data || options;\n    self.setHeaders(chunked);\n    self.chunked = chunked;\n    self.body = self.build(parts, chunked);\n};\nexports.Multipart = Multipart;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZXF1ZXN0L2xpYi9tdWx0aXBhcnQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxPQUFPQyxtQkFBT0EsQ0FBQztBQUNuQixJQUFJQyxpQkFBaUJELG1CQUFPQSxDQUFDO0FBQzdCLElBQUlFLFdBQVdGLG1CQUFPQSxDQUFDO0FBQ3ZCLElBQUlHLFNBQVNILHVHQUE2QjtBQUUxQyxTQUFTSSxVQUFXQyxPQUFPO0lBQ3pCLElBQUksQ0FBQ0EsT0FBTyxHQUFHQTtJQUNmLElBQUksQ0FBQ0MsUUFBUSxHQUFHUDtJQUNoQixJQUFJLENBQUNRLE9BQU8sR0FBRztJQUNmLElBQUksQ0FBQ0MsSUFBSSxHQUFHO0FBQ2Q7QUFFQUosVUFBVUssU0FBUyxDQUFDQyxTQUFTLEdBQUcsU0FBVUMsT0FBTztJQUMvQyxJQUFJQyxPQUFPLElBQUk7SUFDZixJQUFJTCxVQUFVO0lBQ2QsSUFBSU0sUUFBUUYsUUFBUUcsSUFBSSxJQUFJSDtJQUU1QixJQUFJLENBQUNFLE1BQU1FLE9BQU8sRUFBRTtRQUNsQkgsS0FBS1AsT0FBTyxDQUFDVyxJQUFJLENBQUMsU0FBUyxJQUFJQyxNQUFNO0lBQ3ZDO0lBRUEsSUFBSU4sUUFBUUosT0FBTyxLQUFLVyxXQUFXO1FBQ2pDWCxVQUFVSSxRQUFRSixPQUFPO0lBQzNCO0lBRUEsSUFBSUssS0FBS1AsT0FBTyxDQUFDYyxTQUFTLENBQUMseUJBQXlCLFdBQVc7UUFDN0RaLFVBQVU7SUFDWjtJQUVBLElBQUksQ0FBQ0EsU0FBUztRQUNaTSxNQUFNRSxPQUFPLENBQUMsU0FBVUssSUFBSTtZQUMxQixJQUFJLE9BQU9BLEtBQUtaLElBQUksS0FBSyxhQUFhO2dCQUNwQ0ksS0FBS1AsT0FBTyxDQUFDVyxJQUFJLENBQUMsU0FBUyxJQUFJQyxNQUFNO1lBQ3ZDO1lBQ0EsSUFBSWYsU0FBU2tCLEtBQUtaLElBQUksR0FBRztnQkFDdkJELFVBQVU7WUFDWjtRQUNGO0lBQ0Y7SUFFQSxPQUFPQTtBQUNUO0FBRUFILFVBQVVLLFNBQVMsQ0FBQ1ksVUFBVSxHQUFHLFNBQVVkLE9BQU87SUFDaEQsSUFBSUssT0FBTyxJQUFJO0lBRWYsSUFBSUwsV0FBVyxDQUFDSyxLQUFLUCxPQUFPLENBQUNpQixTQUFTLENBQUMsc0JBQXNCO1FBQzNEVixLQUFLUCxPQUFPLENBQUNrQixTQUFTLENBQUMscUJBQXFCO0lBQzlDO0lBRUEsSUFBSUMsU0FBU1osS0FBS1AsT0FBTyxDQUFDYyxTQUFTLENBQUM7SUFFcEMsSUFBSSxDQUFDSyxVQUFVQSxPQUFPQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsR0FBRztRQUNqRGIsS0FBS1AsT0FBTyxDQUFDa0IsU0FBUyxDQUFDLGdCQUFnQixpQ0FBaUNYLEtBQUtOLFFBQVE7SUFDdkYsT0FBTztRQUNMLElBQUlrQixPQUFPQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsR0FBRztZQUNyQ2IsS0FBS04sUUFBUSxHQUFHa0IsT0FBT0UsT0FBTyxDQUFDLDBCQUEwQjtRQUMzRCxPQUFPO1lBQ0xkLEtBQUtQLE9BQU8sQ0FBQ2tCLFNBQVMsQ0FBQyxnQkFBZ0JDLFNBQVMsZ0JBQWdCWixLQUFLTixRQUFRO1FBQy9FO0lBQ0Y7QUFDRjtBQUVBRixVQUFVSyxTQUFTLENBQUNrQixLQUFLLEdBQUcsU0FBVWQsS0FBSyxFQUFFTixPQUFPO0lBQ2xELElBQUlLLE9BQU8sSUFBSTtJQUNmLElBQUlKLE9BQU9ELFVBQVUsSUFBSU4sbUJBQW1CLEVBQUU7SUFFOUMsU0FBUzJCLElBQUtSLElBQUk7UUFDaEIsSUFBSSxPQUFPQSxTQUFTLFVBQVU7WUFDNUJBLE9BQU9BLEtBQUtTLFFBQVE7UUFDdEI7UUFDQSxPQUFPdEIsVUFBVUMsS0FBS3NCLE1BQU0sQ0FBQ1YsUUFBUVosS0FBS3VCLElBQUksQ0FBQzVCLE9BQU82QixJQUFJLENBQUNaO0lBQzdEO0lBRUEsSUFBSVIsS0FBS1AsT0FBTyxDQUFDNEIsWUFBWSxFQUFFO1FBQzdCTCxJQUFJO0lBQ047SUFFQWYsTUFBTUUsT0FBTyxDQUFDLFNBQVVLLElBQUk7UUFDMUIsSUFBSWMsV0FBVyxPQUFPdEIsS0FBS04sUUFBUSxHQUFHO1FBQ3RDNkIsT0FBT0MsSUFBSSxDQUFDaEIsTUFBTUwsT0FBTyxDQUFDLFNBQVVzQixHQUFHO1lBQ3JDLElBQUlBLFFBQVEsUUFBUTtnQkFBRTtZQUFPO1lBQzdCSCxZQUFZRyxNQUFNLE9BQU9qQixJQUFJLENBQUNpQixJQUFJLEdBQUc7UUFDdkM7UUFDQUgsWUFBWTtRQUNaTixJQUFJTTtRQUNKTixJQUFJUixLQUFLWixJQUFJO1FBQ2JvQixJQUFJO0lBQ047SUFDQUEsSUFBSSxPQUFPaEIsS0FBS04sUUFBUSxHQUFHO0lBRTNCLElBQUlNLEtBQUtQLE9BQU8sQ0FBQ2lDLGFBQWEsRUFBRTtRQUM5QlYsSUFBSTtJQUNOO0lBRUEsT0FBT3BCO0FBQ1Q7QUFFQUosVUFBVUssU0FBUyxDQUFDOEIsU0FBUyxHQUFHLFNBQVU1QixPQUFPO0lBQy9DLElBQUlDLE9BQU8sSUFBSTtJQUVmLElBQUlMLFVBQVVLLEtBQUtGLFNBQVMsQ0FBQ0M7SUFDN0IsSUFBSUUsUUFBUUYsUUFBUUcsSUFBSSxJQUFJSDtJQUU1QkMsS0FBS1MsVUFBVSxDQUFDZDtJQUNoQkssS0FBS0wsT0FBTyxHQUFHQTtJQUNmSyxLQUFLSixJQUFJLEdBQUdJLEtBQUtlLEtBQUssQ0FBQ2QsT0FBT047QUFDaEM7QUFFQWlDLGlCQUFpQixHQUFHcEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbm5vdmF0aW9uLWNvYWNoLy4vbm9kZV9tb2R1bGVzL3JlcXVlc3QvbGliL211bHRpcGFydC5qcz8wYTEwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG52YXIgdXVpZCA9IHJlcXVpcmUoJ3V1aWQvdjQnKVxudmFyIENvbWJpbmVkU3RyZWFtID0gcmVxdWlyZSgnY29tYmluZWQtc3RyZWFtJylcbnZhciBpc3N0cmVhbSA9IHJlcXVpcmUoJ2lzc3RyZWFtJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5mdW5jdGlvbiBNdWx0aXBhcnQgKHJlcXVlc3QpIHtcbiAgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdFxuICB0aGlzLmJvdW5kYXJ5ID0gdXVpZCgpXG4gIHRoaXMuY2h1bmtlZCA9IGZhbHNlXG4gIHRoaXMuYm9keSA9IG51bGxcbn1cblxuTXVsdGlwYXJ0LnByb3RvdHlwZS5pc0NodW5rZWQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIGNodW5rZWQgPSBmYWxzZVxuICB2YXIgcGFydHMgPSBvcHRpb25zLmRhdGEgfHwgb3B0aW9uc1xuXG4gIGlmICghcGFydHMuZm9yRWFjaCkge1xuICAgIHNlbGYucmVxdWVzdC5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignQXJndW1lbnQgZXJyb3IsIG9wdGlvbnMubXVsdGlwYXJ0LicpKVxuICB9XG5cbiAgaWYgKG9wdGlvbnMuY2h1bmtlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY2h1bmtlZCA9IG9wdGlvbnMuY2h1bmtlZFxuICB9XG5cbiAgaWYgKHNlbGYucmVxdWVzdC5nZXRIZWFkZXIoJ3RyYW5zZmVyLWVuY29kaW5nJykgPT09ICdjaHVua2VkJykge1xuICAgIGNodW5rZWQgPSB0cnVlXG4gIH1cblxuICBpZiAoIWNodW5rZWQpIHtcbiAgICBwYXJ0cy5mb3JFYWNoKGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgICBpZiAodHlwZW9mIHBhcnQuYm9keSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2VsZi5yZXF1ZXN0LmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdCb2R5IGF0dHJpYnV0ZSBtaXNzaW5nIGluIG11bHRpcGFydC4nKSlcbiAgICAgIH1cbiAgICAgIGlmIChpc3N0cmVhbShwYXJ0LmJvZHkpKSB7XG4gICAgICAgIGNodW5rZWQgPSB0cnVlXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHJldHVybiBjaHVua2VkXG59XG5cbk11bHRpcGFydC5wcm90b3R5cGUuc2V0SGVhZGVycyA9IGZ1bmN0aW9uIChjaHVua2VkKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIGlmIChjaHVua2VkICYmICFzZWxmLnJlcXVlc3QuaGFzSGVhZGVyKCd0cmFuc2Zlci1lbmNvZGluZycpKSB7XG4gICAgc2VsZi5yZXF1ZXN0LnNldEhlYWRlcigndHJhbnNmZXItZW5jb2RpbmcnLCAnY2h1bmtlZCcpXG4gIH1cblxuICB2YXIgaGVhZGVyID0gc2VsZi5yZXF1ZXN0LmdldEhlYWRlcignY29udGVudC10eXBlJylcblxuICBpZiAoIWhlYWRlciB8fCBoZWFkZXIuaW5kZXhPZignbXVsdGlwYXJ0JykgPT09IC0xKSB7XG4gICAgc2VsZi5yZXF1ZXN0LnNldEhlYWRlcignY29udGVudC10eXBlJywgJ211bHRpcGFydC9yZWxhdGVkOyBib3VuZGFyeT0nICsgc2VsZi5ib3VuZGFyeSlcbiAgfSBlbHNlIHtcbiAgICBpZiAoaGVhZGVyLmluZGV4T2YoJ2JvdW5kYXJ5JykgIT09IC0xKSB7XG4gICAgICBzZWxmLmJvdW5kYXJ5ID0gaGVhZGVyLnJlcGxhY2UoLy4qYm91bmRhcnk9KFteXFxzO10rKS4qLywgJyQxJylcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi5yZXF1ZXN0LnNldEhlYWRlcignY29udGVudC10eXBlJywgaGVhZGVyICsgJzsgYm91bmRhcnk9JyArIHNlbGYuYm91bmRhcnkpXG4gICAgfVxuICB9XG59XG5cbk11bHRpcGFydC5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbiAocGFydHMsIGNodW5rZWQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBib2R5ID0gY2h1bmtlZCA/IG5ldyBDb21iaW5lZFN0cmVhbSgpIDogW11cblxuICBmdW5jdGlvbiBhZGQgKHBhcnQpIHtcbiAgICBpZiAodHlwZW9mIHBhcnQgPT09ICdudW1iZXInKSB7XG4gICAgICBwYXJ0ID0gcGFydC50b1N0cmluZygpXG4gICAgfVxuICAgIHJldHVybiBjaHVua2VkID8gYm9keS5hcHBlbmQocGFydCkgOiBib2R5LnB1c2goQnVmZmVyLmZyb20ocGFydCkpXG4gIH1cblxuICBpZiAoc2VsZi5yZXF1ZXN0LnByZWFtYmxlQ1JMRikge1xuICAgIGFkZCgnXFxyXFxuJylcbiAgfVxuXG4gIHBhcnRzLmZvckVhY2goZnVuY3Rpb24gKHBhcnQpIHtcbiAgICB2YXIgcHJlYW1ibGUgPSAnLS0nICsgc2VsZi5ib3VuZGFyeSArICdcXHJcXG4nXG4gICAgT2JqZWN0LmtleXMocGFydCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAoa2V5ID09PSAnYm9keScpIHsgcmV0dXJuIH1cbiAgICAgIHByZWFtYmxlICs9IGtleSArICc6ICcgKyBwYXJ0W2tleV0gKyAnXFxyXFxuJ1xuICAgIH0pXG4gICAgcHJlYW1ibGUgKz0gJ1xcclxcbidcbiAgICBhZGQocHJlYW1ibGUpXG4gICAgYWRkKHBhcnQuYm9keSlcbiAgICBhZGQoJ1xcclxcbicpXG4gIH0pXG4gIGFkZCgnLS0nICsgc2VsZi5ib3VuZGFyeSArICctLScpXG5cbiAgaWYgKHNlbGYucmVxdWVzdC5wb3N0YW1ibGVDUkxGKSB7XG4gICAgYWRkKCdcXHJcXG4nKVxuICB9XG5cbiAgcmV0dXJuIGJvZHlcbn1cblxuTXVsdGlwYXJ0LnByb3RvdHlwZS5vblJlcXVlc3QgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICB2YXIgY2h1bmtlZCA9IHNlbGYuaXNDaHVua2VkKG9wdGlvbnMpXG4gIHZhciBwYXJ0cyA9IG9wdGlvbnMuZGF0YSB8fCBvcHRpb25zXG5cbiAgc2VsZi5zZXRIZWFkZXJzKGNodW5rZWQpXG4gIHNlbGYuY2h1bmtlZCA9IGNodW5rZWRcbiAgc2VsZi5ib2R5ID0gc2VsZi5idWlsZChwYXJ0cywgY2h1bmtlZClcbn1cblxuZXhwb3J0cy5NdWx0aXBhcnQgPSBNdWx0aXBhcnRcbiJdLCJuYW1lcyI6WyJ1dWlkIiwicmVxdWlyZSIsIkNvbWJpbmVkU3RyZWFtIiwiaXNzdHJlYW0iLCJCdWZmZXIiLCJNdWx0aXBhcnQiLCJyZXF1ZXN0IiwiYm91bmRhcnkiLCJjaHVua2VkIiwiYm9keSIsInByb3RvdHlwZSIsImlzQ2h1bmtlZCIsIm9wdGlvbnMiLCJzZWxmIiwicGFydHMiLCJkYXRhIiwiZm9yRWFjaCIsImVtaXQiLCJFcnJvciIsInVuZGVmaW5lZCIsImdldEhlYWRlciIsInBhcnQiLCJzZXRIZWFkZXJzIiwiaGFzSGVhZGVyIiwic2V0SGVhZGVyIiwiaGVhZGVyIiwiaW5kZXhPZiIsInJlcGxhY2UiLCJidWlsZCIsImFkZCIsInRvU3RyaW5nIiwiYXBwZW5kIiwicHVzaCIsImZyb20iLCJwcmVhbWJsZUNSTEYiLCJwcmVhbWJsZSIsIk9iamVjdCIsImtleXMiLCJrZXkiLCJwb3N0YW1ibGVDUkxGIiwib25SZXF1ZXN0IiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/request/lib/multipart.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/request/lib/oauth.js":
/*!*******************************************!*\
  !*** ./node_modules/request/lib/oauth.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar url = __webpack_require__(/*! url */ \"url\");\nvar qs = __webpack_require__(/*! qs */ \"(action-browser)/./node_modules/qs/lib/index.js\");\nvar caseless = __webpack_require__(/*! caseless */ \"(action-browser)/./node_modules/caseless/index.js\");\nvar uuid = __webpack_require__(/*! uuid/v4 */ \"(action-browser)/./node_modules/uuid/v4.js\");\nvar oauth = __webpack_require__(/*! oauth-sign */ \"(action-browser)/./node_modules/oauth-sign/index.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"(action-browser)/./node_modules/safe-buffer/index.js\").Buffer);\nfunction OAuth(request) {\n    this.request = request;\n    this.params = null;\n}\nOAuth.prototype.buildParams = function(_oauth, uri, method, query, form, qsLib) {\n    var oa = {};\n    for(var i in _oauth){\n        oa[\"oauth_\" + i] = _oauth[i];\n    }\n    if (!oa.oauth_version) {\n        oa.oauth_version = \"1.0\";\n    }\n    if (!oa.oauth_timestamp) {\n        oa.oauth_timestamp = Math.floor(Date.now() / 1000).toString();\n    }\n    if (!oa.oauth_nonce) {\n        oa.oauth_nonce = uuid().replace(/-/g, \"\");\n    }\n    if (!oa.oauth_signature_method) {\n        oa.oauth_signature_method = \"HMAC-SHA1\";\n    }\n    var consumer_secret_or_private_key = oa.oauth_consumer_secret || oa.oauth_private_key // eslint-disable-line camelcase\n    ;\n    delete oa.oauth_consumer_secret;\n    delete oa.oauth_private_key;\n    var token_secret = oa.oauth_token_secret // eslint-disable-line camelcase\n    ;\n    delete oa.oauth_token_secret;\n    var realm = oa.oauth_realm;\n    delete oa.oauth_realm;\n    delete oa.oauth_transport_method;\n    var baseurl = uri.protocol + \"//\" + uri.host + uri.pathname;\n    var params = qsLib.parse([].concat(query, form, qsLib.stringify(oa)).join(\"&\"));\n    oa.oauth_signature = oauth.sign(oa.oauth_signature_method, method, baseurl, params, consumer_secret_or_private_key, token_secret // eslint-disable-line camelcase\n    );\n    if (realm) {\n        oa.realm = realm;\n    }\n    return oa;\n};\nOAuth.prototype.buildBodyHash = function(_oauth, body) {\n    if ([\n        \"HMAC-SHA1\",\n        \"RSA-SHA1\"\n    ].indexOf(_oauth.signature_method || \"HMAC-SHA1\") < 0) {\n        this.request.emit(\"error\", new Error(\"oauth: \" + _oauth.signature_method + \" signature_method not supported with body_hash signing.\"));\n    }\n    var shasum = crypto.createHash(\"sha1\");\n    shasum.update(body || \"\");\n    var sha1 = shasum.digest(\"hex\");\n    return Buffer.from(sha1, \"hex\").toString(\"base64\");\n};\nOAuth.prototype.concatParams = function(oa, sep, wrap) {\n    wrap = wrap || \"\";\n    var params = Object.keys(oa).filter(function(i) {\n        return i !== \"realm\" && i !== \"oauth_signature\";\n    }).sort();\n    if (oa.realm) {\n        params.splice(0, 0, \"realm\");\n    }\n    params.push(\"oauth_signature\");\n    return params.map(function(i) {\n        return i + \"=\" + wrap + oauth.rfc3986(oa[i]) + wrap;\n    }).join(sep);\n};\nOAuth.prototype.onRequest = function(_oauth) {\n    var self = this;\n    self.params = _oauth;\n    var uri = self.request.uri || {};\n    var method = self.request.method || \"\";\n    var headers = caseless(self.request.headers);\n    var body = self.request.body || \"\";\n    var qsLib = self.request.qsLib || qs;\n    var form;\n    var query;\n    var contentType = headers.get(\"content-type\") || \"\";\n    var formContentType = \"application/x-www-form-urlencoded\";\n    var transport = _oauth.transport_method || \"header\";\n    if (contentType.slice(0, formContentType.length) === formContentType) {\n        contentType = formContentType;\n        form = body;\n    }\n    if (uri.query) {\n        query = uri.query;\n    }\n    if (transport === \"body\" && (method !== \"POST\" || contentType !== formContentType)) {\n        self.request.emit(\"error\", new Error(\"oauth: transport_method of body requires POST \" + \"and content-type \" + formContentType));\n    }\n    if (!form && typeof _oauth.body_hash === \"boolean\") {\n        _oauth.body_hash = self.buildBodyHash(_oauth, self.request.body.toString());\n    }\n    var oa = self.buildParams(_oauth, uri, method, query, form, qsLib);\n    switch(transport){\n        case \"header\":\n            self.request.setHeader(\"Authorization\", \"OAuth \" + self.concatParams(oa, \",\", '\"'));\n            break;\n        case \"query\":\n            var href = self.request.uri.href += (query ? \"&\" : \"?\") + self.concatParams(oa, \"&\");\n            self.request.uri = url.parse(href);\n            self.request.path = self.request.uri.path;\n            break;\n        case \"body\":\n            self.request.body = (form ? form + \"&\" : \"\") + self.concatParams(oa, \"&\");\n            break;\n        default:\n            self.request.emit(\"error\", new Error(\"oauth: transport_method invalid\"));\n    }\n};\nexports.OAuth = OAuth;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/request/lib/oauth.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/request/lib/querystring.js":
/*!*************************************************!*\
  !*** ./node_modules/request/lib/querystring.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar qs = __webpack_require__(/*! qs */ \"(action-browser)/./node_modules/qs/lib/index.js\");\nvar querystring = __webpack_require__(/*! querystring */ \"querystring\");\nfunction Querystring(request) {\n    this.request = request;\n    this.lib = null;\n    this.useQuerystring = null;\n    this.parseOptions = null;\n    this.stringifyOptions = null;\n}\nQuerystring.prototype.init = function(options) {\n    if (this.lib) {\n        return;\n    }\n    this.useQuerystring = options.useQuerystring;\n    this.lib = this.useQuerystring ? querystring : qs;\n    this.parseOptions = options.qsParseOptions || {};\n    this.stringifyOptions = options.qsStringifyOptions || {};\n};\nQuerystring.prototype.stringify = function(obj) {\n    return this.useQuerystring ? this.rfc3986(this.lib.stringify(obj, this.stringifyOptions.sep || null, this.stringifyOptions.eq || null, this.stringifyOptions)) : this.lib.stringify(obj, this.stringifyOptions);\n};\nQuerystring.prototype.parse = function(str) {\n    return this.useQuerystring ? this.lib.parse(str, this.parseOptions.sep || null, this.parseOptions.eq || null, this.parseOptions) : this.lib.parse(str, this.parseOptions);\n};\nQuerystring.prototype.rfc3986 = function(str) {\n    return str.replace(/[!'()*]/g, function(c) {\n        return \"%\" + c.charCodeAt(0).toString(16).toUpperCase();\n    });\n};\nQuerystring.prototype.unescape = querystring.unescape;\nexports.Querystring = Querystring;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZXF1ZXN0L2xpYi9xdWVyeXN0cmluZy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLEtBQUtDLG1CQUFPQSxDQUFDO0FBQ2pCLElBQUlDLGNBQWNELG1CQUFPQSxDQUFDO0FBRTFCLFNBQVNFLFlBQWFDLE9BQU87SUFDM0IsSUFBSSxDQUFDQSxPQUFPLEdBQUdBO0lBQ2YsSUFBSSxDQUFDQyxHQUFHLEdBQUc7SUFDWCxJQUFJLENBQUNDLGNBQWMsR0FBRztJQUN0QixJQUFJLENBQUNDLFlBQVksR0FBRztJQUNwQixJQUFJLENBQUNDLGdCQUFnQixHQUFHO0FBQzFCO0FBRUFMLFlBQVlNLFNBQVMsQ0FBQ0MsSUFBSSxHQUFHLFNBQVVDLE9BQU87SUFDNUMsSUFBSSxJQUFJLENBQUNOLEdBQUcsRUFBRTtRQUFFO0lBQU87SUFFdkIsSUFBSSxDQUFDQyxjQUFjLEdBQUdLLFFBQVFMLGNBQWM7SUFDNUMsSUFBSSxDQUFDRCxHQUFHLEdBQUksSUFBSSxDQUFDQyxjQUFjLEdBQUdKLGNBQWNGO0lBRWhELElBQUksQ0FBQ08sWUFBWSxHQUFHSSxRQUFRQyxjQUFjLElBQUksQ0FBQztJQUMvQyxJQUFJLENBQUNKLGdCQUFnQixHQUFHRyxRQUFRRSxrQkFBa0IsSUFBSSxDQUFDO0FBQ3pEO0FBRUFWLFlBQVlNLFNBQVMsQ0FBQ0ssU0FBUyxHQUFHLFNBQVVDLEdBQUc7SUFDN0MsT0FBTyxJQUFLLENBQUNULGNBQWMsR0FDdkIsSUFBSSxDQUFDVSxPQUFPLENBQUMsSUFBSSxDQUFDWCxHQUFHLENBQUNTLFNBQVMsQ0FBQ0MsS0FDaEMsSUFBSSxDQUFDUCxnQkFBZ0IsQ0FBQ1MsR0FBRyxJQUFJLE1BQzdCLElBQUksQ0FBQ1QsZ0JBQWdCLENBQUNVLEVBQUUsSUFBSSxNQUM1QixJQUFJLENBQUNWLGdCQUFnQixLQUNyQixJQUFJLENBQUNILEdBQUcsQ0FBQ1MsU0FBUyxDQUFDQyxLQUFLLElBQUksQ0FBQ1AsZ0JBQWdCO0FBQ25EO0FBRUFMLFlBQVlNLFNBQVMsQ0FBQ1UsS0FBSyxHQUFHLFNBQVVDLEdBQUc7SUFDekMsT0FBTyxJQUFLLENBQUNkLGNBQWMsR0FDdkIsSUFBSSxDQUFDRCxHQUFHLENBQUNjLEtBQUssQ0FBQ0MsS0FDZixJQUFJLENBQUNiLFlBQVksQ0FBQ1UsR0FBRyxJQUFJLE1BQ3pCLElBQUksQ0FBQ1YsWUFBWSxDQUFDVyxFQUFFLElBQUksTUFDeEIsSUFBSSxDQUFDWCxZQUFZLElBQ2pCLElBQUksQ0FBQ0YsR0FBRyxDQUFDYyxLQUFLLENBQUNDLEtBQUssSUFBSSxDQUFDYixZQUFZO0FBQzNDO0FBRUFKLFlBQVlNLFNBQVMsQ0FBQ08sT0FBTyxHQUFHLFNBQVVJLEdBQUc7SUFDM0MsT0FBT0EsSUFBSUMsT0FBTyxDQUFDLFlBQVksU0FBVUMsQ0FBQztRQUN4QyxPQUFPLE1BQU1BLEVBQUVDLFVBQVUsQ0FBQyxHQUFHQyxRQUFRLENBQUMsSUFBSUMsV0FBVztJQUN2RDtBQUNGO0FBRUF0QixZQUFZTSxTQUFTLENBQUNpQixRQUFRLEdBQUd4QixZQUFZd0IsUUFBUTtBQUVyREMsbUJBQW1CLEdBQUd4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2lubm92YXRpb24tY29hY2gvLi9ub2RlX21vZHVsZXMvcmVxdWVzdC9saWIvcXVlcnlzdHJpbmcuanM/Yjg1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxudmFyIHFzID0gcmVxdWlyZSgncXMnKVxudmFyIHF1ZXJ5c3RyaW5nID0gcmVxdWlyZSgncXVlcnlzdHJpbmcnKVxuXG5mdW5jdGlvbiBRdWVyeXN0cmluZyAocmVxdWVzdCkge1xuICB0aGlzLnJlcXVlc3QgPSByZXF1ZXN0XG4gIHRoaXMubGliID0gbnVsbFxuICB0aGlzLnVzZVF1ZXJ5c3RyaW5nID0gbnVsbFxuICB0aGlzLnBhcnNlT3B0aW9ucyA9IG51bGxcbiAgdGhpcy5zdHJpbmdpZnlPcHRpb25zID0gbnVsbFxufVxuXG5RdWVyeXN0cmluZy5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIGlmICh0aGlzLmxpYikgeyByZXR1cm4gfVxuXG4gIHRoaXMudXNlUXVlcnlzdHJpbmcgPSBvcHRpb25zLnVzZVF1ZXJ5c3RyaW5nXG4gIHRoaXMubGliID0gKHRoaXMudXNlUXVlcnlzdHJpbmcgPyBxdWVyeXN0cmluZyA6IHFzKVxuXG4gIHRoaXMucGFyc2VPcHRpb25zID0gb3B0aW9ucy5xc1BhcnNlT3B0aW9ucyB8fCB7fVxuICB0aGlzLnN0cmluZ2lmeU9wdGlvbnMgPSBvcHRpb25zLnFzU3RyaW5naWZ5T3B0aW9ucyB8fCB7fVxufVxuXG5RdWVyeXN0cmluZy5wcm90b3R5cGUuc3RyaW5naWZ5ID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gKHRoaXMudXNlUXVlcnlzdHJpbmcpXG4gICAgPyB0aGlzLnJmYzM5ODYodGhpcy5saWIuc3RyaW5naWZ5KG9iaixcbiAgICAgIHRoaXMuc3RyaW5naWZ5T3B0aW9ucy5zZXAgfHwgbnVsbCxcbiAgICAgIHRoaXMuc3RyaW5naWZ5T3B0aW9ucy5lcSB8fCBudWxsLFxuICAgICAgdGhpcy5zdHJpbmdpZnlPcHRpb25zKSlcbiAgICA6IHRoaXMubGliLnN0cmluZ2lmeShvYmosIHRoaXMuc3RyaW5naWZ5T3B0aW9ucylcbn1cblxuUXVlcnlzdHJpbmcucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gKHRoaXMudXNlUXVlcnlzdHJpbmcpXG4gICAgPyB0aGlzLmxpYi5wYXJzZShzdHIsXG4gICAgICB0aGlzLnBhcnNlT3B0aW9ucy5zZXAgfHwgbnVsbCxcbiAgICAgIHRoaXMucGFyc2VPcHRpb25zLmVxIHx8IG51bGwsXG4gICAgICB0aGlzLnBhcnNlT3B0aW9ucylcbiAgICA6IHRoaXMubGliLnBhcnNlKHN0ciwgdGhpcy5wYXJzZU9wdGlvbnMpXG59XG5cblF1ZXJ5c3RyaW5nLnByb3RvdHlwZS5yZmMzOTg2ID0gZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1shJygpKl0vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cblF1ZXJ5c3RyaW5nLnByb3RvdHlwZS51bmVzY2FwZSA9IHF1ZXJ5c3RyaW5nLnVuZXNjYXBlXG5cbmV4cG9ydHMuUXVlcnlzdHJpbmcgPSBRdWVyeXN0cmluZ1xuIl0sIm5hbWVzIjpbInFzIiwicmVxdWlyZSIsInF1ZXJ5c3RyaW5nIiwiUXVlcnlzdHJpbmciLCJyZXF1ZXN0IiwibGliIiwidXNlUXVlcnlzdHJpbmciLCJwYXJzZU9wdGlvbnMiLCJzdHJpbmdpZnlPcHRpb25zIiwicHJvdG90eXBlIiwiaW5pdCIsIm9wdGlvbnMiLCJxc1BhcnNlT3B0aW9ucyIsInFzU3RyaW5naWZ5T3B0aW9ucyIsInN0cmluZ2lmeSIsIm9iaiIsInJmYzM5ODYiLCJzZXAiLCJlcSIsInBhcnNlIiwic3RyIiwicmVwbGFjZSIsImMiLCJjaGFyQ29kZUF0IiwidG9TdHJpbmciLCJ0b1VwcGVyQ2FzZSIsInVuZXNjYXBlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/request/lib/querystring.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/request/lib/redirect.js":
/*!**********************************************!*\
  !*** ./node_modules/request/lib/redirect.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar url = __webpack_require__(/*! url */ \"url\");\nvar isUrl = /^https?:/;\nfunction Redirect(request) {\n    this.request = request;\n    this.followRedirect = true;\n    this.followRedirects = true;\n    this.followAllRedirects = false;\n    this.followOriginalHttpMethod = false;\n    this.allowRedirect = function() {\n        return true;\n    };\n    this.maxRedirects = 10;\n    this.redirects = [];\n    this.redirectsFollowed = 0;\n    this.removeRefererHeader = false;\n}\nRedirect.prototype.onRequest = function(options) {\n    var self = this;\n    if (options.maxRedirects !== undefined) {\n        self.maxRedirects = options.maxRedirects;\n    }\n    if (typeof options.followRedirect === \"function\") {\n        self.allowRedirect = options.followRedirect;\n    }\n    if (options.followRedirect !== undefined) {\n        self.followRedirects = !!options.followRedirect;\n    }\n    if (options.followAllRedirects !== undefined) {\n        self.followAllRedirects = options.followAllRedirects;\n    }\n    if (self.followRedirects || self.followAllRedirects) {\n        self.redirects = self.redirects || [];\n    }\n    if (options.removeRefererHeader !== undefined) {\n        self.removeRefererHeader = options.removeRefererHeader;\n    }\n    if (options.followOriginalHttpMethod !== undefined) {\n        self.followOriginalHttpMethod = options.followOriginalHttpMethod;\n    }\n};\nRedirect.prototype.redirectTo = function(response) {\n    var self = this;\n    var request = self.request;\n    var redirectTo = null;\n    if (response.statusCode >= 300 && response.statusCode < 400 && response.caseless.has(\"location\")) {\n        var location = response.caseless.get(\"location\");\n        request.debug(\"redirect\", location);\n        if (self.followAllRedirects) {\n            redirectTo = location;\n        } else if (self.followRedirects) {\n            switch(request.method){\n                case \"PATCH\":\n                case \"PUT\":\n                case \"POST\":\n                case \"DELETE\":\n                    break;\n                default:\n                    redirectTo = location;\n                    break;\n            }\n        }\n    } else if (response.statusCode === 401) {\n        var authHeader = request._auth.onResponse(response);\n        if (authHeader) {\n            request.setHeader(\"authorization\", authHeader);\n            redirectTo = request.uri;\n        }\n    }\n    return redirectTo;\n};\nRedirect.prototype.onResponse = function(response) {\n    var self = this;\n    var request = self.request;\n    var redirectTo = self.redirectTo(response);\n    if (!redirectTo || !self.allowRedirect.call(request, response)) {\n        return false;\n    }\n    request.debug(\"redirect to\", redirectTo);\n    // ignore any potential response body.  it cannot possibly be useful\n    // to us at this point.\n    // response.resume should be defined, but check anyway before calling. Workaround for browserify.\n    if (response.resume) {\n        response.resume();\n    }\n    if (self.redirectsFollowed >= self.maxRedirects) {\n        request.emit(\"error\", new Error(\"Exceeded maxRedirects. Probably stuck in a redirect loop \" + request.uri.href));\n        return false;\n    }\n    self.redirectsFollowed += 1;\n    if (!isUrl.test(redirectTo)) {\n        redirectTo = url.resolve(request.uri.href, redirectTo);\n    }\n    var uriPrev = request.uri;\n    request.uri = url.parse(redirectTo);\n    // handle the case where we change protocol from https to http or vice versa\n    if (request.uri.protocol !== uriPrev.protocol) {\n        delete request.agent;\n    }\n    self.redirects.push({\n        statusCode: response.statusCode,\n        redirectUri: redirectTo\n    });\n    if (self.followAllRedirects && request.method !== \"HEAD\" && response.statusCode !== 401 && response.statusCode !== 307) {\n        request.method = self.followOriginalHttpMethod ? request.method : \"GET\";\n    }\n    // request.method = 'GET' // Force all redirects to use GET || commented out fixes #215\n    delete request.src;\n    delete request.req;\n    delete request._started;\n    if (response.statusCode !== 401 && response.statusCode !== 307) {\n        // Remove parameters from the previous response, unless this is the second request\n        // for a server that requires digest authentication.\n        delete request.body;\n        delete request._form;\n        if (request.headers) {\n            request.removeHeader(\"host\");\n            request.removeHeader(\"content-type\");\n            request.removeHeader(\"content-length\");\n            if (request.uri.hostname !== request.originalHost.split(\":\")[0]) {\n                // Remove authorization if changing hostnames (but not if just\n                // changing ports or protocols).  This matches the behavior of curl:\n                // https://github.com/bagder/curl/blob/6beb0eee/lib/http.c#L710\n                request.removeHeader(\"authorization\");\n            }\n        }\n    }\n    if (!self.removeRefererHeader) {\n        request.setHeader(\"referer\", uriPrev.href);\n    }\n    request.emit(\"redirect\");\n    request.init();\n    return true;\n};\nexports.Redirect = Redirect;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/request/lib/redirect.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/request/lib/tunnel.js":
/*!********************************************!*\
  !*** ./node_modules/request/lib/tunnel.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar url = __webpack_require__(/*! url */ \"url\");\nvar tunnel = __webpack_require__(/*! tunnel-agent */ \"(action-browser)/./node_modules/tunnel-agent/index.js\");\nvar defaultProxyHeaderWhiteList = [\n    \"accept\",\n    \"accept-charset\",\n    \"accept-encoding\",\n    \"accept-language\",\n    \"accept-ranges\",\n    \"cache-control\",\n    \"content-encoding\",\n    \"content-language\",\n    \"content-location\",\n    \"content-md5\",\n    \"content-range\",\n    \"content-type\",\n    \"connection\",\n    \"date\",\n    \"expect\",\n    \"max-forwards\",\n    \"pragma\",\n    \"referer\",\n    \"te\",\n    \"user-agent\",\n    \"via\"\n];\nvar defaultProxyHeaderExclusiveList = [\n    \"proxy-authorization\"\n];\nfunction constructProxyHost(uriObject) {\n    var port = uriObject.port;\n    var protocol = uriObject.protocol;\n    var proxyHost = uriObject.hostname + \":\";\n    if (port) {\n        proxyHost += port;\n    } else if (protocol === \"https:\") {\n        proxyHost += \"443\";\n    } else {\n        proxyHost += \"80\";\n    }\n    return proxyHost;\n}\nfunction constructProxyHeaderWhiteList(headers, proxyHeaderWhiteList) {\n    var whiteList = proxyHeaderWhiteList.reduce(function(set, header) {\n        set[header.toLowerCase()] = true;\n        return set;\n    }, {});\n    return Object.keys(headers).filter(function(header) {\n        return whiteList[header.toLowerCase()];\n    }).reduce(function(set, header) {\n        set[header] = headers[header];\n        return set;\n    }, {});\n}\nfunction constructTunnelOptions(request, proxyHeaders) {\n    var proxy = request.proxy;\n    var tunnelOptions = {\n        proxy: {\n            host: proxy.hostname,\n            port: +proxy.port,\n            proxyAuth: proxy.auth,\n            headers: proxyHeaders\n        },\n        headers: request.headers,\n        ca: request.ca,\n        cert: request.cert,\n        key: request.key,\n        passphrase: request.passphrase,\n        pfx: request.pfx,\n        ciphers: request.ciphers,\n        rejectUnauthorized: request.rejectUnauthorized,\n        secureOptions: request.secureOptions,\n        secureProtocol: request.secureProtocol\n    };\n    return tunnelOptions;\n}\nfunction constructTunnelFnName(uri, proxy) {\n    var uriProtocol = uri.protocol === \"https:\" ? \"https\" : \"http\";\n    var proxyProtocol = proxy.protocol === \"https:\" ? \"Https\" : \"Http\";\n    return [\n        uriProtocol,\n        proxyProtocol\n    ].join(\"Over\");\n}\nfunction getTunnelFn(request) {\n    var uri = request.uri;\n    var proxy = request.proxy;\n    var tunnelFnName = constructTunnelFnName(uri, proxy);\n    return tunnel[tunnelFnName];\n}\nfunction Tunnel(request) {\n    this.request = request;\n    this.proxyHeaderWhiteList = defaultProxyHeaderWhiteList;\n    this.proxyHeaderExclusiveList = [];\n    if (typeof request.tunnel !== \"undefined\") {\n        this.tunnelOverride = request.tunnel;\n    }\n}\nTunnel.prototype.isEnabled = function() {\n    var self = this;\n    var request = self.request;\n    // Tunnel HTTPS by default. Allow the user to override this setting.\n    // If self.tunnelOverride is set (the user specified a value), use it.\n    if (typeof self.tunnelOverride !== \"undefined\") {\n        return self.tunnelOverride;\n    }\n    // If the destination is HTTPS, tunnel.\n    if (request.uri.protocol === \"https:\") {\n        return true;\n    }\n    // Otherwise, do not use tunnel.\n    return false;\n};\nTunnel.prototype.setup = function(options) {\n    var self = this;\n    var request = self.request;\n    options = options || {};\n    if (typeof request.proxy === \"string\") {\n        request.proxy = url.parse(request.proxy);\n    }\n    if (!request.proxy || !request.tunnel) {\n        return false;\n    }\n    // Setup Proxy Header Exclusive List and White List\n    if (options.proxyHeaderWhiteList) {\n        self.proxyHeaderWhiteList = options.proxyHeaderWhiteList;\n    }\n    if (options.proxyHeaderExclusiveList) {\n        self.proxyHeaderExclusiveList = options.proxyHeaderExclusiveList;\n    }\n    var proxyHeaderExclusiveList = self.proxyHeaderExclusiveList.concat(defaultProxyHeaderExclusiveList);\n    var proxyHeaderWhiteList = self.proxyHeaderWhiteList.concat(proxyHeaderExclusiveList);\n    // Setup Proxy Headers and Proxy Headers Host\n    // Only send the Proxy White Listed Header names\n    var proxyHeaders = constructProxyHeaderWhiteList(request.headers, proxyHeaderWhiteList);\n    proxyHeaders.host = constructProxyHost(request.uri);\n    proxyHeaderExclusiveList.forEach(request.removeHeader, request);\n    // Set Agent from Tunnel Data\n    var tunnelFn = getTunnelFn(request);\n    var tunnelOptions = constructTunnelOptions(request, proxyHeaders);\n    request.agent = tunnelFn(tunnelOptions);\n    return true;\n};\nTunnel.defaultProxyHeaderWhiteList = defaultProxyHeaderWhiteList;\nTunnel.defaultProxyHeaderExclusiveList = defaultProxyHeaderExclusiveList;\nexports.Tunnel = Tunnel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/request/lib/tunnel.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/request/request.js":
/*!*****************************************!*\
  !*** ./node_modules/request/request.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar http = __webpack_require__(/*! http */ \"http\");\nvar https = __webpack_require__(/*! https */ \"https\");\nvar url = __webpack_require__(/*! url */ \"url\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar stream = __webpack_require__(/*! stream */ \"stream\");\nvar zlib = __webpack_require__(/*! zlib */ \"zlib\");\nvar aws2 = __webpack_require__(/*! aws-sign2 */ \"(action-browser)/./node_modules/aws-sign2/index.js\");\nvar aws4 = __webpack_require__(/*! aws4 */ \"(action-browser)/./node_modules/aws4/aws4.js\");\nvar httpSignature = __webpack_require__(/*! http-signature */ \"(action-browser)/./node_modules/http-signature/lib/index.js\");\nvar mime = __webpack_require__(/*! mime-types */ \"(action-browser)/./node_modules/mime-types/index.js\");\nvar caseless = __webpack_require__(/*! caseless */ \"(action-browser)/./node_modules/caseless/index.js\");\nvar ForeverAgent = __webpack_require__(/*! forever-agent */ \"(action-browser)/./node_modules/forever-agent/index.js\");\nvar FormData = __webpack_require__(/*! form-data */ \"(action-browser)/./node_modules/form-data/lib/form_data.js\");\nvar extend = __webpack_require__(/*! extend */ \"(action-browser)/./node_modules/extend/index.js\");\nvar isstream = __webpack_require__(/*! isstream */ \"(action-browser)/./node_modules/isstream/isstream.js\");\nvar isTypedArray = (__webpack_require__(/*! is-typedarray */ \"(action-browser)/./node_modules/is-typedarray/index.js\").strict);\nvar helpers = __webpack_require__(/*! ./lib/helpers */ \"(action-browser)/./node_modules/request/lib/helpers.js\");\nvar cookies = __webpack_require__(/*! ./lib/cookies */ \"(action-browser)/./node_modules/request/lib/cookies.js\");\nvar getProxyFromURI = __webpack_require__(/*! ./lib/getProxyFromURI */ \"(action-browser)/./node_modules/request/lib/getProxyFromURI.js\");\nvar Querystring = (__webpack_require__(/*! ./lib/querystring */ \"(action-browser)/./node_modules/request/lib/querystring.js\").Querystring);\nvar Har = (__webpack_require__(/*! ./lib/har */ \"(action-browser)/./node_modules/request/lib/har.js\").Har);\nvar Auth = (__webpack_require__(/*! ./lib/auth */ \"(action-browser)/./node_modules/request/lib/auth.js\").Auth);\nvar OAuth = (__webpack_require__(/*! ./lib/oauth */ \"(action-browser)/./node_modules/request/lib/oauth.js\").OAuth);\nvar hawk = __webpack_require__(/*! ./lib/hawk */ \"(action-browser)/./node_modules/request/lib/hawk.js\");\nvar Multipart = (__webpack_require__(/*! ./lib/multipart */ \"(action-browser)/./node_modules/request/lib/multipart.js\").Multipart);\nvar Redirect = (__webpack_require__(/*! ./lib/redirect */ \"(action-browser)/./node_modules/request/lib/redirect.js\").Redirect);\nvar Tunnel = (__webpack_require__(/*! ./lib/tunnel */ \"(action-browser)/./node_modules/request/lib/tunnel.js\").Tunnel);\nvar now = __webpack_require__(/*! performance-now */ \"(action-browser)/./node_modules/performance-now/lib/performance-now.js\");\nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"(action-browser)/./node_modules/safe-buffer/index.js\").Buffer);\nvar safeStringify = helpers.safeStringify;\nvar isReadStream = helpers.isReadStream;\nvar toBase64 = helpers.toBase64;\nvar defer = helpers.defer;\nvar copy = helpers.copy;\nvar version = helpers.version;\nvar globalCookieJar = cookies.jar();\nvar globalPool = {};\nfunction filterForNonReserved(reserved, options) {\n    // Filter out properties that are not reserved.\n    // Reserved values are passed in at call site.\n    var object = {};\n    for(var i in options){\n        var notReserved = reserved.indexOf(i) === -1;\n        if (notReserved) {\n            object[i] = options[i];\n        }\n    }\n    return object;\n}\nfunction filterOutReservedFunctions(reserved, options) {\n    // Filter out properties that are functions and are reserved.\n    // Reserved values are passed in at call site.\n    var object = {};\n    for(var i in options){\n        var isReserved = !(reserved.indexOf(i) === -1);\n        var isFunction = typeof options[i] === \"function\";\n        if (!(isReserved && isFunction)) {\n            object[i] = options[i];\n        }\n    }\n    return object;\n}\n// Return a simpler request object to allow serialization\nfunction requestToJSON() {\n    var self = this;\n    return {\n        uri: self.uri,\n        method: self.method,\n        headers: self.headers\n    };\n}\n// Return a simpler response object to allow serialization\nfunction responseToJSON() {\n    var self = this;\n    return {\n        statusCode: self.statusCode,\n        body: self.body,\n        headers: self.headers,\n        request: requestToJSON.call(self.request)\n    };\n}\nfunction Request(options) {\n    // if given the method property in options, set property explicitMethod to true\n    // extend the Request instance with any non-reserved properties\n    // remove any reserved functions from the options object\n    // set Request instance to be readable and writable\n    // call init\n    var self = this;\n    // start with HAR, then override with additional options\n    if (options.har) {\n        self._har = new Har(self);\n        options = self._har.options(options);\n    }\n    stream.Stream.call(self);\n    var reserved = Object.keys(Request.prototype);\n    var nonReserved = filterForNonReserved(reserved, options);\n    extend(self, nonReserved);\n    options = filterOutReservedFunctions(reserved, options);\n    self.readable = true;\n    self.writable = true;\n    if (options.method) {\n        self.explicitMethod = true;\n    }\n    self._qs = new Querystring(self);\n    self._auth = new Auth(self);\n    self._oauth = new OAuth(self);\n    self._multipart = new Multipart(self);\n    self._redirect = new Redirect(self);\n    self._tunnel = new Tunnel(self);\n    self.init(options);\n}\nutil.inherits(Request, stream.Stream);\n// Debugging\nRequest.debug = process.env.NODE_DEBUG && /\\brequest\\b/.test(process.env.NODE_DEBUG);\nfunction debug() {\n    if (Request.debug) {\n        console.error(\"REQUEST %s\", util.format.apply(util, arguments));\n    }\n}\nRequest.prototype.debug = debug;\nRequest.prototype.init = function(options) {\n    // init() contains all the code to setup the request object.\n    // the actual outgoing request is not started until start() is called\n    // this function is called from both the constructor and on redirect.\n    var self = this;\n    if (!options) {\n        options = {};\n    }\n    self.headers = self.headers ? copy(self.headers) : {};\n    // Delete headers with value undefined since they break\n    // ClientRequest.OutgoingMessage.setHeader in node 0.12\n    for(var headerName in self.headers){\n        if (typeof self.headers[headerName] === \"undefined\") {\n            delete self.headers[headerName];\n        }\n    }\n    caseless.httpify(self, self.headers);\n    if (!self.method) {\n        self.method = options.method || \"GET\";\n    }\n    if (!self.localAddress) {\n        self.localAddress = options.localAddress;\n    }\n    self._qs.init(options);\n    debug(options);\n    if (!self.pool && self.pool !== false) {\n        self.pool = globalPool;\n    }\n    self.dests = self.dests || [];\n    self.__isRequestRequest = true;\n    // Protect against double callback\n    if (!self._callback && self.callback) {\n        self._callback = self.callback;\n        self.callback = function() {\n            if (self._callbackCalled) {\n                return; // Print a warning maybe?\n            }\n            self._callbackCalled = true;\n            self._callback.apply(self, arguments);\n        };\n        self.on(\"error\", self.callback.bind());\n        self.on(\"complete\", self.callback.bind(self, null));\n    }\n    // People use this property instead all the time, so support it\n    if (!self.uri && self.url) {\n        self.uri = self.url;\n        delete self.url;\n    }\n    // If there's a baseUrl, then use it as the base URL (i.e. uri must be\n    // specified as a relative path and is appended to baseUrl).\n    if (self.baseUrl) {\n        if (typeof self.baseUrl !== \"string\") {\n            return self.emit(\"error\", new Error(\"options.baseUrl must be a string\"));\n        }\n        if (typeof self.uri !== \"string\") {\n            return self.emit(\"error\", new Error(\"options.uri must be a string when using options.baseUrl\"));\n        }\n        if (self.uri.indexOf(\"//\") === 0 || self.uri.indexOf(\"://\") !== -1) {\n            return self.emit(\"error\", new Error(\"options.uri must be a path when using options.baseUrl\"));\n        }\n        // Handle all cases to make sure that there's only one slash between\n        // baseUrl and uri.\n        var baseUrlEndsWithSlash = self.baseUrl.lastIndexOf(\"/\") === self.baseUrl.length - 1;\n        var uriStartsWithSlash = self.uri.indexOf(\"/\") === 0;\n        if (baseUrlEndsWithSlash && uriStartsWithSlash) {\n            self.uri = self.baseUrl + self.uri.slice(1);\n        } else if (baseUrlEndsWithSlash || uriStartsWithSlash) {\n            self.uri = self.baseUrl + self.uri;\n        } else if (self.uri === \"\") {\n            self.uri = self.baseUrl;\n        } else {\n            self.uri = self.baseUrl + \"/\" + self.uri;\n        }\n        delete self.baseUrl;\n    }\n    // A URI is needed by this point, emit error if we haven't been able to get one\n    if (!self.uri) {\n        return self.emit(\"error\", new Error(\"options.uri is a required argument\"));\n    }\n    // If a string URI/URL was given, parse it into a URL object\n    if (typeof self.uri === \"string\") {\n        self.uri = url.parse(self.uri);\n    }\n    // Some URL objects are not from a URL parsed string and need href added\n    if (!self.uri.href) {\n        self.uri.href = url.format(self.uri);\n    }\n    // DEPRECATED: Warning for users of the old Unix Sockets URL Scheme\n    if (self.uri.protocol === \"unix:\") {\n        return self.emit(\"error\", new Error(\"`unix://` URL scheme is no longer supported. Please use the format `http://unix:SOCKET:PATH`\"));\n    }\n    // Support Unix Sockets\n    if (self.uri.host === \"unix\") {\n        self.enableUnixSocket();\n    }\n    if (self.strictSSL === false) {\n        self.rejectUnauthorized = false;\n    }\n    if (!self.uri.pathname) {\n        self.uri.pathname = \"/\";\n    }\n    if (!(self.uri.host || self.uri.hostname && self.uri.port) && !self.uri.isUnix) {\n        // Invalid URI: it may generate lot of bad errors, like 'TypeError: Cannot call method `indexOf` of undefined' in CookieJar\n        // Detect and reject it as soon as possible\n        var faultyUri = url.format(self.uri);\n        var message = 'Invalid URI \"' + faultyUri + '\"';\n        if (Object.keys(options).length === 0) {\n            // No option ? This can be the sign of a redirect\n            // As this is a case where the user cannot do anything (they didn't call request directly with this URL)\n            // they should be warned that it can be caused by a redirection (can save some hair)\n            message += \". This can be caused by a crappy redirection.\";\n        }\n        // This error was fatal\n        self.abort();\n        return self.emit(\"error\", new Error(message));\n    }\n    if (!self.hasOwnProperty(\"proxy\")) {\n        self.proxy = getProxyFromURI(self.uri);\n    }\n    self.tunnel = self._tunnel.isEnabled();\n    if (self.proxy) {\n        self._tunnel.setup(options);\n    }\n    self._redirect.onRequest(options);\n    self.setHost = false;\n    if (!self.hasHeader(\"host\")) {\n        var hostHeaderName = self.originalHostHeaderName || \"host\";\n        self.setHeader(hostHeaderName, self.uri.host);\n        // Drop :port suffix from Host header if known protocol.\n        if (self.uri.port) {\n            if (self.uri.port === \"80\" && self.uri.protocol === \"http:\" || self.uri.port === \"443\" && self.uri.protocol === \"https:\") {\n                self.setHeader(hostHeaderName, self.uri.hostname);\n            }\n        }\n        self.setHost = true;\n    }\n    self.jar(self._jar || options.jar);\n    if (!self.uri.port) {\n        if (self.uri.protocol === \"http:\") {\n            self.uri.port = 80;\n        } else if (self.uri.protocol === \"https:\") {\n            self.uri.port = 443;\n        }\n    }\n    if (self.proxy && !self.tunnel) {\n        self.port = self.proxy.port;\n        self.host = self.proxy.hostname;\n    } else {\n        self.port = self.uri.port;\n        self.host = self.uri.hostname;\n    }\n    if (options.form) {\n        self.form(options.form);\n    }\n    if (options.formData) {\n        var formData = options.formData;\n        var requestForm = self.form();\n        var appendFormValue = function(key, value) {\n            if (value && value.hasOwnProperty(\"value\") && value.hasOwnProperty(\"options\")) {\n                requestForm.append(key, value.value, value.options);\n            } else {\n                requestForm.append(key, value);\n            }\n        };\n        for(var formKey in formData){\n            if (formData.hasOwnProperty(formKey)) {\n                var formValue = formData[formKey];\n                if (formValue instanceof Array) {\n                    for(var j = 0; j < formValue.length; j++){\n                        appendFormValue(formKey, formValue[j]);\n                    }\n                } else {\n                    appendFormValue(formKey, formValue);\n                }\n            }\n        }\n    }\n    if (options.qs) {\n        self.qs(options.qs);\n    }\n    if (self.uri.path) {\n        self.path = self.uri.path;\n    } else {\n        self.path = self.uri.pathname + (self.uri.search || \"\");\n    }\n    if (self.path.length === 0) {\n        self.path = \"/\";\n    }\n    // Auth must happen last in case signing is dependent on other headers\n    if (options.aws) {\n        self.aws(options.aws);\n    }\n    if (options.hawk) {\n        self.hawk(options.hawk);\n    }\n    if (options.httpSignature) {\n        self.httpSignature(options.httpSignature);\n    }\n    if (options.auth) {\n        if (Object.prototype.hasOwnProperty.call(options.auth, \"username\")) {\n            options.auth.user = options.auth.username;\n        }\n        if (Object.prototype.hasOwnProperty.call(options.auth, \"password\")) {\n            options.auth.pass = options.auth.password;\n        }\n        self.auth(options.auth.user, options.auth.pass, options.auth.sendImmediately, options.auth.bearer);\n    }\n    if (self.gzip && !self.hasHeader(\"accept-encoding\")) {\n        self.setHeader(\"accept-encoding\", \"gzip, deflate\");\n    }\n    if (self.uri.auth && !self.hasHeader(\"authorization\")) {\n        var uriAuthPieces = self.uri.auth.split(\":\").map(function(item) {\n            return self._qs.unescape(item);\n        });\n        self.auth(uriAuthPieces[0], uriAuthPieces.slice(1).join(\":\"), true);\n    }\n    if (!self.tunnel && self.proxy && self.proxy.auth && !self.hasHeader(\"proxy-authorization\")) {\n        var proxyAuthPieces = self.proxy.auth.split(\":\").map(function(item) {\n            return self._qs.unescape(item);\n        });\n        var authHeader = \"Basic \" + toBase64(proxyAuthPieces.join(\":\"));\n        self.setHeader(\"proxy-authorization\", authHeader);\n    }\n    if (self.proxy && !self.tunnel) {\n        self.path = self.uri.protocol + \"//\" + self.uri.host + self.path;\n    }\n    if (options.json) {\n        self.json(options.json);\n    }\n    if (options.multipart) {\n        self.multipart(options.multipart);\n    }\n    if (options.time) {\n        self.timing = true;\n        // NOTE: elapsedTime is deprecated in favor of .timings\n        self.elapsedTime = self.elapsedTime || 0;\n    }\n    function setContentLength() {\n        if (isTypedArray(self.body)) {\n            self.body = Buffer.from(self.body);\n        }\n        if (!self.hasHeader(\"content-length\")) {\n            var length;\n            if (typeof self.body === \"string\") {\n                length = Buffer.byteLength(self.body);\n            } else if (Array.isArray(self.body)) {\n                length = self.body.reduce(function(a, b) {\n                    return a + b.length;\n                }, 0);\n            } else {\n                length = self.body.length;\n            }\n            if (length) {\n                self.setHeader(\"content-length\", length);\n            } else {\n                self.emit(\"error\", new Error(\"Argument error, options.body.\"));\n            }\n        }\n    }\n    if (self.body && !isstream(self.body)) {\n        setContentLength();\n    }\n    if (options.oauth) {\n        self.oauth(options.oauth);\n    } else if (self._oauth.params && self.hasHeader(\"authorization\")) {\n        self.oauth(self._oauth.params);\n    }\n    var protocol = self.proxy && !self.tunnel ? self.proxy.protocol : self.uri.protocol;\n    var defaultModules = {\n        \"http:\": http,\n        \"https:\": https\n    };\n    var httpModules = self.httpModules || {};\n    self.httpModule = httpModules[protocol] || defaultModules[protocol];\n    if (!self.httpModule) {\n        return self.emit(\"error\", new Error(\"Invalid protocol: \" + protocol));\n    }\n    if (options.ca) {\n        self.ca = options.ca;\n    }\n    if (!self.agent) {\n        if (options.agentOptions) {\n            self.agentOptions = options.agentOptions;\n        }\n        if (options.agentClass) {\n            self.agentClass = options.agentClass;\n        } else if (options.forever) {\n            var v = version();\n            // use ForeverAgent in node 0.10- only\n            if (v.major === 0 && v.minor <= 10) {\n                self.agentClass = protocol === \"http:\" ? ForeverAgent : ForeverAgent.SSL;\n            } else {\n                self.agentClass = self.httpModule.Agent;\n                self.agentOptions = self.agentOptions || {};\n                self.agentOptions.keepAlive = true;\n            }\n        } else {\n            self.agentClass = self.httpModule.Agent;\n        }\n    }\n    if (self.pool === false) {\n        self.agent = false;\n    } else {\n        self.agent = self.agent || self.getNewAgent();\n    }\n    self.on(\"pipe\", function(src) {\n        if (self.ntick && self._started) {\n            self.emit(\"error\", new Error(\"You cannot pipe to this stream after the outbound request has started.\"));\n        }\n        self.src = src;\n        if (isReadStream(src)) {\n            if (!self.hasHeader(\"content-type\")) {\n                self.setHeader(\"content-type\", mime.lookup(src.path));\n            }\n        } else {\n            if (src.headers) {\n                for(var i in src.headers){\n                    if (!self.hasHeader(i)) {\n                        self.setHeader(i, src.headers[i]);\n                    }\n                }\n            }\n            if (self._json && !self.hasHeader(\"content-type\")) {\n                self.setHeader(\"content-type\", \"application/json\");\n            }\n            if (src.method && !self.explicitMethod) {\n                self.method = src.method;\n            }\n        }\n    // self.on('pipe', function () {\n    //   console.error('You have already piped to this stream. Pipeing twice is likely to break the request.')\n    // })\n    });\n    defer(function() {\n        if (self._aborted) {\n            return;\n        }\n        var end = function() {\n            if (self._form) {\n                if (!self._auth.hasAuth) {\n                    self._form.pipe(self);\n                } else if (self._auth.hasAuth && self._auth.sentAuth) {\n                    self._form.pipe(self);\n                }\n            }\n            if (self._multipart && self._multipart.chunked) {\n                self._multipart.body.pipe(self);\n            }\n            if (self.body) {\n                if (isstream(self.body)) {\n                    self.body.pipe(self);\n                } else {\n                    setContentLength();\n                    if (Array.isArray(self.body)) {\n                        self.body.forEach(function(part) {\n                            self.write(part);\n                        });\n                    } else {\n                        self.write(self.body);\n                    }\n                    self.end();\n                }\n            } else if (self.requestBodyStream) {\n                console.warn(\"options.requestBodyStream is deprecated, please pass the request object to stream.pipe.\");\n                self.requestBodyStream.pipe(self);\n            } else if (!self.src) {\n                if (self._auth.hasAuth && !self._auth.sentAuth) {\n                    self.end();\n                    return;\n                }\n                if (self.method !== \"GET\" && typeof self.method !== \"undefined\") {\n                    self.setHeader(\"content-length\", 0);\n                }\n                self.end();\n            }\n        };\n        if (self._form && !self.hasHeader(\"content-length\")) {\n            // Before ending the request, we had to compute the length of the whole form, asyncly\n            self.setHeader(self._form.getHeaders(), true);\n            self._form.getLength(function(err, length) {\n                if (!err && !isNaN(length)) {\n                    self.setHeader(\"content-length\", length);\n                }\n                end();\n            });\n        } else {\n            end();\n        }\n        self.ntick = true;\n    });\n};\nRequest.prototype.getNewAgent = function() {\n    var self = this;\n    var Agent = self.agentClass;\n    var options = {};\n    if (self.agentOptions) {\n        for(var i in self.agentOptions){\n            options[i] = self.agentOptions[i];\n        }\n    }\n    if (self.ca) {\n        options.ca = self.ca;\n    }\n    if (self.ciphers) {\n        options.ciphers = self.ciphers;\n    }\n    if (self.secureProtocol) {\n        options.secureProtocol = self.secureProtocol;\n    }\n    if (self.secureOptions) {\n        options.secureOptions = self.secureOptions;\n    }\n    if (typeof self.rejectUnauthorized !== \"undefined\") {\n        options.rejectUnauthorized = self.rejectUnauthorized;\n    }\n    if (self.cert && self.key) {\n        options.key = self.key;\n        options.cert = self.cert;\n    }\n    if (self.pfx) {\n        options.pfx = self.pfx;\n    }\n    if (self.passphrase) {\n        options.passphrase = self.passphrase;\n    }\n    var poolKey = \"\";\n    // different types of agents are in different pools\n    if (Agent !== self.httpModule.Agent) {\n        poolKey += Agent.name;\n    }\n    // ca option is only relevant if proxy or destination are https\n    var proxy = self.proxy;\n    if (typeof proxy === \"string\") {\n        proxy = url.parse(proxy);\n    }\n    var isHttps = proxy && proxy.protocol === \"https:\" || this.uri.protocol === \"https:\";\n    if (isHttps) {\n        if (options.ca) {\n            if (poolKey) {\n                poolKey += \":\";\n            }\n            poolKey += options.ca;\n        }\n        if (typeof options.rejectUnauthorized !== \"undefined\") {\n            if (poolKey) {\n                poolKey += \":\";\n            }\n            poolKey += options.rejectUnauthorized;\n        }\n        if (options.cert) {\n            if (poolKey) {\n                poolKey += \":\";\n            }\n            poolKey += options.cert.toString(\"ascii\") + options.key.toString(\"ascii\");\n        }\n        if (options.pfx) {\n            if (poolKey) {\n                poolKey += \":\";\n            }\n            poolKey += options.pfx.toString(\"ascii\");\n        }\n        if (options.ciphers) {\n            if (poolKey) {\n                poolKey += \":\";\n            }\n            poolKey += options.ciphers;\n        }\n        if (options.secureProtocol) {\n            if (poolKey) {\n                poolKey += \":\";\n            }\n            poolKey += options.secureProtocol;\n        }\n        if (options.secureOptions) {\n            if (poolKey) {\n                poolKey += \":\";\n            }\n            poolKey += options.secureOptions;\n        }\n    }\n    if (self.pool === globalPool && !poolKey && Object.keys(options).length === 0 && self.httpModule.globalAgent) {\n        // not doing anything special.  Use the globalAgent\n        return self.httpModule.globalAgent;\n    }\n    // we're using a stored agent.  Make sure it's protocol-specific\n    poolKey = self.uri.protocol + poolKey;\n    // generate a new agent for this setting if none yet exists\n    if (!self.pool[poolKey]) {\n        self.pool[poolKey] = new Agent(options);\n        // properly set maxSockets on new agents\n        if (self.pool.maxSockets) {\n            self.pool[poolKey].maxSockets = self.pool.maxSockets;\n        }\n    }\n    return self.pool[poolKey];\n};\nRequest.prototype.start = function() {\n    // start() is called once we are ready to send the outgoing HTTP request.\n    // this is usually called on the first write(), end() or on nextTick()\n    var self = this;\n    if (self.timing) {\n        // All timings will be relative to this request's startTime.  In order to do this,\n        // we need to capture the wall-clock start time (via Date), immediately followed\n        // by the high-resolution timer (via now()).  While these two won't be set\n        // at the _exact_ same time, they should be close enough to be able to calculate\n        // high-resolution, monotonically non-decreasing timestamps relative to startTime.\n        var startTime = new Date().getTime();\n        var startTimeNow = now();\n    }\n    if (self._aborted) {\n        return;\n    }\n    self._started = true;\n    self.method = self.method || \"GET\";\n    self.href = self.uri.href;\n    if (self.src && self.src.stat && self.src.stat.size && !self.hasHeader(\"content-length\")) {\n        self.setHeader(\"content-length\", self.src.stat.size);\n    }\n    if (self._aws) {\n        self.aws(self._aws, true);\n    }\n    // We have a method named auth, which is completely different from the http.request\n    // auth option.  If we don't remove it, we're gonna have a bad time.\n    var reqOptions = copy(self);\n    delete reqOptions.auth;\n    debug(\"make request\", self.uri.href);\n    // node v6.8.0 now supports a `timeout` value in `http.request()`, but we\n    // should delete it for now since we handle timeouts manually for better\n    // consistency with node versions before v6.8.0\n    delete reqOptions.timeout;\n    try {\n        self.req = self.httpModule.request(reqOptions);\n    } catch (err) {\n        self.emit(\"error\", err);\n        return;\n    }\n    if (self.timing) {\n        self.startTime = startTime;\n        self.startTimeNow = startTimeNow;\n        // Timing values will all be relative to startTime (by comparing to startTimeNow\n        // so we have an accurate clock)\n        self.timings = {};\n    }\n    var timeout;\n    if (self.timeout && !self.timeoutTimer) {\n        if (self.timeout < 0) {\n            timeout = 0;\n        } else if (typeof self.timeout === \"number\" && isFinite(self.timeout)) {\n            timeout = self.timeout;\n        }\n    }\n    self.req.on(\"response\", self.onRequestResponse.bind(self));\n    self.req.on(\"error\", self.onRequestError.bind(self));\n    self.req.on(\"drain\", function() {\n        self.emit(\"drain\");\n    });\n    self.req.on(\"socket\", function(socket) {\n        // `._connecting` was the old property which was made public in node v6.1.0\n        var isConnecting = socket._connecting || socket.connecting;\n        if (self.timing) {\n            self.timings.socket = now() - self.startTimeNow;\n            if (isConnecting) {\n                var onLookupTiming = function() {\n                    self.timings.lookup = now() - self.startTimeNow;\n                };\n                var onConnectTiming = function() {\n                    self.timings.connect = now() - self.startTimeNow;\n                };\n                socket.once(\"lookup\", onLookupTiming);\n                socket.once(\"connect\", onConnectTiming);\n                // clean up timing event listeners if needed on error\n                self.req.once(\"error\", function() {\n                    socket.removeListener(\"lookup\", onLookupTiming);\n                    socket.removeListener(\"connect\", onConnectTiming);\n                });\n            }\n        }\n        var setReqTimeout = function() {\n            // This timeout sets the amount of time to wait *between* bytes sent\n            // from the server once connected.\n            //\n            // In particular, it's useful for erroring if the server fails to send\n            // data halfway through streaming a response.\n            self.req.setTimeout(timeout, function() {\n                if (self.req) {\n                    self.abort();\n                    var e = new Error(\"ESOCKETTIMEDOUT\");\n                    e.code = \"ESOCKETTIMEDOUT\";\n                    e.connect = false;\n                    self.emit(\"error\", e);\n                }\n            });\n        };\n        if (timeout !== undefined) {\n            // Only start the connection timer if we're actually connecting a new\n            // socket, otherwise if we're already connected (because this is a\n            // keep-alive connection) do not bother. This is important since we won't\n            // get a 'connect' event for an already connected socket.\n            if (isConnecting) {\n                var onReqSockConnect = function() {\n                    socket.removeListener(\"connect\", onReqSockConnect);\n                    self.clearTimeout();\n                    setReqTimeout();\n                };\n                socket.on(\"connect\", onReqSockConnect);\n                self.req.on(\"error\", function(err) {\n                    socket.removeListener(\"connect\", onReqSockConnect);\n                });\n                // Set a timeout in memory - this block will throw if the server takes more\n                // than `timeout` to write the HTTP status and headers (corresponding to\n                // the on('response') event on the client). NB: this measures wall-clock\n                // time, not the time between bytes sent by the server.\n                self.timeoutTimer = setTimeout(function() {\n                    socket.removeListener(\"connect\", onReqSockConnect);\n                    self.abort();\n                    var e = new Error(\"ETIMEDOUT\");\n                    e.code = \"ETIMEDOUT\";\n                    e.connect = true;\n                    self.emit(\"error\", e);\n                }, timeout);\n            } else {\n                // We're already connected\n                setReqTimeout();\n            }\n        }\n        self.emit(\"socket\", socket);\n    });\n    self.emit(\"request\", self.req);\n};\nRequest.prototype.onRequestError = function(error) {\n    var self = this;\n    if (self._aborted) {\n        return;\n    }\n    if (self.req && self.req._reusedSocket && error.code === \"ECONNRESET\" && self.agent.addRequestNoreuse) {\n        self.agent = {\n            addRequest: self.agent.addRequestNoreuse.bind(self.agent)\n        };\n        self.start();\n        self.req.end();\n        return;\n    }\n    self.clearTimeout();\n    self.emit(\"error\", error);\n};\nRequest.prototype.onRequestResponse = function(response) {\n    var self = this;\n    if (self.timing) {\n        self.timings.response = now() - self.startTimeNow;\n    }\n    debug(\"onRequestResponse\", self.uri.href, response.statusCode, response.headers);\n    response.on(\"end\", function() {\n        if (self.timing) {\n            self.timings.end = now() - self.startTimeNow;\n            response.timingStart = self.startTime;\n            // fill in the blanks for any periods that didn't trigger, such as\n            // no lookup or connect due to keep alive\n            if (!self.timings.socket) {\n                self.timings.socket = 0;\n            }\n            if (!self.timings.lookup) {\n                self.timings.lookup = self.timings.socket;\n            }\n            if (!self.timings.connect) {\n                self.timings.connect = self.timings.lookup;\n            }\n            if (!self.timings.response) {\n                self.timings.response = self.timings.connect;\n            }\n            debug(\"elapsed time\", self.timings.end);\n            // elapsedTime includes all redirects\n            self.elapsedTime += Math.round(self.timings.end);\n            // NOTE: elapsedTime is deprecated in favor of .timings\n            response.elapsedTime = self.elapsedTime;\n            // timings is just for the final fetch\n            response.timings = self.timings;\n            // pre-calculate phase timings as well\n            response.timingPhases = {\n                wait: self.timings.socket,\n                dns: self.timings.lookup - self.timings.socket,\n                tcp: self.timings.connect - self.timings.lookup,\n                firstByte: self.timings.response - self.timings.connect,\n                download: self.timings.end - self.timings.response,\n                total: self.timings.end\n            };\n        }\n        debug(\"response end\", self.uri.href, response.statusCode, response.headers);\n    });\n    if (self._aborted) {\n        debug(\"aborted\", self.uri.href);\n        response.resume();\n        return;\n    }\n    self.response = response;\n    response.request = self;\n    response.toJSON = responseToJSON;\n    // XXX This is different on 0.10, because SSL is strict by default\n    if (self.httpModule === https && self.strictSSL && (!response.hasOwnProperty(\"socket\") || !response.socket.authorized)) {\n        debug(\"strict ssl error\", self.uri.href);\n        var sslErr = response.hasOwnProperty(\"socket\") ? response.socket.authorizationError : self.uri.href + \" does not support SSL\";\n        self.emit(\"error\", new Error(\"SSL Error: \" + sslErr));\n        return;\n    }\n    // Save the original host before any redirect (if it changes, we need to\n    // remove any authorization headers).  Also remember the case of the header\n    // name because lots of broken servers expect Host instead of host and we\n    // want the caller to be able to specify this.\n    self.originalHost = self.getHeader(\"host\");\n    if (!self.originalHostHeaderName) {\n        self.originalHostHeaderName = self.hasHeader(\"host\");\n    }\n    if (self.setHost) {\n        self.removeHeader(\"host\");\n    }\n    self.clearTimeout();\n    var targetCookieJar = self._jar && self._jar.setCookie ? self._jar : globalCookieJar;\n    var addCookie = function(cookie) {\n        // set the cookie if it's domain in the href's domain.\n        try {\n            targetCookieJar.setCookie(cookie, self.uri.href, {\n                ignoreError: true\n            });\n        } catch (e) {\n            self.emit(\"error\", e);\n        }\n    };\n    response.caseless = caseless(response.headers);\n    if (response.caseless.has(\"set-cookie\") && !self._disableCookies) {\n        var headerName = response.caseless.has(\"set-cookie\");\n        if (Array.isArray(response.headers[headerName])) {\n            response.headers[headerName].forEach(addCookie);\n        } else {\n            addCookie(response.headers[headerName]);\n        }\n    }\n    if (self._redirect.onResponse(response)) {\n        return; // Ignore the rest of the response\n    } else {\n        // Be a good stream and emit end when the response is finished.\n        // Hack to emit end on close because of a core bug that never fires end\n        response.on(\"close\", function() {\n            if (!self._ended) {\n                self.response.emit(\"end\");\n            }\n        });\n        response.once(\"end\", function() {\n            self._ended = true;\n        });\n        var noBody = function(code) {\n            return self.method === \"HEAD\" || // Informational\n            code >= 100 && code < 200 || // No Content\n            code === 204 || // Not Modified\n            code === 304;\n        };\n        var responseContent;\n        if (self.gzip && !noBody(response.statusCode)) {\n            var contentEncoding = response.headers[\"content-encoding\"] || \"identity\";\n            contentEncoding = contentEncoding.trim().toLowerCase();\n            // Be more lenient with decoding compressed responses, since (very rarely)\n            // servers send slightly invalid gzip responses that are still accepted\n            // by common browsers.\n            // Always using Z_SYNC_FLUSH is what cURL does.\n            var zlibOptions = {\n                flush: zlib.Z_SYNC_FLUSH,\n                finishFlush: zlib.Z_SYNC_FLUSH\n            };\n            if (contentEncoding === \"gzip\") {\n                responseContent = zlib.createGunzip(zlibOptions);\n                response.pipe(responseContent);\n            } else if (contentEncoding === \"deflate\") {\n                responseContent = zlib.createInflate(zlibOptions);\n                response.pipe(responseContent);\n            } else {\n                // Since previous versions didn't check for Content-Encoding header,\n                // ignore any invalid values to preserve backwards-compatibility\n                if (contentEncoding !== \"identity\") {\n                    debug(\"ignoring unrecognized Content-Encoding \" + contentEncoding);\n                }\n                responseContent = response;\n            }\n        } else {\n            responseContent = response;\n        }\n        if (self.encoding) {\n            if (self.dests.length !== 0) {\n                console.error(\"Ignoring encoding parameter as this stream is being piped to another stream which makes the encoding option invalid.\");\n            } else {\n                responseContent.setEncoding(self.encoding);\n            }\n        }\n        if (self._paused) {\n            responseContent.pause();\n        }\n        self.responseContent = responseContent;\n        self.emit(\"response\", response);\n        self.dests.forEach(function(dest) {\n            self.pipeDest(dest);\n        });\n        responseContent.on(\"data\", function(chunk) {\n            if (self.timing && !self.responseStarted) {\n                self.responseStartTime = new Date().getTime();\n                // NOTE: responseStartTime is deprecated in favor of .timings\n                response.responseStartTime = self.responseStartTime;\n            }\n            self._destdata = true;\n            self.emit(\"data\", chunk);\n        });\n        responseContent.once(\"end\", function(chunk) {\n            self.emit(\"end\", chunk);\n        });\n        responseContent.on(\"error\", function(error) {\n            self.emit(\"error\", error);\n        });\n        responseContent.on(\"close\", function() {\n            self.emit(\"close\");\n        });\n        if (self.callback) {\n            self.readResponseBody(response);\n        } else {\n            self.on(\"end\", function() {\n                if (self._aborted) {\n                    debug(\"aborted\", self.uri.href);\n                    return;\n                }\n                self.emit(\"complete\", response);\n            });\n        }\n    }\n    debug(\"finish init function\", self.uri.href);\n};\nRequest.prototype.readResponseBody = function(response) {\n    var self = this;\n    debug(\"reading response's body\");\n    var buffers = [];\n    var bufferLength = 0;\n    var strings = [];\n    self.on(\"data\", function(chunk) {\n        if (!Buffer.isBuffer(chunk)) {\n            strings.push(chunk);\n        } else if (chunk.length) {\n            bufferLength += chunk.length;\n            buffers.push(chunk);\n        }\n    });\n    self.on(\"end\", function() {\n        debug(\"end event\", self.uri.href);\n        if (self._aborted) {\n            debug(\"aborted\", self.uri.href);\n            // `buffer` is defined in the parent scope and used in a closure it exists for the life of the request.\n            // This can lead to leaky behavior if the user retains a reference to the request object.\n            buffers = [];\n            bufferLength = 0;\n            return;\n        }\n        if (bufferLength) {\n            debug(\"has body\", self.uri.href, bufferLength);\n            response.body = Buffer.concat(buffers, bufferLength);\n            if (self.encoding !== null) {\n                response.body = response.body.toString(self.encoding);\n            }\n            // `buffer` is defined in the parent scope and used in a closure it exists for the life of the Request.\n            // This can lead to leaky behavior if the user retains a reference to the request object.\n            buffers = [];\n            bufferLength = 0;\n        } else if (strings.length) {\n            // The UTF8 BOM [0xEF,0xBB,0xBF] is converted to [0xFE,0xFF] in the JS UTC16/UCS2 representation.\n            // Strip this value out when the encoding is set to 'utf8', as upstream consumers won't expect it and it breaks JSON.parse().\n            if (self.encoding === \"utf8\" && strings[0].length > 0 && strings[0][0] === \"\\uFEFF\") {\n                strings[0] = strings[0].substring(1);\n            }\n            response.body = strings.join(\"\");\n        }\n        if (self._json) {\n            try {\n                response.body = JSON.parse(response.body, self._jsonReviver);\n            } catch (e) {\n                debug(\"invalid JSON received\", self.uri.href);\n            }\n        }\n        debug(\"emitting complete\", self.uri.href);\n        if (typeof response.body === \"undefined\" && !self._json) {\n            response.body = self.encoding === null ? Buffer.alloc(0) : \"\";\n        }\n        self.emit(\"complete\", response, response.body);\n    });\n};\nRequest.prototype.abort = function() {\n    var self = this;\n    self._aborted = true;\n    if (self.req) {\n        self.req.abort();\n    } else if (self.response) {\n        self.response.destroy();\n    }\n    self.clearTimeout();\n    self.emit(\"abort\");\n};\nRequest.prototype.pipeDest = function(dest) {\n    var self = this;\n    var response = self.response;\n    // Called after the response is received\n    if (dest.headers && !dest.headersSent) {\n        if (response.caseless.has(\"content-type\")) {\n            var ctname = response.caseless.has(\"content-type\");\n            if (dest.setHeader) {\n                dest.setHeader(ctname, response.headers[ctname]);\n            } else {\n                dest.headers[ctname] = response.headers[ctname];\n            }\n        }\n        if (response.caseless.has(\"content-length\")) {\n            var clname = response.caseless.has(\"content-length\");\n            if (dest.setHeader) {\n                dest.setHeader(clname, response.headers[clname]);\n            } else {\n                dest.headers[clname] = response.headers[clname];\n            }\n        }\n    }\n    if (dest.setHeader && !dest.headersSent) {\n        for(var i in response.headers){\n            // If the response content is being decoded, the Content-Encoding header\n            // of the response doesn't represent the piped content, so don't pass it.\n            if (!self.gzip || i !== \"content-encoding\") {\n                dest.setHeader(i, response.headers[i]);\n            }\n        }\n        dest.statusCode = response.statusCode;\n    }\n    if (self.pipefilter) {\n        self.pipefilter(response, dest);\n    }\n};\nRequest.prototype.qs = function(q, clobber) {\n    var self = this;\n    var base;\n    if (!clobber && self.uri.query) {\n        base = self._qs.parse(self.uri.query);\n    } else {\n        base = {};\n    }\n    for(var i in q){\n        base[i] = q[i];\n    }\n    var qs = self._qs.stringify(base);\n    if (qs === \"\") {\n        return self;\n    }\n    self.uri = url.parse(self.uri.href.split(\"?\")[0] + \"?\" + qs);\n    self.url = self.uri;\n    self.path = self.uri.path;\n    if (self.uri.host === \"unix\") {\n        self.enableUnixSocket();\n    }\n    return self;\n};\nRequest.prototype.form = function(form) {\n    var self = this;\n    if (form) {\n        if (!/^application\\/x-www-form-urlencoded\\b/.test(self.getHeader(\"content-type\"))) {\n            self.setHeader(\"content-type\", \"application/x-www-form-urlencoded\");\n        }\n        self.body = typeof form === \"string\" ? self._qs.rfc3986(form.toString(\"utf8\")) : self._qs.stringify(form).toString(\"utf8\");\n        return self;\n    }\n    // create form-data object\n    self._form = new FormData();\n    self._form.on(\"error\", function(err) {\n        err.message = \"form-data: \" + err.message;\n        self.emit(\"error\", err);\n        self.abort();\n    });\n    return self._form;\n};\nRequest.prototype.multipart = function(multipart) {\n    var self = this;\n    self._multipart.onRequest(multipart);\n    if (!self._multipart.chunked) {\n        self.body = self._multipart.body;\n    }\n    return self;\n};\nRequest.prototype.json = function(val) {\n    var self = this;\n    if (!self.hasHeader(\"accept\")) {\n        self.setHeader(\"accept\", \"application/json\");\n    }\n    if (typeof self.jsonReplacer === \"function\") {\n        self._jsonReplacer = self.jsonReplacer;\n    }\n    self._json = true;\n    if (typeof val === \"boolean\") {\n        if (self.body !== undefined) {\n            if (!/^application\\/x-www-form-urlencoded\\b/.test(self.getHeader(\"content-type\"))) {\n                self.body = safeStringify(self.body, self._jsonReplacer);\n            } else {\n                self.body = self._qs.rfc3986(self.body);\n            }\n            if (!self.hasHeader(\"content-type\")) {\n                self.setHeader(\"content-type\", \"application/json\");\n            }\n        }\n    } else {\n        self.body = safeStringify(val, self._jsonReplacer);\n        if (!self.hasHeader(\"content-type\")) {\n            self.setHeader(\"content-type\", \"application/json\");\n        }\n    }\n    if (typeof self.jsonReviver === \"function\") {\n        self._jsonReviver = self.jsonReviver;\n    }\n    return self;\n};\nRequest.prototype.getHeader = function(name, headers) {\n    var self = this;\n    var result, re, match;\n    if (!headers) {\n        headers = self.headers;\n    }\n    Object.keys(headers).forEach(function(key) {\n        if (key.length !== name.length) {\n            return;\n        }\n        re = new RegExp(name, \"i\");\n        match = key.match(re);\n        if (match) {\n            result = headers[key];\n        }\n    });\n    return result;\n};\nRequest.prototype.enableUnixSocket = function() {\n    // Get the socket & request paths from the URL\n    var unixParts = this.uri.path.split(\":\");\n    var host = unixParts[0];\n    var path = unixParts[1];\n    // Apply unix properties to request\n    this.socketPath = host;\n    this.uri.pathname = path;\n    this.uri.path = path;\n    this.uri.host = host;\n    this.uri.hostname = host;\n    this.uri.isUnix = true;\n};\nRequest.prototype.auth = function(user, pass, sendImmediately, bearer) {\n    var self = this;\n    self._auth.onRequest(user, pass, sendImmediately, bearer);\n    return self;\n};\nRequest.prototype.aws = function(opts, now) {\n    var self = this;\n    if (!now) {\n        self._aws = opts;\n        return self;\n    }\n    if (opts.sign_version === 4 || opts.sign_version === \"4\") {\n        // use aws4\n        var options = {\n            host: self.uri.host,\n            path: self.uri.path,\n            method: self.method,\n            headers: self.headers,\n            body: self.body\n        };\n        if (opts.service) {\n            options.service = opts.service;\n        }\n        var signRes = aws4.sign(options, {\n            accessKeyId: opts.key,\n            secretAccessKey: opts.secret,\n            sessionToken: opts.session\n        });\n        self.setHeader(\"authorization\", signRes.headers.Authorization);\n        self.setHeader(\"x-amz-date\", signRes.headers[\"X-Amz-Date\"]);\n        if (signRes.headers[\"X-Amz-Security-Token\"]) {\n            self.setHeader(\"x-amz-security-token\", signRes.headers[\"X-Amz-Security-Token\"]);\n        }\n    } else {\n        // default: use aws-sign2\n        var date = new Date();\n        self.setHeader(\"date\", date.toUTCString());\n        var auth = {\n            key: opts.key,\n            secret: opts.secret,\n            verb: self.method.toUpperCase(),\n            date: date,\n            contentType: self.getHeader(\"content-type\") || \"\",\n            md5: self.getHeader(\"content-md5\") || \"\",\n            amazonHeaders: aws2.canonicalizeHeaders(self.headers)\n        };\n        var path = self.uri.path;\n        if (opts.bucket && path) {\n            auth.resource = \"/\" + opts.bucket + path;\n        } else if (opts.bucket && !path) {\n            auth.resource = \"/\" + opts.bucket;\n        } else if (!opts.bucket && path) {\n            auth.resource = path;\n        } else if (!opts.bucket && !path) {\n            auth.resource = \"/\";\n        }\n        auth.resource = aws2.canonicalizeResource(auth.resource);\n        self.setHeader(\"authorization\", aws2.authorization(auth));\n    }\n    return self;\n};\nRequest.prototype.httpSignature = function(opts) {\n    var self = this;\n    httpSignature.signRequest({\n        getHeader: function(header) {\n            return self.getHeader(header, self.headers);\n        },\n        setHeader: function(header, value) {\n            self.setHeader(header, value);\n        },\n        method: self.method,\n        path: self.path\n    }, opts);\n    debug(\"httpSignature authorization\", self.getHeader(\"authorization\"));\n    return self;\n};\nRequest.prototype.hawk = function(opts) {\n    var self = this;\n    self.setHeader(\"Authorization\", hawk.header(self.uri, self.method, opts));\n};\nRequest.prototype.oauth = function(_oauth) {\n    var self = this;\n    self._oauth.onRequest(_oauth);\n    return self;\n};\nRequest.prototype.jar = function(jar) {\n    var self = this;\n    var cookies;\n    if (self._redirect.redirectsFollowed === 0) {\n        self.originalCookieHeader = self.getHeader(\"cookie\");\n    }\n    if (!jar) {\n        // disable cookies\n        cookies = false;\n        self._disableCookies = true;\n    } else {\n        var targetCookieJar = jar.getCookieString ? jar : globalCookieJar;\n        var urihref = self.uri.href;\n        // fetch cookie in the Specified host\n        if (targetCookieJar) {\n            cookies = targetCookieJar.getCookieString(urihref);\n        }\n    }\n    // if need cookie and cookie is not empty\n    if (cookies && cookies.length) {\n        if (self.originalCookieHeader) {\n            // Don't overwrite existing Cookie header\n            self.setHeader(\"cookie\", self.originalCookieHeader + \"; \" + cookies);\n        } else {\n            self.setHeader(\"cookie\", cookies);\n        }\n    }\n    self._jar = jar;\n    return self;\n};\n// Stream API\nRequest.prototype.pipe = function(dest, opts) {\n    var self = this;\n    if (self.response) {\n        if (self._destdata) {\n            self.emit(\"error\", new Error(\"You cannot pipe after data has been emitted from the response.\"));\n        } else if (self._ended) {\n            self.emit(\"error\", new Error(\"You cannot pipe after the response has been ended.\"));\n        } else {\n            stream.Stream.prototype.pipe.call(self, dest, opts);\n            self.pipeDest(dest);\n            return dest;\n        }\n    } else {\n        self.dests.push(dest);\n        stream.Stream.prototype.pipe.call(self, dest, opts);\n        return dest;\n    }\n};\nRequest.prototype.write = function() {\n    var self = this;\n    if (self._aborted) {\n        return;\n    }\n    if (!self._started) {\n        self.start();\n    }\n    if (self.req) {\n        return self.req.write.apply(self.req, arguments);\n    }\n};\nRequest.prototype.end = function(chunk) {\n    var self = this;\n    if (self._aborted) {\n        return;\n    }\n    if (chunk) {\n        self.write(chunk);\n    }\n    if (!self._started) {\n        self.start();\n    }\n    if (self.req) {\n        self.req.end();\n    }\n};\nRequest.prototype.pause = function() {\n    var self = this;\n    if (!self.responseContent) {\n        self._paused = true;\n    } else {\n        self.responseContent.pause.apply(self.responseContent, arguments);\n    }\n};\nRequest.prototype.resume = function() {\n    var self = this;\n    if (!self.responseContent) {\n        self._paused = false;\n    } else {\n        self.responseContent.resume.apply(self.responseContent, arguments);\n    }\n};\nRequest.prototype.destroy = function() {\n    var self = this;\n    this.clearTimeout();\n    if (!self._ended) {\n        self.end();\n    } else if (self.response) {\n        self.response.destroy();\n    }\n};\nRequest.prototype.clearTimeout = function() {\n    if (this.timeoutTimer) {\n        clearTimeout(this.timeoutTimer);\n        this.timeoutTimer = null;\n    }\n};\nRequest.defaultProxyHeaderWhiteList = Tunnel.defaultProxyHeaderWhiteList.slice();\nRequest.defaultProxyHeaderExclusiveList = Tunnel.defaultProxyHeaderExclusiveList.slice();\n// Exports\nRequest.prototype.toJSON = requestToJSON;\nmodule.exports = Request;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZXF1ZXN0L3JlcXVlc3QuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxPQUFPQyxtQkFBT0EsQ0FBQztBQUNuQixJQUFJQyxRQUFRRCxtQkFBT0EsQ0FBQztBQUNwQixJQUFJRSxNQUFNRixtQkFBT0EsQ0FBQztBQUNsQixJQUFJRyxPQUFPSCxtQkFBT0EsQ0FBQztBQUNuQixJQUFJSSxTQUFTSixtQkFBT0EsQ0FBQztBQUNyQixJQUFJSyxPQUFPTCxtQkFBT0EsQ0FBQztBQUNuQixJQUFJTSxPQUFPTixtQkFBT0EsQ0FBQztBQUNuQixJQUFJTyxPQUFPUCxtQkFBT0EsQ0FBQztBQUNuQixJQUFJUSxnQkFBZ0JSLG1CQUFPQSxDQUFDO0FBQzVCLElBQUlTLE9BQU9ULG1CQUFPQSxDQUFDO0FBQ25CLElBQUlVLFdBQVdWLG1CQUFPQSxDQUFDO0FBQ3ZCLElBQUlXLGVBQWVYLG1CQUFPQSxDQUFDO0FBQzNCLElBQUlZLFdBQVdaLG1CQUFPQSxDQUFDO0FBQ3ZCLElBQUlhLFNBQVNiLG1CQUFPQSxDQUFDO0FBQ3JCLElBQUljLFdBQVdkLG1CQUFPQSxDQUFDO0FBQ3ZCLElBQUllLGVBQWVmLDJHQUErQjtBQUNsRCxJQUFJaUIsVUFBVWpCLG1CQUFPQSxDQUFDO0FBQ3RCLElBQUlrQixVQUFVbEIsbUJBQU9BLENBQUM7QUFDdEIsSUFBSW1CLGtCQUFrQm5CLG1CQUFPQSxDQUFDO0FBQzlCLElBQUlvQixjQUFjcEIsd0hBQXdDO0FBQzFELElBQUlxQixNQUFNckIsZ0dBQXdCO0FBQ2xDLElBQUlzQixPQUFPdEIsbUdBQTBCO0FBQ3JDLElBQUl1QixRQUFRdkIsc0dBQTRCO0FBQ3hDLElBQUl3QixPQUFPeEIsbUJBQU9BLENBQUM7QUFDbkIsSUFBSXlCLFlBQVl6QixrSEFBb0M7QUFDcEQsSUFBSTBCLFdBQVcxQiwrR0FBa0M7QUFDakQsSUFBSTJCLFNBQVMzQix5R0FBOEI7QUFDM0MsSUFBSTRCLE1B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LElBQUksQ0FBQy9NLEtBQUs4TyxNQUFNLEVBQUU7UUFDaEI5TyxLQUFLcUosR0FBRztJQUNWLE9BQU8sSUFBSXJKLEtBQUttTixRQUFRLEVBQUU7UUFDeEJuTixLQUFLbU4sUUFBUSxDQUFDNEQsT0FBTztJQUN2QjtBQUNGO0FBRUF0USxRQUFRTSxTQUFTLENBQUNnTSxZQUFZLEdBQUc7SUFDL0IsSUFBSSxJQUFJLENBQUNuQixZQUFZLEVBQUU7UUFDckJtQixhQUFhLElBQUksQ0FBQ25CLFlBQVk7UUFDOUIsSUFBSSxDQUFDQSxZQUFZLEdBQUc7SUFDdEI7QUFDRjtBQUVBbkwsUUFBUXdULDJCQUEyQixHQUNqQ3hWLE9BQU93ViwyQkFBMkIsQ0FBQ3pRLEtBQUs7QUFFMUMvQyxRQUFReVQsK0JBQStCLEdBQ3JDelYsT0FBT3lWLCtCQUErQixDQUFDMVEsS0FBSztBQUU5QyxVQUFVO0FBRVYvQyxRQUFRTSxTQUFTLENBQUNnTixNQUFNLEdBQUdoTztBQUMzQm9VLE9BQU9DLE9BQU8sR0FBRzNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW5ub3ZhdGlvbi1jb2FjaC8uL25vZGVfbW9kdWxlcy9yZXF1ZXN0L3JlcXVlc3QuanM/NjUzZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxudmFyIGh0dHAgPSByZXF1aXJlKCdodHRwJylcbnZhciBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJylcbnZhciB1cmwgPSByZXF1aXJlKCd1cmwnKVxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJylcbnZhciBzdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKVxudmFyIHpsaWIgPSByZXF1aXJlKCd6bGliJylcbnZhciBhd3MyID0gcmVxdWlyZSgnYXdzLXNpZ24yJylcbnZhciBhd3M0ID0gcmVxdWlyZSgnYXdzNCcpXG52YXIgaHR0cFNpZ25hdHVyZSA9IHJlcXVpcmUoJ2h0dHAtc2lnbmF0dXJlJylcbnZhciBtaW1lID0gcmVxdWlyZSgnbWltZS10eXBlcycpXG52YXIgY2FzZWxlc3MgPSByZXF1aXJlKCdjYXNlbGVzcycpXG52YXIgRm9yZXZlckFnZW50ID0gcmVxdWlyZSgnZm9yZXZlci1hZ2VudCcpXG52YXIgRm9ybURhdGEgPSByZXF1aXJlKCdmb3JtLWRhdGEnKVxudmFyIGV4dGVuZCA9IHJlcXVpcmUoJ2V4dGVuZCcpXG52YXIgaXNzdHJlYW0gPSByZXF1aXJlKCdpc3N0cmVhbScpXG52YXIgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnaXMtdHlwZWRhcnJheScpLnN0cmljdFxudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuL2xpYi9oZWxwZXJzJylcbnZhciBjb29raWVzID0gcmVxdWlyZSgnLi9saWIvY29va2llcycpXG52YXIgZ2V0UHJveHlGcm9tVVJJID0gcmVxdWlyZSgnLi9saWIvZ2V0UHJveHlGcm9tVVJJJylcbnZhciBRdWVyeXN0cmluZyA9IHJlcXVpcmUoJy4vbGliL3F1ZXJ5c3RyaW5nJykuUXVlcnlzdHJpbmdcbnZhciBIYXIgPSByZXF1aXJlKCcuL2xpYi9oYXInKS5IYXJcbnZhciBBdXRoID0gcmVxdWlyZSgnLi9saWIvYXV0aCcpLkF1dGhcbnZhciBPQXV0aCA9IHJlcXVpcmUoJy4vbGliL29hdXRoJykuT0F1dGhcbnZhciBoYXdrID0gcmVxdWlyZSgnLi9saWIvaGF3aycpXG52YXIgTXVsdGlwYXJ0ID0gcmVxdWlyZSgnLi9saWIvbXVsdGlwYXJ0JykuTXVsdGlwYXJ0XG52YXIgUmVkaXJlY3QgPSByZXF1aXJlKCcuL2xpYi9yZWRpcmVjdCcpLlJlZGlyZWN0XG52YXIgVHVubmVsID0gcmVxdWlyZSgnLi9saWIvdHVubmVsJykuVHVubmVsXG52YXIgbm93ID0gcmVxdWlyZSgncGVyZm9ybWFuY2Utbm93JylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgc2FmZVN0cmluZ2lmeSA9IGhlbHBlcnMuc2FmZVN0cmluZ2lmeVxudmFyIGlzUmVhZFN0cmVhbSA9IGhlbHBlcnMuaXNSZWFkU3RyZWFtXG52YXIgdG9CYXNlNjQgPSBoZWxwZXJzLnRvQmFzZTY0XG52YXIgZGVmZXIgPSBoZWxwZXJzLmRlZmVyXG52YXIgY29weSA9IGhlbHBlcnMuY29weVxudmFyIHZlcnNpb24gPSBoZWxwZXJzLnZlcnNpb25cbnZhciBnbG9iYWxDb29raWVKYXIgPSBjb29raWVzLmphcigpXG5cbnZhciBnbG9iYWxQb29sID0ge31cblxuZnVuY3Rpb24gZmlsdGVyRm9yTm9uUmVzZXJ2ZWQgKHJlc2VydmVkLCBvcHRpb25zKSB7XG4gIC8vIEZpbHRlciBvdXQgcHJvcGVydGllcyB0aGF0IGFyZSBub3QgcmVzZXJ2ZWQuXG4gIC8vIFJlc2VydmVkIHZhbHVlcyBhcmUgcGFzc2VkIGluIGF0IGNhbGwgc2l0ZS5cblxuICB2YXIgb2JqZWN0ID0ge31cbiAgZm9yICh2YXIgaSBpbiBvcHRpb25zKSB7XG4gICAgdmFyIG5vdFJlc2VydmVkID0gKHJlc2VydmVkLmluZGV4T2YoaSkgPT09IC0xKVxuICAgIGlmIChub3RSZXNlcnZlZCkge1xuICAgICAgb2JqZWN0W2ldID0gb3B0aW9uc1tpXVxuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqZWN0XG59XG5cbmZ1bmN0aW9uIGZpbHRlck91dFJlc2VydmVkRnVuY3Rpb25zIChyZXNlcnZlZCwgb3B0aW9ucykge1xuICAvLyBGaWx0ZXIgb3V0IHByb3BlcnRpZXMgdGhhdCBhcmUgZnVuY3Rpb25zIGFuZCBhcmUgcmVzZXJ2ZWQuXG4gIC8vIFJlc2VydmVkIHZhbHVlcyBhcmUgcGFzc2VkIGluIGF0IGNhbGwgc2l0ZS5cblxuICB2YXIgb2JqZWN0ID0ge31cbiAgZm9yICh2YXIgaSBpbiBvcHRpb25zKSB7XG4gICAgdmFyIGlzUmVzZXJ2ZWQgPSAhKHJlc2VydmVkLmluZGV4T2YoaSkgPT09IC0xKVxuICAgIHZhciBpc0Z1bmN0aW9uID0gKHR5cGVvZiBvcHRpb25zW2ldID09PSAnZnVuY3Rpb24nKVxuICAgIGlmICghKGlzUmVzZXJ2ZWQgJiYgaXNGdW5jdGlvbikpIHtcbiAgICAgIG9iamVjdFtpXSA9IG9wdGlvbnNbaV1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iamVjdFxufVxuXG4vLyBSZXR1cm4gYSBzaW1wbGVyIHJlcXVlc3Qgb2JqZWN0IHRvIGFsbG93IHNlcmlhbGl6YXRpb25cbmZ1bmN0aW9uIHJlcXVlc3RUb0pTT04gKCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgcmV0dXJuIHtcbiAgICB1cmk6IHNlbGYudXJpLFxuICAgIG1ldGhvZDogc2VsZi5tZXRob2QsXG4gICAgaGVhZGVyczogc2VsZi5oZWFkZXJzXG4gIH1cbn1cblxuLy8gUmV0dXJuIGEgc2ltcGxlciByZXNwb25zZSBvYmplY3QgdG8gYWxsb3cgc2VyaWFsaXphdGlvblxuZnVuY3Rpb24gcmVzcG9uc2VUb0pTT04gKCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgcmV0dXJuIHtcbiAgICBzdGF0dXNDb2RlOiBzZWxmLnN0YXR1c0NvZGUsXG4gICAgYm9keTogc2VsZi5ib2R5LFxuICAgIGhlYWRlcnM6IHNlbGYuaGVhZGVycyxcbiAgICByZXF1ZXN0OiByZXF1ZXN0VG9KU09OLmNhbGwoc2VsZi5yZXF1ZXN0KVxuICB9XG59XG5cbmZ1bmN0aW9uIFJlcXVlc3QgKG9wdGlvbnMpIHtcbiAgLy8gaWYgZ2l2ZW4gdGhlIG1ldGhvZCBwcm9wZXJ0eSBpbiBvcHRpb25zLCBzZXQgcHJvcGVydHkgZXhwbGljaXRNZXRob2QgdG8gdHJ1ZVxuXG4gIC8vIGV4dGVuZCB0aGUgUmVxdWVzdCBpbnN0YW5jZSB3aXRoIGFueSBub24tcmVzZXJ2ZWQgcHJvcGVydGllc1xuICAvLyByZW1vdmUgYW55IHJlc2VydmVkIGZ1bmN0aW9ucyBmcm9tIHRoZSBvcHRpb25zIG9iamVjdFxuICAvLyBzZXQgUmVxdWVzdCBpbnN0YW5jZSB0byBiZSByZWFkYWJsZSBhbmQgd3JpdGFibGVcbiAgLy8gY2FsbCBpbml0XG5cbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgLy8gc3RhcnQgd2l0aCBIQVIsIHRoZW4gb3ZlcnJpZGUgd2l0aCBhZGRpdGlvbmFsIG9wdGlvbnNcbiAgaWYgKG9wdGlvbnMuaGFyKSB7XG4gICAgc2VsZi5faGFyID0gbmV3IEhhcihzZWxmKVxuICAgIG9wdGlvbnMgPSBzZWxmLl9oYXIub3B0aW9ucyhvcHRpb25zKVxuICB9XG5cbiAgc3RyZWFtLlN0cmVhbS5jYWxsKHNlbGYpXG4gIHZhciByZXNlcnZlZCA9IE9iamVjdC5rZXlzKFJlcXVlc3QucHJvdG90eXBlKVxuICB2YXIgbm9uUmVzZXJ2ZWQgPSBmaWx0ZXJGb3JOb25SZXNlcnZlZChyZXNlcnZlZCwgb3B0aW9ucylcblxuICBleHRlbmQoc2VsZiwgbm9uUmVzZXJ2ZWQpXG4gIG9wdGlvbnMgPSBmaWx0ZXJPdXRSZXNlcnZlZEZ1bmN0aW9ucyhyZXNlcnZlZCwgb3B0aW9ucylcblxuICBzZWxmLnJlYWRhYmxlID0gdHJ1ZVxuICBzZWxmLndyaXRhYmxlID0gdHJ1ZVxuICBpZiAob3B0aW9ucy5tZXRob2QpIHtcbiAgICBzZWxmLmV4cGxpY2l0TWV0aG9kID0gdHJ1ZVxuICB9XG4gIHNlbGYuX3FzID0gbmV3IFF1ZXJ5c3RyaW5nKHNlbGYpXG4gIHNlbGYuX2F1dGggPSBuZXcgQXV0aChzZWxmKVxuICBzZWxmLl9vYXV0aCA9IG5ldyBPQXV0aChzZWxmKVxuICBzZWxmLl9tdWx0aXBhcnQgPSBuZXcgTXVsdGlwYXJ0KHNlbGYpXG4gIHNlbGYuX3JlZGlyZWN0ID0gbmV3IFJlZGlyZWN0KHNlbGYpXG4gIHNlbGYuX3R1bm5lbCA9IG5ldyBUdW5uZWwoc2VsZilcbiAgc2VsZi5pbml0KG9wdGlvbnMpXG59XG5cbnV0aWwuaW5oZXJpdHMoUmVxdWVzdCwgc3RyZWFtLlN0cmVhbSlcblxuLy8gRGVidWdnaW5nXG5SZXF1ZXN0LmRlYnVnID0gcHJvY2Vzcy5lbnYuTk9ERV9ERUJVRyAmJiAvXFxicmVxdWVzdFxcYi8udGVzdChwcm9jZXNzLmVudi5OT0RFX0RFQlVHKVxuZnVuY3Rpb24gZGVidWcgKCkge1xuICBpZiAoUmVxdWVzdC5kZWJ1Zykge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1JFUVVFU1QgJXMnLCB1dGlsLmZvcm1hdC5hcHBseSh1dGlsLCBhcmd1bWVudHMpKVxuICB9XG59XG5SZXF1ZXN0LnByb3RvdHlwZS5kZWJ1ZyA9IGRlYnVnXG5cblJlcXVlc3QucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAvLyBpbml0KCkgY29udGFpbnMgYWxsIHRoZSBjb2RlIHRvIHNldHVwIHRoZSByZXF1ZXN0IG9iamVjdC5cbiAgLy8gdGhlIGFjdHVhbCBvdXRnb2luZyByZXF1ZXN0IGlzIG5vdCBzdGFydGVkIHVudGlsIHN0YXJ0KCkgaXMgY2FsbGVkXG4gIC8vIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGZyb20gYm90aCB0aGUgY29uc3RydWN0b3IgYW5kIG9uIHJlZGlyZWN0LlxuICB2YXIgc2VsZiA9IHRoaXNcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9XG4gIH1cbiAgc2VsZi5oZWFkZXJzID0gc2VsZi5oZWFkZXJzID8gY29weShzZWxmLmhlYWRlcnMpIDoge31cblxuICAvLyBEZWxldGUgaGVhZGVycyB3aXRoIHZhbHVlIHVuZGVmaW5lZCBzaW5jZSB0aGV5IGJyZWFrXG4gIC8vIENsaWVudFJlcXVlc3QuT3V0Z29pbmdNZXNzYWdlLnNldEhlYWRlciBpbiBub2RlIDAuMTJcbiAgZm9yICh2YXIgaGVhZGVyTmFtZSBpbiBzZWxmLmhlYWRlcnMpIHtcbiAgICBpZiAodHlwZW9mIHNlbGYuaGVhZGVyc1toZWFkZXJOYW1lXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRlbGV0ZSBzZWxmLmhlYWRlcnNbaGVhZGVyTmFtZV1cbiAgICB9XG4gIH1cblxuICBjYXNlbGVzcy5odHRwaWZ5KHNlbGYsIHNlbGYuaGVhZGVycylcblxuICBpZiAoIXNlbGYubWV0aG9kKSB7XG4gICAgc2VsZi5tZXRob2QgPSBvcHRpb25zLm1ldGhvZCB8fCAnR0VUJ1xuICB9XG4gIGlmICghc2VsZi5sb2NhbEFkZHJlc3MpIHtcbiAgICBzZWxmLmxvY2FsQWRkcmVzcyA9IG9wdGlvbnMubG9jYWxBZGRyZXNzXG4gIH1cblxuICBzZWxmLl9xcy5pbml0KG9wdGlvbnMpXG5cbiAgZGVidWcob3B0aW9ucylcbiAgaWYgKCFzZWxmLnBvb2wgJiYgc2VsZi5wb29sICE9PSBmYWxzZSkge1xuICAgIHNlbGYucG9vbCA9IGdsb2JhbFBvb2xcbiAgfVxuICBzZWxmLmRlc3RzID0gc2VsZi5kZXN0cyB8fCBbXVxuICBzZWxmLl9faXNSZXF1ZXN0UmVxdWVzdCA9IHRydWVcblxuICAvLyBQcm90ZWN0IGFnYWluc3QgZG91YmxlIGNhbGxiYWNrXG4gIGlmICghc2VsZi5fY2FsbGJhY2sgJiYgc2VsZi5jYWxsYmFjaykge1xuICAgIHNlbGYuX2NhbGxiYWNrID0gc2VsZi5jYWxsYmFja1xuICAgIHNlbGYuY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5fY2FsbGJhY2tDYWxsZWQpIHtcbiAgICAgICAgcmV0dXJuIC8vIFByaW50IGEgd2FybmluZyBtYXliZT9cbiAgICAgIH1cbiAgICAgIHNlbGYuX2NhbGxiYWNrQ2FsbGVkID0gdHJ1ZVxuICAgICAgc2VsZi5fY2FsbGJhY2suYXBwbHkoc2VsZiwgYXJndW1lbnRzKVxuICAgIH1cbiAgICBzZWxmLm9uKCdlcnJvcicsIHNlbGYuY2FsbGJhY2suYmluZCgpKVxuICAgIHNlbGYub24oJ2NvbXBsZXRlJywgc2VsZi5jYWxsYmFjay5iaW5kKHNlbGYsIG51bGwpKVxuICB9XG5cbiAgLy8gUGVvcGxlIHVzZSB0aGlzIHByb3BlcnR5IGluc3RlYWQgYWxsIHRoZSB0aW1lLCBzbyBzdXBwb3J0IGl0XG4gIGlmICghc2VsZi51cmkgJiYgc2VsZi51cmwpIHtcbiAgICBzZWxmLnVyaSA9IHNlbGYudXJsXG4gICAgZGVsZXRlIHNlbGYudXJsXG4gIH1cblxuICAvLyBJZiB0aGVyZSdzIGEgYmFzZVVybCwgdGhlbiB1c2UgaXQgYXMgdGhlIGJhc2UgVVJMIChpLmUuIHVyaSBtdXN0IGJlXG4gIC8vIHNwZWNpZmllZCBhcyBhIHJlbGF0aXZlIHBhdGggYW5kIGlzIGFwcGVuZGVkIHRvIGJhc2VVcmwpLlxuICBpZiAoc2VsZi5iYXNlVXJsKSB7XG4gICAgaWYgKHR5cGVvZiBzZWxmLmJhc2VVcmwgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gc2VsZi5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignb3B0aW9ucy5iYXNlVXJsIG11c3QgYmUgYSBzdHJpbmcnKSlcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNlbGYudXJpICE9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHNlbGYuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ29wdGlvbnMudXJpIG11c3QgYmUgYSBzdHJpbmcgd2hlbiB1c2luZyBvcHRpb25zLmJhc2VVcmwnKSlcbiAgICB9XG5cbiAgICBpZiAoc2VsZi51cmkuaW5kZXhPZignLy8nKSA9PT0gMCB8fCBzZWxmLnVyaS5pbmRleE9mKCc6Ly8nKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBzZWxmLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdvcHRpb25zLnVyaSBtdXN0IGJlIGEgcGF0aCB3aGVuIHVzaW5nIG9wdGlvbnMuYmFzZVVybCcpKVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBhbGwgY2FzZXMgdG8gbWFrZSBzdXJlIHRoYXQgdGhlcmUncyBvbmx5IG9uZSBzbGFzaCBiZXR3ZWVuXG4gICAgLy8gYmFzZVVybCBhbmQgdXJpLlxuICAgIHZhciBiYXNlVXJsRW5kc1dpdGhTbGFzaCA9IHNlbGYuYmFzZVVybC5sYXN0SW5kZXhPZignLycpID09PSBzZWxmLmJhc2VVcmwubGVuZ3RoIC0gMVxuICAgIHZhciB1cmlTdGFydHNXaXRoU2xhc2ggPSBzZWxmLnVyaS5pbmRleE9mKCcvJykgPT09IDBcblxuICAgIGlmIChiYXNlVXJsRW5kc1dpdGhTbGFzaCAmJiB1cmlTdGFydHNXaXRoU2xhc2gpIHtcbiAgICAgIHNlbGYudXJpID0gc2VsZi5iYXNlVXJsICsgc2VsZi51cmkuc2xpY2UoMSlcbiAgICB9IGVsc2UgaWYgKGJhc2VVcmxFbmRzV2l0aFNsYXNoIHx8IHVyaVN0YXJ0c1dpdGhTbGFzaCkge1xuICAgICAgc2VsZi51cmkgPSBzZWxmLmJhc2VVcmwgKyBzZWxmLnVyaVxuICAgIH0gZWxzZSBpZiAoc2VsZi51cmkgPT09ICcnKSB7XG4gICAgICBzZWxmLnVyaSA9IHNlbGYuYmFzZVVybFxuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLnVyaSA9IHNlbGYuYmFzZVVybCArICcvJyArIHNlbGYudXJpXG4gICAgfVxuICAgIGRlbGV0ZSBzZWxmLmJhc2VVcmxcbiAgfVxuXG4gIC8vIEEgVVJJIGlzIG5lZWRlZCBieSB0aGlzIHBvaW50LCBlbWl0IGVycm9yIGlmIHdlIGhhdmVuJ3QgYmVlbiBhYmxlIHRvIGdldCBvbmVcbiAgaWYgKCFzZWxmLnVyaSkge1xuICAgIHJldHVybiBzZWxmLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdvcHRpb25zLnVyaSBpcyBhIHJlcXVpcmVkIGFyZ3VtZW50JykpXG4gIH1cblxuICAvLyBJZiBhIHN0cmluZyBVUkkvVVJMIHdhcyBnaXZlbiwgcGFyc2UgaXQgaW50byBhIFVSTCBvYmplY3RcbiAgaWYgKHR5cGVvZiBzZWxmLnVyaSA9PT0gJ3N0cmluZycpIHtcbiAgICBzZWxmLnVyaSA9IHVybC5wYXJzZShzZWxmLnVyaSlcbiAgfVxuXG4gIC8vIFNvbWUgVVJMIG9iamVjdHMgYXJlIG5vdCBmcm9tIGEgVVJMIHBhcnNlZCBzdHJpbmcgYW5kIG5lZWQgaHJlZiBhZGRlZFxuICBpZiAoIXNlbGYudXJpLmhyZWYpIHtcbiAgICBzZWxmLnVyaS5ocmVmID0gdXJsLmZvcm1hdChzZWxmLnVyaSlcbiAgfVxuXG4gIC8vIERFUFJFQ0FURUQ6IFdhcm5pbmcgZm9yIHVzZXJzIG9mIHRoZSBvbGQgVW5peCBTb2NrZXRzIFVSTCBTY2hlbWVcbiAgaWYgKHNlbGYudXJpLnByb3RvY29sID09PSAndW5peDonKSB7XG4gICAgcmV0dXJuIHNlbGYuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ2B1bml4Oi8vYCBVUkwgc2NoZW1lIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQuIFBsZWFzZSB1c2UgdGhlIGZvcm1hdCBgaHR0cDovL3VuaXg6U09DS0VUOlBBVEhgJykpXG4gIH1cblxuICAvLyBTdXBwb3J0IFVuaXggU29ja2V0c1xuICBpZiAoc2VsZi51cmkuaG9zdCA9PT0gJ3VuaXgnKSB7XG4gICAgc2VsZi5lbmFibGVVbml4U29ja2V0KClcbiAgfVxuXG4gIGlmIChzZWxmLnN0cmljdFNTTCA9PT0gZmFsc2UpIHtcbiAgICBzZWxmLnJlamVjdFVuYXV0aG9yaXplZCA9IGZhbHNlXG4gIH1cblxuICBpZiAoIXNlbGYudXJpLnBhdGhuYW1lKSB7IHNlbGYudXJpLnBhdGhuYW1lID0gJy8nIH1cblxuICBpZiAoIShzZWxmLnVyaS5ob3N0IHx8IChzZWxmLnVyaS5ob3N0bmFtZSAmJiBzZWxmLnVyaS5wb3J0KSkgJiYgIXNlbGYudXJpLmlzVW5peCkge1xuICAgIC8vIEludmFsaWQgVVJJOiBpdCBtYXkgZ2VuZXJhdGUgbG90IG9mIGJhZCBlcnJvcnMsIGxpa2UgJ1R5cGVFcnJvcjogQ2Fubm90IGNhbGwgbWV0aG9kIGBpbmRleE9mYCBvZiB1bmRlZmluZWQnIGluIENvb2tpZUphclxuICAgIC8vIERldGVjdCBhbmQgcmVqZWN0IGl0IGFzIHNvb24gYXMgcG9zc2libGVcbiAgICB2YXIgZmF1bHR5VXJpID0gdXJsLmZvcm1hdChzZWxmLnVyaSlcbiAgICB2YXIgbWVzc2FnZSA9ICdJbnZhbGlkIFVSSSBcIicgKyBmYXVsdHlVcmkgKyAnXCInXG4gICAgaWYgKE9iamVjdC5rZXlzKG9wdGlvbnMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gTm8gb3B0aW9uID8gVGhpcyBjYW4gYmUgdGhlIHNpZ24gb2YgYSByZWRpcmVjdFxuICAgICAgLy8gQXMgdGhpcyBpcyBhIGNhc2Ugd2hlcmUgdGhlIHVzZXIgY2Fubm90IGRvIGFueXRoaW5nICh0aGV5IGRpZG4ndCBjYWxsIHJlcXVlc3QgZGlyZWN0bHkgd2l0aCB0aGlzIFVSTClcbiAgICAgIC8vIHRoZXkgc2hvdWxkIGJlIHdhcm5lZCB0aGF0IGl0IGNhbiBiZSBjYXVzZWQgYnkgYSByZWRpcmVjdGlvbiAoY2FuIHNhdmUgc29tZSBoYWlyKVxuICAgICAgbWVzc2FnZSArPSAnLiBUaGlzIGNhbiBiZSBjYXVzZWQgYnkgYSBjcmFwcHkgcmVkaXJlY3Rpb24uJ1xuICAgIH1cbiAgICAvLyBUaGlzIGVycm9yIHdhcyBmYXRhbFxuICAgIHNlbGYuYWJvcnQoKVxuICAgIHJldHVybiBzZWxmLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKG1lc3NhZ2UpKVxuICB9XG5cbiAgaWYgKCFzZWxmLmhhc093blByb3BlcnR5KCdwcm94eScpKSB7XG4gICAgc2VsZi5wcm94eSA9IGdldFByb3h5RnJvbVVSSShzZWxmLnVyaSlcbiAgfVxuXG4gIHNlbGYudHVubmVsID0gc2VsZi5fdHVubmVsLmlzRW5hYmxlZCgpXG4gIGlmIChzZWxmLnByb3h5KSB7XG4gICAgc2VsZi5fdHVubmVsLnNldHVwKG9wdGlvbnMpXG4gIH1cblxuICBzZWxmLl9yZWRpcmVjdC5vblJlcXVlc3Qob3B0aW9ucylcblxuICBzZWxmLnNldEhvc3QgPSBmYWxzZVxuICBpZiAoIXNlbGYuaGFzSGVhZGVyKCdob3N0JykpIHtcbiAgICB2YXIgaG9zdEhlYWRlck5hbWUgPSBzZWxmLm9yaWdpbmFsSG9zdEhlYWRlck5hbWUgfHwgJ2hvc3QnXG4gICAgc2VsZi5zZXRIZWFkZXIoaG9zdEhlYWRlck5hbWUsIHNlbGYudXJpLmhvc3QpXG4gICAgLy8gRHJvcCA6cG9ydCBzdWZmaXggZnJvbSBIb3N0IGhlYWRlciBpZiBrbm93biBwcm90b2NvbC5cbiAgICBpZiAoc2VsZi51cmkucG9ydCkge1xuICAgICAgaWYgKChzZWxmLnVyaS5wb3J0ID09PSAnODAnICYmIHNlbGYudXJpLnByb3RvY29sID09PSAnaHR0cDonKSB8fFxuICAgICAgICAgIChzZWxmLnVyaS5wb3J0ID09PSAnNDQzJyAmJiBzZWxmLnVyaS5wcm90b2NvbCA9PT0gJ2h0dHBzOicpKSB7XG4gICAgICAgIHNlbGYuc2V0SGVhZGVyKGhvc3RIZWFkZXJOYW1lLCBzZWxmLnVyaS5ob3N0bmFtZSlcbiAgICAgIH1cbiAgICB9XG4gICAgc2VsZi5zZXRIb3N0ID0gdHJ1ZVxuICB9XG5cbiAgc2VsZi5qYXIoc2VsZi5famFyIHx8IG9wdGlvbnMuamFyKVxuXG4gIGlmICghc2VsZi51cmkucG9ydCkge1xuICAgIGlmIChzZWxmLnVyaS5wcm90b2NvbCA9PT0gJ2h0dHA6JykgeyBzZWxmLnVyaS5wb3J0ID0gODAgfSBlbHNlIGlmIChzZWxmLnVyaS5wcm90b2NvbCA9PT0gJ2h0dHBzOicpIHsgc2VsZi51cmkucG9ydCA9IDQ0MyB9XG4gIH1cblxuICBpZiAoc2VsZi5wcm94eSAmJiAhc2VsZi50dW5uZWwpIHtcbiAgICBzZWxmLnBvcnQgPSBzZWxmLnByb3h5LnBvcnRcbiAgICBzZWxmLmhvc3QgPSBzZWxmLnByb3h5Lmhvc3RuYW1lXG4gIH0gZWxzZSB7XG4gICAgc2VsZi5wb3J0ID0gc2VsZi51cmkucG9ydFxuICAgIHNlbGYuaG9zdCA9IHNlbGYudXJpLmhvc3RuYW1lXG4gIH1cblxuICBpZiAob3B0aW9ucy5mb3JtKSB7XG4gICAgc2VsZi5mb3JtKG9wdGlvbnMuZm9ybSlcbiAgfVxuXG4gIGlmIChvcHRpb25zLmZvcm1EYXRhKSB7XG4gICAgdmFyIGZvcm1EYXRhID0gb3B0aW9ucy5mb3JtRGF0YVxuICAgIHZhciByZXF1ZXN0Rm9ybSA9IHNlbGYuZm9ybSgpXG4gICAgdmFyIGFwcGVuZEZvcm1WYWx1ZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgJiYgdmFsdWUuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgJiYgdmFsdWUuaGFzT3duUHJvcGVydHkoJ29wdGlvbnMnKSkge1xuICAgICAgICByZXF1ZXN0Rm9ybS5hcHBlbmQoa2V5LCB2YWx1ZS52YWx1ZSwgdmFsdWUub3B0aW9ucylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcXVlc3RGb3JtLmFwcGVuZChrZXksIHZhbHVlKVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBmb3JtS2V5IGluIGZvcm1EYXRhKSB7XG4gICAgICBpZiAoZm9ybURhdGEuaGFzT3duUHJvcGVydHkoZm9ybUtleSkpIHtcbiAgICAgICAgdmFyIGZvcm1WYWx1ZSA9IGZvcm1EYXRhW2Zvcm1LZXldXG4gICAgICAgIGlmIChmb3JtVmFsdWUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZm9ybVZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBhcHBlbmRGb3JtVmFsdWUoZm9ybUtleSwgZm9ybVZhbHVlW2pdKVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhcHBlbmRGb3JtVmFsdWUoZm9ybUtleSwgZm9ybVZhbHVlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKG9wdGlvbnMucXMpIHtcbiAgICBzZWxmLnFzKG9wdGlvbnMucXMpXG4gIH1cblxuICBpZiAoc2VsZi51cmkucGF0aCkge1xuICAgIHNlbGYucGF0aCA9IHNlbGYudXJpLnBhdGhcbiAgfSBlbHNlIHtcbiAgICBzZWxmLnBhdGggPSBzZWxmLnVyaS5wYXRobmFtZSArIChzZWxmLnVyaS5zZWFyY2ggfHwgJycpXG4gIH1cblxuICBpZiAoc2VsZi5wYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgIHNlbGYucGF0aCA9ICcvJ1xuICB9XG5cbiAgLy8gQXV0aCBtdXN0IGhhcHBlbiBsYXN0IGluIGNhc2Ugc2lnbmluZyBpcyBkZXBlbmRlbnQgb24gb3RoZXIgaGVhZGVyc1xuICBpZiAob3B0aW9ucy5hd3MpIHtcbiAgICBzZWxmLmF3cyhvcHRpb25zLmF3cylcbiAgfVxuXG4gIGlmIChvcHRpb25zLmhhd2spIHtcbiAgICBzZWxmLmhhd2sob3B0aW9ucy5oYXdrKVxuICB9XG5cbiAgaWYgKG9wdGlvbnMuaHR0cFNpZ25hdHVyZSkge1xuICAgIHNlbGYuaHR0cFNpZ25hdHVyZShvcHRpb25zLmh0dHBTaWduYXR1cmUpXG4gIH1cblxuICBpZiAob3B0aW9ucy5hdXRoKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLmF1dGgsICd1c2VybmFtZScpKSB7XG4gICAgICBvcHRpb25zLmF1dGgudXNlciA9IG9wdGlvbnMuYXV0aC51c2VybmFtZVxuICAgIH1cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMuYXV0aCwgJ3Bhc3N3b3JkJykpIHtcbiAgICAgIG9wdGlvbnMuYXV0aC5wYXNzID0gb3B0aW9ucy5hdXRoLnBhc3N3b3JkXG4gICAgfVxuXG4gICAgc2VsZi5hdXRoKFxuICAgICAgb3B0aW9ucy5hdXRoLnVzZXIsXG4gICAgICBvcHRpb25zLmF1dGgucGFzcyxcbiAgICAgIG9wdGlvbnMuYXV0aC5zZW5kSW1tZWRpYXRlbHksXG4gICAgICBvcHRpb25zLmF1dGguYmVhcmVyXG4gICAgKVxuICB9XG5cbiAgaWYgKHNlbGYuZ3ppcCAmJiAhc2VsZi5oYXNIZWFkZXIoJ2FjY2VwdC1lbmNvZGluZycpKSB7XG4gICAgc2VsZi5zZXRIZWFkZXIoJ2FjY2VwdC1lbmNvZGluZycsICdnemlwLCBkZWZsYXRlJylcbiAgfVxuXG4gIGlmIChzZWxmLnVyaS5hdXRoICYmICFzZWxmLmhhc0hlYWRlcignYXV0aG9yaXphdGlvbicpKSB7XG4gICAgdmFyIHVyaUF1dGhQaWVjZXMgPSBzZWxmLnVyaS5hdXRoLnNwbGl0KCc6JykubWFwKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiBzZWxmLl9xcy51bmVzY2FwZShpdGVtKSB9KVxuICAgIHNlbGYuYXV0aCh1cmlBdXRoUGllY2VzWzBdLCB1cmlBdXRoUGllY2VzLnNsaWNlKDEpLmpvaW4oJzonKSwgdHJ1ZSlcbiAgfVxuXG4gIGlmICghc2VsZi50dW5uZWwgJiYgc2VsZi5wcm94eSAmJiBzZWxmLnByb3h5LmF1dGggJiYgIXNlbGYuaGFzSGVhZGVyKCdwcm94eS1hdXRob3JpemF0aW9uJykpIHtcbiAgICB2YXIgcHJveHlBdXRoUGllY2VzID0gc2VsZi5wcm94eS5hdXRoLnNwbGl0KCc6JykubWFwKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiBzZWxmLl9xcy51bmVzY2FwZShpdGVtKSB9KVxuICAgIHZhciBhdXRoSGVhZGVyID0gJ0Jhc2ljICcgKyB0b0Jhc2U2NChwcm94eUF1dGhQaWVjZXMuam9pbignOicpKVxuICAgIHNlbGYuc2V0SGVhZGVyKCdwcm94eS1hdXRob3JpemF0aW9uJywgYXV0aEhlYWRlcilcbiAgfVxuXG4gIGlmIChzZWxmLnByb3h5ICYmICFzZWxmLnR1bm5lbCkge1xuICAgIHNlbGYucGF0aCA9IChzZWxmLnVyaS5wcm90b2NvbCArICcvLycgKyBzZWxmLnVyaS5ob3N0ICsgc2VsZi5wYXRoKVxuICB9XG5cbiAgaWYgKG9wdGlvbnMuanNvbikge1xuICAgIHNlbGYuanNvbihvcHRpb25zLmpzb24pXG4gIH1cbiAgaWYgKG9wdGlvbnMubXVsdGlwYXJ0KSB7XG4gICAgc2VsZi5tdWx0aXBhcnQob3B0aW9ucy5tdWx0aXBhcnQpXG4gIH1cblxuICBpZiAob3B0aW9ucy50aW1lKSB7XG4gICAgc2VsZi50aW1pbmcgPSB0cnVlXG5cbiAgICAvLyBOT1RFOiBlbGFwc2VkVGltZSBpcyBkZXByZWNhdGVkIGluIGZhdm9yIG9mIC50aW1pbmdzXG4gICAgc2VsZi5lbGFwc2VkVGltZSA9IHNlbGYuZWxhcHNlZFRpbWUgfHwgMFxuICB9XG5cbiAgZnVuY3Rpb24gc2V0Q29udGVudExlbmd0aCAoKSB7XG4gICAgaWYgKGlzVHlwZWRBcnJheShzZWxmLmJvZHkpKSB7XG4gICAgICBzZWxmLmJvZHkgPSBCdWZmZXIuZnJvbShzZWxmLmJvZHkpXG4gICAgfVxuXG4gICAgaWYgKCFzZWxmLmhhc0hlYWRlcignY29udGVudC1sZW5ndGgnKSkge1xuICAgICAgdmFyIGxlbmd0aFxuICAgICAgaWYgKHR5cGVvZiBzZWxmLmJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGxlbmd0aCA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHNlbGYuYm9keSlcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShzZWxmLmJvZHkpKSB7XG4gICAgICAgIGxlbmd0aCA9IHNlbGYuYm9keS5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEgKyBiLmxlbmd0aCB9LCAwKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGVuZ3RoID0gc2VsZi5ib2R5Lmxlbmd0aFxuICAgICAgfVxuXG4gICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgIHNlbGYuc2V0SGVhZGVyKCdjb250ZW50LWxlbmd0aCcsIGxlbmd0aClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ0FyZ3VtZW50IGVycm9yLCBvcHRpb25zLmJvZHkuJykpXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChzZWxmLmJvZHkgJiYgIWlzc3RyZWFtKHNlbGYuYm9keSkpIHtcbiAgICBzZXRDb250ZW50TGVuZ3RoKClcbiAgfVxuXG4gIGlmIChvcHRpb25zLm9hdXRoKSB7XG4gICAgc2VsZi5vYXV0aChvcHRpb25zLm9hdXRoKVxuICB9IGVsc2UgaWYgKHNlbGYuX29hdXRoLnBhcmFtcyAmJiBzZWxmLmhhc0hlYWRlcignYXV0aG9yaXphdGlvbicpKSB7XG4gICAgc2VsZi5vYXV0aChzZWxmLl9vYXV0aC5wYXJhbXMpXG4gIH1cblxuICB2YXIgcHJvdG9jb2wgPSBzZWxmLnByb3h5ICYmICFzZWxmLnR1bm5lbCA/IHNlbGYucHJveHkucHJvdG9jb2wgOiBzZWxmLnVyaS5wcm90b2NvbFxuICB2YXIgZGVmYXVsdE1vZHVsZXMgPSB7J2h0dHA6JzogaHR0cCwgJ2h0dHBzOic6IGh0dHBzfVxuICB2YXIgaHR0cE1vZHVsZXMgPSBzZWxmLmh0dHBNb2R1bGVzIHx8IHt9XG5cbiAgc2VsZi5odHRwTW9kdWxlID0gaHR0cE1vZHVsZXNbcHJvdG9jb2xdIHx8IGRlZmF1bHRNb2R1bGVzW3Byb3RvY29sXVxuXG4gIGlmICghc2VsZi5odHRwTW9kdWxlKSB7XG4gICAgcmV0dXJuIHNlbGYuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ0ludmFsaWQgcHJvdG9jb2w6ICcgKyBwcm90b2NvbCkpXG4gIH1cblxuICBpZiAob3B0aW9ucy5jYSkge1xuICAgIHNlbGYuY2EgPSBvcHRpb25zLmNhXG4gIH1cblxuICBpZiAoIXNlbGYuYWdlbnQpIHtcbiAgICBpZiAob3B0aW9ucy5hZ2VudE9wdGlvbnMpIHtcbiAgICAgIHNlbGYuYWdlbnRPcHRpb25zID0gb3B0aW9ucy5hZ2VudE9wdGlvbnNcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5hZ2VudENsYXNzKSB7XG4gICAgICBzZWxmLmFnZW50Q2xhc3MgPSBvcHRpb25zLmFnZW50Q2xhc3NcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZm9yZXZlcikge1xuICAgICAgdmFyIHYgPSB2ZXJzaW9uKClcbiAgICAgIC8vIHVzZSBGb3JldmVyQWdlbnQgaW4gbm9kZSAwLjEwLSBvbmx5XG4gICAgICBpZiAodi5tYWpvciA9PT0gMCAmJiB2Lm1pbm9yIDw9IDEwKSB7XG4gICAgICAgIHNlbGYuYWdlbnRDbGFzcyA9IHByb3RvY29sID09PSAnaHR0cDonID8gRm9yZXZlckFnZW50IDogRm9yZXZlckFnZW50LlNTTFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5hZ2VudENsYXNzID0gc2VsZi5odHRwTW9kdWxlLkFnZW50XG4gICAgICAgIHNlbGYuYWdlbnRPcHRpb25zID0gc2VsZi5hZ2VudE9wdGlvbnMgfHwge31cbiAgICAgICAgc2VsZi5hZ2VudE9wdGlvbnMua2VlcEFsaXZlID0gdHJ1ZVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLmFnZW50Q2xhc3MgPSBzZWxmLmh0dHBNb2R1bGUuQWdlbnRcbiAgICB9XG4gIH1cblxuICBpZiAoc2VsZi5wb29sID09PSBmYWxzZSkge1xuICAgIHNlbGYuYWdlbnQgPSBmYWxzZVxuICB9IGVsc2Uge1xuICAgIHNlbGYuYWdlbnQgPSBzZWxmLmFnZW50IHx8IHNlbGYuZ2V0TmV3QWdlbnQoKVxuICB9XG5cbiAgc2VsZi5vbigncGlwZScsIGZ1bmN0aW9uIChzcmMpIHtcbiAgICBpZiAoc2VsZi5udGljayAmJiBzZWxmLl9zdGFydGVkKSB7XG4gICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdZb3UgY2Fubm90IHBpcGUgdG8gdGhpcyBzdHJlYW0gYWZ0ZXIgdGhlIG91dGJvdW5kIHJlcXVlc3QgaGFzIHN0YXJ0ZWQuJykpXG4gICAgfVxuICAgIHNlbGYuc3JjID0gc3JjXG4gICAgaWYgKGlzUmVhZFN0cmVhbShzcmMpKSB7XG4gICAgICBpZiAoIXNlbGYuaGFzSGVhZGVyKCdjb250ZW50LXR5cGUnKSkge1xuICAgICAgICBzZWxmLnNldEhlYWRlcignY29udGVudC10eXBlJywgbWltZS5sb29rdXAoc3JjLnBhdGgpKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3JjLmhlYWRlcnMpIHtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBzcmMuaGVhZGVycykge1xuICAgICAgICAgIGlmICghc2VsZi5oYXNIZWFkZXIoaSkpIHtcbiAgICAgICAgICAgIHNlbGYuc2V0SGVhZGVyKGksIHNyYy5oZWFkZXJzW2ldKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHNlbGYuX2pzb24gJiYgIXNlbGYuaGFzSGVhZGVyKCdjb250ZW50LXR5cGUnKSkge1xuICAgICAgICBzZWxmLnNldEhlYWRlcignY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKVxuICAgICAgfVxuICAgICAgaWYgKHNyYy5tZXRob2QgJiYgIXNlbGYuZXhwbGljaXRNZXRob2QpIHtcbiAgICAgICAgc2VsZi5tZXRob2QgPSBzcmMubWV0aG9kXG4gICAgICB9XG4gICAgfVxuXG4gIC8vIHNlbGYub24oJ3BpcGUnLCBmdW5jdGlvbiAoKSB7XG4gIC8vICAgY29uc29sZS5lcnJvcignWW91IGhhdmUgYWxyZWFkeSBwaXBlZCB0byB0aGlzIHN0cmVhbS4gUGlwZWluZyB0d2ljZSBpcyBsaWtlbHkgdG8gYnJlYWsgdGhlIHJlcXVlc3QuJylcbiAgLy8gfSlcbiAgfSlcblxuICBkZWZlcihmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHNlbGYuX2Fib3J0ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5fZm9ybSkge1xuICAgICAgICBpZiAoIXNlbGYuX2F1dGguaGFzQXV0aCkge1xuICAgICAgICAgIHNlbGYuX2Zvcm0ucGlwZShzZWxmKVxuICAgICAgICB9IGVsc2UgaWYgKHNlbGYuX2F1dGguaGFzQXV0aCAmJiBzZWxmLl9hdXRoLnNlbnRBdXRoKSB7XG4gICAgICAgICAgc2VsZi5fZm9ybS5waXBlKHNlbGYpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzZWxmLl9tdWx0aXBhcnQgJiYgc2VsZi5fbXVsdGlwYXJ0LmNodW5rZWQpIHtcbiAgICAgICAgc2VsZi5fbXVsdGlwYXJ0LmJvZHkucGlwZShzZWxmKVxuICAgICAgfVxuICAgICAgaWYgKHNlbGYuYm9keSkge1xuICAgICAgICBpZiAoaXNzdHJlYW0oc2VsZi5ib2R5KSkge1xuICAgICAgICAgIHNlbGYuYm9keS5waXBlKHNlbGYpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0Q29udGVudExlbmd0aCgpXG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2VsZi5ib2R5KSkge1xuICAgICAgICAgICAgc2VsZi5ib2R5LmZvckVhY2goZnVuY3Rpb24gKHBhcnQpIHtcbiAgICAgICAgICAgICAgc2VsZi53cml0ZShwYXJ0KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi53cml0ZShzZWxmLmJvZHkpXG4gICAgICAgICAgfVxuICAgICAgICAgIHNlbGYuZW5kKClcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzZWxmLnJlcXVlc3RCb2R5U3RyZWFtKSB7XG4gICAgICAgIGNvbnNvbGUud2Fybignb3B0aW9ucy5yZXF1ZXN0Qm9keVN0cmVhbSBpcyBkZXByZWNhdGVkLCBwbGVhc2UgcGFzcyB0aGUgcmVxdWVzdCBvYmplY3QgdG8gc3RyZWFtLnBpcGUuJylcbiAgICAgICAgc2VsZi5yZXF1ZXN0Qm9keVN0cmVhbS5waXBlKHNlbGYpXG4gICAgICB9IGVsc2UgaWYgKCFzZWxmLnNyYykge1xuICAgICAgICBpZiAoc2VsZi5fYXV0aC5oYXNBdXRoICYmICFzZWxmLl9hdXRoLnNlbnRBdXRoKSB7XG4gICAgICAgICAgc2VsZi5lbmQoKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxmLm1ldGhvZCAhPT0gJ0dFVCcgJiYgdHlwZW9mIHNlbGYubWV0aG9kICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHNlbGYuc2V0SGVhZGVyKCdjb250ZW50LWxlbmd0aCcsIDApXG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5lbmQoKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzZWxmLl9mb3JtICYmICFzZWxmLmhhc0hlYWRlcignY29udGVudC1sZW5ndGgnKSkge1xuICAgICAgLy8gQmVmb3JlIGVuZGluZyB0aGUgcmVxdWVzdCwgd2UgaGFkIHRvIGNvbXB1dGUgdGhlIGxlbmd0aCBvZiB0aGUgd2hvbGUgZm9ybSwgYXN5bmNseVxuICAgICAgc2VsZi5zZXRIZWFkZXIoc2VsZi5fZm9ybS5nZXRIZWFkZXJzKCksIHRydWUpXG4gICAgICBzZWxmLl9mb3JtLmdldExlbmd0aChmdW5jdGlvbiAoZXJyLCBsZW5ndGgpIHtcbiAgICAgICAgaWYgKCFlcnIgJiYgIWlzTmFOKGxlbmd0aCkpIHtcbiAgICAgICAgICBzZWxmLnNldEhlYWRlcignY29udGVudC1sZW5ndGgnLCBsZW5ndGgpXG4gICAgICAgIH1cbiAgICAgICAgZW5kKClcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuZCgpXG4gICAgfVxuXG4gICAgc2VsZi5udGljayA9IHRydWVcbiAgfSlcbn1cblxuUmVxdWVzdC5wcm90b3R5cGUuZ2V0TmV3QWdlbnQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgQWdlbnQgPSBzZWxmLmFnZW50Q2xhc3NcbiAgdmFyIG9wdGlvbnMgPSB7fVxuICBpZiAoc2VsZi5hZ2VudE9wdGlvbnMpIHtcbiAgICBmb3IgKHZhciBpIGluIHNlbGYuYWdlbnRPcHRpb25zKSB7XG4gICAgICBvcHRpb25zW2ldID0gc2VsZi5hZ2VudE9wdGlvbnNbaV1cbiAgICB9XG4gIH1cbiAgaWYgKHNlbGYuY2EpIHtcbiAgICBvcHRpb25zLmNhID0gc2VsZi5jYVxuICB9XG4gIGlmIChzZWxmLmNpcGhlcnMpIHtcbiAgICBvcHRpb25zLmNpcGhlcnMgPSBzZWxmLmNpcGhlcnNcbiAgfVxuICBpZiAoc2VsZi5zZWN1cmVQcm90b2NvbCkge1xuICAgIG9wdGlvbnMuc2VjdXJlUHJvdG9jb2wgPSBzZWxmLnNlY3VyZVByb3RvY29sXG4gIH1cbiAgaWYgKHNlbGYuc2VjdXJlT3B0aW9ucykge1xuICAgIG9wdGlvbnMuc2VjdXJlT3B0aW9ucyA9IHNlbGYuc2VjdXJlT3B0aW9uc1xuICB9XG4gIGlmICh0eXBlb2Ygc2VsZi5yZWplY3RVbmF1dGhvcml6ZWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgb3B0aW9ucy5yZWplY3RVbmF1dGhvcml6ZWQgPSBzZWxmLnJlamVjdFVuYXV0aG9yaXplZFxuICB9XG5cbiAgaWYgKHNlbGYuY2VydCAmJiBzZWxmLmtleSkge1xuICAgIG9wdGlvbnMua2V5ID0gc2VsZi5rZXlcbiAgICBvcHRpb25zLmNlcnQgPSBzZWxmLmNlcnRcbiAgfVxuXG4gIGlmIChzZWxmLnBmeCkge1xuICAgIG9wdGlvbnMucGZ4ID0gc2VsZi5wZnhcbiAgfVxuXG4gIGlmIChzZWxmLnBhc3NwaHJhc2UpIHtcbiAgICBvcHRpb25zLnBhc3NwaHJhc2UgPSBzZWxmLnBhc3NwaHJhc2VcbiAgfVxuXG4gIHZhciBwb29sS2V5ID0gJydcblxuICAvLyBkaWZmZXJlbnQgdHlwZXMgb2YgYWdlbnRzIGFyZSBpbiBkaWZmZXJlbnQgcG9vbHNcbiAgaWYgKEFnZW50ICE9PSBzZWxmLmh0dHBNb2R1bGUuQWdlbnQpIHtcbiAgICBwb29sS2V5ICs9IEFnZW50Lm5hbWVcbiAgfVxuXG4gIC8vIGNhIG9wdGlvbiBpcyBvbmx5IHJlbGV2YW50IGlmIHByb3h5IG9yIGRlc3RpbmF0aW9uIGFyZSBodHRwc1xuICB2YXIgcHJveHkgPSBzZWxmLnByb3h5XG4gIGlmICh0eXBlb2YgcHJveHkgPT09ICdzdHJpbmcnKSB7XG4gICAgcHJveHkgPSB1cmwucGFyc2UocHJveHkpXG4gIH1cbiAgdmFyIGlzSHR0cHMgPSAocHJveHkgJiYgcHJveHkucHJvdG9jb2wgPT09ICdodHRwczonKSB8fCB0aGlzLnVyaS5wcm90b2NvbCA9PT0gJ2h0dHBzOidcblxuICBpZiAoaXNIdHRwcykge1xuICAgIGlmIChvcHRpb25zLmNhKSB7XG4gICAgICBpZiAocG9vbEtleSkge1xuICAgICAgICBwb29sS2V5ICs9ICc6J1xuICAgICAgfVxuICAgICAgcG9vbEtleSArPSBvcHRpb25zLmNhXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnJlamVjdFVuYXV0aG9yaXplZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChwb29sS2V5KSB7XG4gICAgICAgIHBvb2xLZXkgKz0gJzonXG4gICAgICB9XG4gICAgICBwb29sS2V5ICs9IG9wdGlvbnMucmVqZWN0VW5hdXRob3JpemVkXG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY2VydCkge1xuICAgICAgaWYgKHBvb2xLZXkpIHtcbiAgICAgICAgcG9vbEtleSArPSAnOidcbiAgICAgIH1cbiAgICAgIHBvb2xLZXkgKz0gb3B0aW9ucy5jZXJ0LnRvU3RyaW5nKCdhc2NpaScpICsgb3B0aW9ucy5rZXkudG9TdHJpbmcoJ2FzY2lpJylcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5wZngpIHtcbiAgICAgIGlmIChwb29sS2V5KSB7XG4gICAgICAgIHBvb2xLZXkgKz0gJzonXG4gICAgICB9XG4gICAgICBwb29sS2V5ICs9IG9wdGlvbnMucGZ4LnRvU3RyaW5nKCdhc2NpaScpXG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY2lwaGVycykge1xuICAgICAgaWYgKHBvb2xLZXkpIHtcbiAgICAgICAgcG9vbEtleSArPSAnOidcbiAgICAgIH1cbiAgICAgIHBvb2xLZXkgKz0gb3B0aW9ucy5jaXBoZXJzXG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuc2VjdXJlUHJvdG9jb2wpIHtcbiAgICAgIGlmIChwb29sS2V5KSB7XG4gICAgICAgIHBvb2xLZXkgKz0gJzonXG4gICAgICB9XG4gICAgICBwb29sS2V5ICs9IG9wdGlvbnMuc2VjdXJlUHJvdG9jb2xcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zZWN1cmVPcHRpb25zKSB7XG4gICAgICBpZiAocG9vbEtleSkge1xuICAgICAgICBwb29sS2V5ICs9ICc6J1xuICAgICAgfVxuICAgICAgcG9vbEtleSArPSBvcHRpb25zLnNlY3VyZU9wdGlvbnNcbiAgICB9XG4gIH1cblxuICBpZiAoc2VsZi5wb29sID09PSBnbG9iYWxQb29sICYmICFwb29sS2V5ICYmIE9iamVjdC5rZXlzKG9wdGlvbnMpLmxlbmd0aCA9PT0gMCAmJiBzZWxmLmh0dHBNb2R1bGUuZ2xvYmFsQWdlbnQpIHtcbiAgICAvLyBub3QgZG9pbmcgYW55dGhpbmcgc3BlY2lhbC4gIFVzZSB0aGUgZ2xvYmFsQWdlbnRcbiAgICByZXR1cm4gc2VsZi5odHRwTW9kdWxlLmdsb2JhbEFnZW50XG4gIH1cblxuICAvLyB3ZSdyZSB1c2luZyBhIHN0b3JlZCBhZ2VudC4gIE1ha2Ugc3VyZSBpdCdzIHByb3RvY29sLXNwZWNpZmljXG4gIHBvb2xLZXkgPSBzZWxmLnVyaS5wcm90b2NvbCArIHBvb2xLZXlcblxuICAvLyBnZW5lcmF0ZSBhIG5ldyBhZ2VudCBmb3IgdGhpcyBzZXR0aW5nIGlmIG5vbmUgeWV0IGV4aXN0c1xuICBpZiAoIXNlbGYucG9vbFtwb29sS2V5XSkge1xuICAgIHNlbGYucG9vbFtwb29sS2V5XSA9IG5ldyBBZ2VudChvcHRpb25zKVxuICAgIC8vIHByb3Blcmx5IHNldCBtYXhTb2NrZXRzIG9uIG5ldyBhZ2VudHNcbiAgICBpZiAoc2VsZi5wb29sLm1heFNvY2tldHMpIHtcbiAgICAgIHNlbGYucG9vbFtwb29sS2V5XS5tYXhTb2NrZXRzID0gc2VsZi5wb29sLm1heFNvY2tldHNcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2VsZi5wb29sW3Bvb2xLZXldXG59XG5cblJlcXVlc3QucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBzdGFydCgpIGlzIGNhbGxlZCBvbmNlIHdlIGFyZSByZWFkeSB0byBzZW5kIHRoZSBvdXRnb2luZyBIVFRQIHJlcXVlc3QuXG4gIC8vIHRoaXMgaXMgdXN1YWxseSBjYWxsZWQgb24gdGhlIGZpcnN0IHdyaXRlKCksIGVuZCgpIG9yIG9uIG5leHRUaWNrKClcbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgaWYgKHNlbGYudGltaW5nKSB7XG4gICAgLy8gQWxsIHRpbWluZ3Mgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzIHJlcXVlc3QncyBzdGFydFRpbWUuICBJbiBvcmRlciB0byBkbyB0aGlzLFxuICAgIC8vIHdlIG5lZWQgdG8gY2FwdHVyZSB0aGUgd2FsbC1jbG9jayBzdGFydCB0aW1lICh2aWEgRGF0ZSksIGltbWVkaWF0ZWx5IGZvbGxvd2VkXG4gICAgLy8gYnkgdGhlIGhpZ2gtcmVzb2x1dGlvbiB0aW1lciAodmlhIG5vdygpKS4gIFdoaWxlIHRoZXNlIHR3byB3b24ndCBiZSBzZXRcbiAgICAvLyBhdCB0aGUgX2V4YWN0XyBzYW1lIHRpbWUsIHRoZXkgc2hvdWxkIGJlIGNsb3NlIGVub3VnaCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZVxuICAgIC8vIGhpZ2gtcmVzb2x1dGlvbiwgbW9ub3RvbmljYWxseSBub24tZGVjcmVhc2luZyB0aW1lc3RhbXBzIHJlbGF0aXZlIHRvIHN0YXJ0VGltZS5cbiAgICB2YXIgc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKClcbiAgICB2YXIgc3RhcnRUaW1lTm93ID0gbm93KClcbiAgfVxuXG4gIGlmIChzZWxmLl9hYm9ydGVkKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBzZWxmLl9zdGFydGVkID0gdHJ1ZVxuICBzZWxmLm1ldGhvZCA9IHNlbGYubWV0aG9kIHx8ICdHRVQnXG4gIHNlbGYuaHJlZiA9IHNlbGYudXJpLmhyZWZcblxuICBpZiAoc2VsZi5zcmMgJiYgc2VsZi5zcmMuc3RhdCAmJiBzZWxmLnNyYy5zdGF0LnNpemUgJiYgIXNlbGYuaGFzSGVhZGVyKCdjb250ZW50LWxlbmd0aCcpKSB7XG4gICAgc2VsZi5zZXRIZWFkZXIoJ2NvbnRlbnQtbGVuZ3RoJywgc2VsZi5zcmMuc3RhdC5zaXplKVxuICB9XG4gIGlmIChzZWxmLl9hd3MpIHtcbiAgICBzZWxmLmF3cyhzZWxmLl9hd3MsIHRydWUpXG4gIH1cblxuICAvLyBXZSBoYXZlIGEgbWV0aG9kIG5hbWVkIGF1dGgsIHdoaWNoIGlzIGNvbXBsZXRlbHkgZGlmZmVyZW50IGZyb20gdGhlIGh0dHAucmVxdWVzdFxuICAvLyBhdXRoIG9wdGlvbi4gIElmIHdlIGRvbid0IHJlbW92ZSBpdCwgd2UncmUgZ29ubmEgaGF2ZSBhIGJhZCB0aW1lLlxuICB2YXIgcmVxT3B0aW9ucyA9IGNvcHkoc2VsZilcbiAgZGVsZXRlIHJlcU9wdGlvbnMuYXV0aFxuXG4gIGRlYnVnKCdtYWtlIHJlcXVlc3QnLCBzZWxmLnVyaS5ocmVmKVxuXG4gIC8vIG5vZGUgdjYuOC4wIG5vdyBzdXBwb3J0cyBhIGB0aW1lb3V0YCB2YWx1ZSBpbiBgaHR0cC5yZXF1ZXN0KClgLCBidXQgd2VcbiAgLy8gc2hvdWxkIGRlbGV0ZSBpdCBmb3Igbm93IHNpbmNlIHdlIGhhbmRsZSB0aW1lb3V0cyBtYW51YWxseSBmb3IgYmV0dGVyXG4gIC8vIGNvbnNpc3RlbmN5IHdpdGggbm9kZSB2ZXJzaW9ucyBiZWZvcmUgdjYuOC4wXG4gIGRlbGV0ZSByZXFPcHRpb25zLnRpbWVvdXRcblxuICB0cnkge1xuICAgIHNlbGYucmVxID0gc2VsZi5odHRwTW9kdWxlLnJlcXVlc3QocmVxT3B0aW9ucylcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgc2VsZi5lbWl0KCdlcnJvcicsIGVycilcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmIChzZWxmLnRpbWluZykge1xuICAgIHNlbGYuc3RhcnRUaW1lID0gc3RhcnRUaW1lXG4gICAgc2VsZi5zdGFydFRpbWVOb3cgPSBzdGFydFRpbWVOb3dcblxuICAgIC8vIFRpbWluZyB2YWx1ZXMgd2lsbCBhbGwgYmUgcmVsYXRpdmUgdG8gc3RhcnRUaW1lIChieSBjb21wYXJpbmcgdG8gc3RhcnRUaW1lTm93XG4gICAgLy8gc28gd2UgaGF2ZSBhbiBhY2N1cmF0ZSBjbG9jaylcbiAgICBzZWxmLnRpbWluZ3MgPSB7fVxuICB9XG5cbiAgdmFyIHRpbWVvdXRcbiAgaWYgKHNlbGYudGltZW91dCAmJiAhc2VsZi50aW1lb3V0VGltZXIpIHtcbiAgICBpZiAoc2VsZi50aW1lb3V0IDwgMCkge1xuICAgICAgdGltZW91dCA9IDBcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzZWxmLnRpbWVvdXQgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHNlbGYudGltZW91dCkpIHtcbiAgICAgIHRpbWVvdXQgPSBzZWxmLnRpbWVvdXRcbiAgICB9XG4gIH1cblxuICBzZWxmLnJlcS5vbigncmVzcG9uc2UnLCBzZWxmLm9uUmVxdWVzdFJlc3BvbnNlLmJpbmQoc2VsZikpXG4gIHNlbGYucmVxLm9uKCdlcnJvcicsIHNlbGYub25SZXF1ZXN0RXJyb3IuYmluZChzZWxmKSlcbiAgc2VsZi5yZXEub24oJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgIHNlbGYuZW1pdCgnZHJhaW4nKVxuICB9KVxuXG4gIHNlbGYucmVxLm9uKCdzb2NrZXQnLCBmdW5jdGlvbiAoc29ja2V0KSB7XG4gICAgLy8gYC5fY29ubmVjdGluZ2Agd2FzIHRoZSBvbGQgcHJvcGVydHkgd2hpY2ggd2FzIG1hZGUgcHVibGljIGluIG5vZGUgdjYuMS4wXG4gICAgdmFyIGlzQ29ubmVjdGluZyA9IHNvY2tldC5fY29ubmVjdGluZyB8fCBzb2NrZXQuY29ubmVjdGluZ1xuICAgIGlmIChzZWxmLnRpbWluZykge1xuICAgICAgc2VsZi50aW1pbmdzLnNvY2tldCA9IG5vdygpIC0gc2VsZi5zdGFydFRpbWVOb3dcblxuICAgICAgaWYgKGlzQ29ubmVjdGluZykge1xuICAgICAgICB2YXIgb25Mb29rdXBUaW1pbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc2VsZi50aW1pbmdzLmxvb2t1cCA9IG5vdygpIC0gc2VsZi5zdGFydFRpbWVOb3dcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvbkNvbm5lY3RUaW1pbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc2VsZi50aW1pbmdzLmNvbm5lY3QgPSBub3coKSAtIHNlbGYuc3RhcnRUaW1lTm93XG4gICAgICAgIH1cblxuICAgICAgICBzb2NrZXQub25jZSgnbG9va3VwJywgb25Mb29rdXBUaW1pbmcpXG4gICAgICAgIHNvY2tldC5vbmNlKCdjb25uZWN0Jywgb25Db25uZWN0VGltaW5nKVxuXG4gICAgICAgIC8vIGNsZWFuIHVwIHRpbWluZyBldmVudCBsaXN0ZW5lcnMgaWYgbmVlZGVkIG9uIGVycm9yXG4gICAgICAgIHNlbGYucmVxLm9uY2UoJ2Vycm9yJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcignbG9va3VwJywgb25Mb29rdXBUaW1pbmcpXG4gICAgICAgICAgc29ja2V0LnJlbW92ZUxpc3RlbmVyKCdjb25uZWN0Jywgb25Db25uZWN0VGltaW5nKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzZXRSZXFUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVGhpcyB0aW1lb3V0IHNldHMgdGhlIGFtb3VudCBvZiB0aW1lIHRvIHdhaXQgKmJldHdlZW4qIGJ5dGVzIHNlbnRcbiAgICAgIC8vIGZyb20gdGhlIHNlcnZlciBvbmNlIGNvbm5lY3RlZC5cbiAgICAgIC8vXG4gICAgICAvLyBJbiBwYXJ0aWN1bGFyLCBpdCdzIHVzZWZ1bCBmb3IgZXJyb3JpbmcgaWYgdGhlIHNlcnZlciBmYWlscyB0byBzZW5kXG4gICAgICAvLyBkYXRhIGhhbGZ3YXkgdGhyb3VnaCBzdHJlYW1pbmcgYSByZXNwb25zZS5cbiAgICAgIHNlbGYucmVxLnNldFRpbWVvdXQodGltZW91dCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoc2VsZi5yZXEpIHtcbiAgICAgICAgICBzZWxmLmFib3J0KClcbiAgICAgICAgICB2YXIgZSA9IG5ldyBFcnJvcignRVNPQ0tFVFRJTUVET1VUJylcbiAgICAgICAgICBlLmNvZGUgPSAnRVNPQ0tFVFRJTUVET1VUJ1xuICAgICAgICAgIGUuY29ubmVjdCA9IGZhbHNlXG4gICAgICAgICAgc2VsZi5lbWl0KCdlcnJvcicsIGUpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICAgIGlmICh0aW1lb3V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIE9ubHkgc3RhcnQgdGhlIGNvbm5lY3Rpb24gdGltZXIgaWYgd2UncmUgYWN0dWFsbHkgY29ubmVjdGluZyBhIG5ld1xuICAgICAgLy8gc29ja2V0LCBvdGhlcndpc2UgaWYgd2UncmUgYWxyZWFkeSBjb25uZWN0ZWQgKGJlY2F1c2UgdGhpcyBpcyBhXG4gICAgICAvLyBrZWVwLWFsaXZlIGNvbm5lY3Rpb24pIGRvIG5vdCBib3RoZXIuIFRoaXMgaXMgaW1wb3J0YW50IHNpbmNlIHdlIHdvbid0XG4gICAgICAvLyBnZXQgYSAnY29ubmVjdCcgZXZlbnQgZm9yIGFuIGFscmVhZHkgY29ubmVjdGVkIHNvY2tldC5cbiAgICAgIGlmIChpc0Nvbm5lY3RpbmcpIHtcbiAgICAgICAgdmFyIG9uUmVxU29ja0Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc29ja2V0LnJlbW92ZUxpc3RlbmVyKCdjb25uZWN0Jywgb25SZXFTb2NrQ29ubmVjdClcbiAgICAgICAgICBzZWxmLmNsZWFyVGltZW91dCgpXG4gICAgICAgICAgc2V0UmVxVGltZW91dCgpXG4gICAgICAgIH1cblxuICAgICAgICBzb2NrZXQub24oJ2Nvbm5lY3QnLCBvblJlcVNvY2tDb25uZWN0KVxuXG4gICAgICAgIHNlbGYucmVxLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBoYW5kbGUtY2FsbGJhY2stZXJyXG4gICAgICAgICAgc29ja2V0LnJlbW92ZUxpc3RlbmVyKCdjb25uZWN0Jywgb25SZXFTb2NrQ29ubmVjdClcbiAgICAgICAgfSlcblxuICAgICAgICAvLyBTZXQgYSB0aW1lb3V0IGluIG1lbW9yeSAtIHRoaXMgYmxvY2sgd2lsbCB0aHJvdyBpZiB0aGUgc2VydmVyIHRha2VzIG1vcmVcbiAgICAgICAgLy8gdGhhbiBgdGltZW91dGAgdG8gd3JpdGUgdGhlIEhUVFAgc3RhdHVzIGFuZCBoZWFkZXJzIChjb3JyZXNwb25kaW5nIHRvXG4gICAgICAgIC8vIHRoZSBvbigncmVzcG9uc2UnKSBldmVudCBvbiB0aGUgY2xpZW50KS4gTkI6IHRoaXMgbWVhc3VyZXMgd2FsbC1jbG9ja1xuICAgICAgICAvLyB0aW1lLCBub3QgdGhlIHRpbWUgYmV0d2VlbiBieXRlcyBzZW50IGJ5IHRoZSBzZXJ2ZXIuXG4gICAgICAgIHNlbGYudGltZW91dFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc29ja2V0LnJlbW92ZUxpc3RlbmVyKCdjb25uZWN0Jywgb25SZXFTb2NrQ29ubmVjdClcbiAgICAgICAgICBzZWxmLmFib3J0KClcbiAgICAgICAgICB2YXIgZSA9IG5ldyBFcnJvcignRVRJTUVET1VUJylcbiAgICAgICAgICBlLmNvZGUgPSAnRVRJTUVET1VUJ1xuICAgICAgICAgIGUuY29ubmVjdCA9IHRydWVcbiAgICAgICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZSlcbiAgICAgICAgfSwgdGltZW91dClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFdlJ3JlIGFscmVhZHkgY29ubmVjdGVkXG4gICAgICAgIHNldFJlcVRpbWVvdXQoKVxuICAgICAgfVxuICAgIH1cbiAgICBzZWxmLmVtaXQoJ3NvY2tldCcsIHNvY2tldClcbiAgfSlcblxuICBzZWxmLmVtaXQoJ3JlcXVlc3QnLCBzZWxmLnJlcSlcbn1cblxuUmVxdWVzdC5wcm90b3R5cGUub25SZXF1ZXN0RXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGlmIChzZWxmLl9hYm9ydGVkKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHNlbGYucmVxICYmIHNlbGYucmVxLl9yZXVzZWRTb2NrZXQgJiYgZXJyb3IuY29kZSA9PT0gJ0VDT05OUkVTRVQnICYmXG4gICAgc2VsZi5hZ2VudC5hZGRSZXF1ZXN0Tm9yZXVzZSkge1xuICAgIHNlbGYuYWdlbnQgPSB7IGFkZFJlcXVlc3Q6IHNlbGYuYWdlbnQuYWRkUmVxdWVzdE5vcmV1c2UuYmluZChzZWxmLmFnZW50KSB9XG4gICAgc2VsZi5zdGFydCgpXG4gICAgc2VsZi5yZXEuZW5kKClcbiAgICByZXR1cm5cbiAgfVxuICBzZWxmLmNsZWFyVGltZW91dCgpXG4gIHNlbGYuZW1pdCgnZXJyb3InLCBlcnJvcilcbn1cblxuUmVxdWVzdC5wcm90b3R5cGUub25SZXF1ZXN0UmVzcG9uc2UgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgaWYgKHNlbGYudGltaW5nKSB7XG4gICAgc2VsZi50aW1pbmdzLnJlc3BvbnNlID0gbm93KCkgLSBzZWxmLnN0YXJ0VGltZU5vd1xuICB9XG5cbiAgZGVidWcoJ29uUmVxdWVzdFJlc3BvbnNlJywgc2VsZi51cmkuaHJlZiwgcmVzcG9uc2Uuc3RhdHVzQ29kZSwgcmVzcG9uc2UuaGVhZGVycylcbiAgcmVzcG9uc2Uub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc2VsZi50aW1pbmcpIHtcbiAgICAgIHNlbGYudGltaW5ncy5lbmQgPSBub3coKSAtIHNlbGYuc3RhcnRUaW1lTm93XG4gICAgICByZXNwb25zZS50aW1pbmdTdGFydCA9IHNlbGYuc3RhcnRUaW1lXG5cbiAgICAgIC8vIGZpbGwgaW4gdGhlIGJsYW5rcyBmb3IgYW55IHBlcmlvZHMgdGhhdCBkaWRuJ3QgdHJpZ2dlciwgc3VjaCBhc1xuICAgICAgLy8gbm8gbG9va3VwIG9yIGNvbm5lY3QgZHVlIHRvIGtlZXAgYWxpdmVcbiAgICAgIGlmICghc2VsZi50aW1pbmdzLnNvY2tldCkge1xuICAgICAgICBzZWxmLnRpbWluZ3Muc29ja2V0ID0gMFxuICAgICAgfVxuICAgICAgaWYgKCFzZWxmLnRpbWluZ3MubG9va3VwKSB7XG4gICAgICAgIHNlbGYudGltaW5ncy5sb29rdXAgPSBzZWxmLnRpbWluZ3Muc29ja2V0XG4gICAgICB9XG4gICAgICBpZiAoIXNlbGYudGltaW5ncy5jb25uZWN0KSB7XG4gICAgICAgIHNlbGYudGltaW5ncy5jb25uZWN0ID0gc2VsZi50aW1pbmdzLmxvb2t1cFxuICAgICAgfVxuICAgICAgaWYgKCFzZWxmLnRpbWluZ3MucmVzcG9uc2UpIHtcbiAgICAgICAgc2VsZi50aW1pbmdzLnJlc3BvbnNlID0gc2VsZi50aW1pbmdzLmNvbm5lY3RcbiAgICAgIH1cblxuICAgICAgZGVidWcoJ2VsYXBzZWQgdGltZScsIHNlbGYudGltaW5ncy5lbmQpXG5cbiAgICAgIC8vIGVsYXBzZWRUaW1lIGluY2x1ZGVzIGFsbCByZWRpcmVjdHNcbiAgICAgIHNlbGYuZWxhcHNlZFRpbWUgKz0gTWF0aC5yb3VuZChzZWxmLnRpbWluZ3MuZW5kKVxuXG4gICAgICAvLyBOT1RFOiBlbGFwc2VkVGltZSBpcyBkZXByZWNhdGVkIGluIGZhdm9yIG9mIC50aW1pbmdzXG4gICAgICByZXNwb25zZS5lbGFwc2VkVGltZSA9IHNlbGYuZWxhcHNlZFRpbWVcblxuICAgICAgLy8gdGltaW5ncyBpcyBqdXN0IGZvciB0aGUgZmluYWwgZmV0Y2hcbiAgICAgIHJlc3BvbnNlLnRpbWluZ3MgPSBzZWxmLnRpbWluZ3NcblxuICAgICAgLy8gcHJlLWNhbGN1bGF0ZSBwaGFzZSB0aW1pbmdzIGFzIHdlbGxcbiAgICAgIHJlc3BvbnNlLnRpbWluZ1BoYXNlcyA9IHtcbiAgICAgICAgd2FpdDogc2VsZi50aW1pbmdzLnNvY2tldCxcbiAgICAgICAgZG5zOiBzZWxmLnRpbWluZ3MubG9va3VwIC0gc2VsZi50aW1pbmdzLnNvY2tldCxcbiAgICAgICAgdGNwOiBzZWxmLnRpbWluZ3MuY29ubmVjdCAtIHNlbGYudGltaW5ncy5sb29rdXAsXG4gICAgICAgIGZpcnN0Qnl0ZTogc2VsZi50aW1pbmdzLnJlc3BvbnNlIC0gc2VsZi50aW1pbmdzLmNvbm5lY3QsXG4gICAgICAgIGRvd25sb2FkOiBzZWxmLnRpbWluZ3MuZW5kIC0gc2VsZi50aW1pbmdzLnJlc3BvbnNlLFxuICAgICAgICB0b3RhbDogc2VsZi50aW1pbmdzLmVuZFxuICAgICAgfVxuICAgIH1cbiAgICBkZWJ1ZygncmVzcG9uc2UgZW5kJywgc2VsZi51cmkuaHJlZiwgcmVzcG9uc2Uuc3RhdHVzQ29kZSwgcmVzcG9uc2UuaGVhZGVycylcbiAgfSlcblxuICBpZiAoc2VsZi5fYWJvcnRlZCkge1xuICAgIGRlYnVnKCdhYm9ydGVkJywgc2VsZi51cmkuaHJlZilcbiAgICByZXNwb25zZS5yZXN1bWUoKVxuICAgIHJldHVyblxuICB9XG5cbiAgc2VsZi5yZXNwb25zZSA9IHJlc3BvbnNlXG4gIHJlc3BvbnNlLnJlcXVlc3QgPSBzZWxmXG4gIHJlc3BvbnNlLnRvSlNPTiA9IHJlc3BvbnNlVG9KU09OXG5cbiAgLy8gWFhYIFRoaXMgaXMgZGlmZmVyZW50IG9uIDAuMTAsIGJlY2F1c2UgU1NMIGlzIHN0cmljdCBieSBkZWZhdWx0XG4gIGlmIChzZWxmLmh0dHBNb2R1bGUgPT09IGh0dHBzICYmXG4gICAgc2VsZi5zdHJpY3RTU0wgJiYgKCFyZXNwb25zZS5oYXNPd25Qcm9wZXJ0eSgnc29ja2V0JykgfHxcbiAgICAhcmVzcG9uc2Uuc29ja2V0LmF1dGhvcml6ZWQpKSB7XG4gICAgZGVidWcoJ3N0cmljdCBzc2wgZXJyb3InLCBzZWxmLnVyaS5ocmVmKVxuICAgIHZhciBzc2xFcnIgPSByZXNwb25zZS5oYXNPd25Qcm9wZXJ0eSgnc29ja2V0JykgPyByZXNwb25zZS5zb2NrZXQuYXV0aG9yaXphdGlvbkVycm9yIDogc2VsZi51cmkuaHJlZiArICcgZG9lcyBub3Qgc3VwcG9ydCBTU0wnXG4gICAgc2VsZi5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignU1NMIEVycm9yOiAnICsgc3NsRXJyKSlcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIFNhdmUgdGhlIG9yaWdpbmFsIGhvc3QgYmVmb3JlIGFueSByZWRpcmVjdCAoaWYgaXQgY2hhbmdlcywgd2UgbmVlZCB0b1xuICAvLyByZW1vdmUgYW55IGF1dGhvcml6YXRpb24gaGVhZGVycykuICBBbHNvIHJlbWVtYmVyIHRoZSBjYXNlIG9mIHRoZSBoZWFkZXJcbiAgLy8gbmFtZSBiZWNhdXNlIGxvdHMgb2YgYnJva2VuIHNlcnZlcnMgZXhwZWN0IEhvc3QgaW5zdGVhZCBvZiBob3N0IGFuZCB3ZVxuICAvLyB3YW50IHRoZSBjYWxsZXIgdG8gYmUgYWJsZSB0byBzcGVjaWZ5IHRoaXMuXG4gIHNlbGYub3JpZ2luYWxIb3N0ID0gc2VsZi5nZXRIZWFkZXIoJ2hvc3QnKVxuICBpZiAoIXNlbGYub3JpZ2luYWxIb3N0SGVhZGVyTmFtZSkge1xuICAgIHNlbGYub3JpZ2luYWxIb3N0SGVhZGVyTmFtZSA9IHNlbGYuaGFzSGVhZGVyKCdob3N0JylcbiAgfVxuICBpZiAoc2VsZi5zZXRIb3N0KSB7XG4gICAgc2VsZi5yZW1vdmVIZWFkZXIoJ2hvc3QnKVxuICB9XG4gIHNlbGYuY2xlYXJUaW1lb3V0KClcblxuICB2YXIgdGFyZ2V0Q29va2llSmFyID0gKHNlbGYuX2phciAmJiBzZWxmLl9qYXIuc2V0Q29va2llKSA/IHNlbGYuX2phciA6IGdsb2JhbENvb2tpZUphclxuICB2YXIgYWRkQ29va2llID0gZnVuY3Rpb24gKGNvb2tpZSkge1xuICAgIC8vIHNldCB0aGUgY29va2llIGlmIGl0J3MgZG9tYWluIGluIHRoZSBocmVmJ3MgZG9tYWluLlxuICAgIHRyeSB7XG4gICAgICB0YXJnZXRDb29raWVKYXIuc2V0Q29va2llKGNvb2tpZSwgc2VsZi51cmkuaHJlZiwge2lnbm9yZUVycm9yOiB0cnVlfSlcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZSlcbiAgICB9XG4gIH1cblxuICByZXNwb25zZS5jYXNlbGVzcyA9IGNhc2VsZXNzKHJlc3BvbnNlLmhlYWRlcnMpXG5cbiAgaWYgKHJlc3BvbnNlLmNhc2VsZXNzLmhhcygnc2V0LWNvb2tpZScpICYmICghc2VsZi5fZGlzYWJsZUNvb2tpZXMpKSB7XG4gICAgdmFyIGhlYWRlck5hbWUgPSByZXNwb25zZS5jYXNlbGVzcy5oYXMoJ3NldC1jb29raWUnKVxuICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3BvbnNlLmhlYWRlcnNbaGVhZGVyTmFtZV0pKSB7XG4gICAgICByZXNwb25zZS5oZWFkZXJzW2hlYWRlck5hbWVdLmZvckVhY2goYWRkQ29va2llKVxuICAgIH0gZWxzZSB7XG4gICAgICBhZGRDb29raWUocmVzcG9uc2UuaGVhZGVyc1toZWFkZXJOYW1lXSlcbiAgICB9XG4gIH1cblxuICBpZiAoc2VsZi5fcmVkaXJlY3Qub25SZXNwb25zZShyZXNwb25zZSkpIHtcbiAgICByZXR1cm4gLy8gSWdub3JlIHRoZSByZXN0IG9mIHRoZSByZXNwb25zZVxuICB9IGVsc2Uge1xuICAgIC8vIEJlIGEgZ29vZCBzdHJlYW0gYW5kIGVtaXQgZW5kIHdoZW4gdGhlIHJlc3BvbnNlIGlzIGZpbmlzaGVkLlxuICAgIC8vIEhhY2sgdG8gZW1pdCBlbmQgb24gY2xvc2UgYmVjYXVzZSBvZiBhIGNvcmUgYnVnIHRoYXQgbmV2ZXIgZmlyZXMgZW5kXG4gICAgcmVzcG9uc2Uub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFzZWxmLl9lbmRlZCkge1xuICAgICAgICBzZWxmLnJlc3BvbnNlLmVtaXQoJ2VuZCcpXG4gICAgICB9XG4gICAgfSlcblxuICAgIHJlc3BvbnNlLm9uY2UoJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuX2VuZGVkID0gdHJ1ZVxuICAgIH0pXG5cbiAgICB2YXIgbm9Cb2R5ID0gZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHNlbGYubWV0aG9kID09PSAnSEVBRCcgfHxcbiAgICAgICAgLy8gSW5mb3JtYXRpb25hbFxuICAgICAgICAoY29kZSA+PSAxMDAgJiYgY29kZSA8IDIwMCkgfHxcbiAgICAgICAgLy8gTm8gQ29udGVudFxuICAgICAgICBjb2RlID09PSAyMDQgfHxcbiAgICAgICAgLy8gTm90IE1vZGlmaWVkXG4gICAgICAgIGNvZGUgPT09IDMwNFxuICAgICAgKVxuICAgIH1cblxuICAgIHZhciByZXNwb25zZUNvbnRlbnRcbiAgICBpZiAoc2VsZi5nemlwICYmICFub0JvZHkocmVzcG9uc2Uuc3RhdHVzQ29kZSkpIHtcbiAgICAgIHZhciBjb250ZW50RW5jb2RpbmcgPSByZXNwb25zZS5oZWFkZXJzWydjb250ZW50LWVuY29kaW5nJ10gfHwgJ2lkZW50aXR5J1xuICAgICAgY29udGVudEVuY29kaW5nID0gY29udGVudEVuY29kaW5nLnRyaW0oKS50b0xvd2VyQ2FzZSgpXG5cbiAgICAgIC8vIEJlIG1vcmUgbGVuaWVudCB3aXRoIGRlY29kaW5nIGNvbXByZXNzZWQgcmVzcG9uc2VzLCBzaW5jZSAodmVyeSByYXJlbHkpXG4gICAgICAvLyBzZXJ2ZXJzIHNlbmQgc2xpZ2h0bHkgaW52YWxpZCBnemlwIHJlc3BvbnNlcyB0aGF0IGFyZSBzdGlsbCBhY2NlcHRlZFxuICAgICAgLy8gYnkgY29tbW9uIGJyb3dzZXJzLlxuICAgICAgLy8gQWx3YXlzIHVzaW5nIFpfU1lOQ19GTFVTSCBpcyB3aGF0IGNVUkwgZG9lcy5cbiAgICAgIHZhciB6bGliT3B0aW9ucyA9IHtcbiAgICAgICAgZmx1c2g6IHpsaWIuWl9TWU5DX0ZMVVNILFxuICAgICAgICBmaW5pc2hGbHVzaDogemxpYi5aX1NZTkNfRkxVU0hcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbnRlbnRFbmNvZGluZyA9PT0gJ2d6aXAnKSB7XG4gICAgICAgIHJlc3BvbnNlQ29udGVudCA9IHpsaWIuY3JlYXRlR3VuemlwKHpsaWJPcHRpb25zKVxuICAgICAgICByZXNwb25zZS5waXBlKHJlc3BvbnNlQ29udGVudClcbiAgICAgIH0gZWxzZSBpZiAoY29udGVudEVuY29kaW5nID09PSAnZGVmbGF0ZScpIHtcbiAgICAgICAgcmVzcG9uc2VDb250ZW50ID0gemxpYi5jcmVhdGVJbmZsYXRlKHpsaWJPcHRpb25zKVxuICAgICAgICByZXNwb25zZS5waXBlKHJlc3BvbnNlQ29udGVudClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFNpbmNlIHByZXZpb3VzIHZlcnNpb25zIGRpZG4ndCBjaGVjayBmb3IgQ29udGVudC1FbmNvZGluZyBoZWFkZXIsXG4gICAgICAgIC8vIGlnbm9yZSBhbnkgaW52YWxpZCB2YWx1ZXMgdG8gcHJlc2VydmUgYmFja3dhcmRzLWNvbXBhdGliaWxpdHlcbiAgICAgICAgaWYgKGNvbnRlbnRFbmNvZGluZyAhPT0gJ2lkZW50aXR5Jykge1xuICAgICAgICAgIGRlYnVnKCdpZ25vcmluZyB1bnJlY29nbml6ZWQgQ29udGVudC1FbmNvZGluZyAnICsgY29udGVudEVuY29kaW5nKVxuICAgICAgICB9XG4gICAgICAgIHJlc3BvbnNlQ29udGVudCA9IHJlc3BvbnNlXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3BvbnNlQ29udGVudCA9IHJlc3BvbnNlXG4gICAgfVxuXG4gICAgaWYgKHNlbGYuZW5jb2RpbmcpIHtcbiAgICAgIGlmIChzZWxmLmRlc3RzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdJZ25vcmluZyBlbmNvZGluZyBwYXJhbWV0ZXIgYXMgdGhpcyBzdHJlYW0gaXMgYmVpbmcgcGlwZWQgdG8gYW5vdGhlciBzdHJlYW0gd2hpY2ggbWFrZXMgdGhlIGVuY29kaW5nIG9wdGlvbiBpbnZhbGlkLicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNwb25zZUNvbnRlbnQuc2V0RW5jb2Rpbmcoc2VsZi5lbmNvZGluZylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2VsZi5fcGF1c2VkKSB7XG4gICAgICByZXNwb25zZUNvbnRlbnQucGF1c2UoKVxuICAgIH1cblxuICAgIHNlbGYucmVzcG9uc2VDb250ZW50ID0gcmVzcG9uc2VDb250ZW50XG5cbiAgICBzZWxmLmVtaXQoJ3Jlc3BvbnNlJywgcmVzcG9uc2UpXG5cbiAgICBzZWxmLmRlc3RzLmZvckVhY2goZnVuY3Rpb24gKGRlc3QpIHtcbiAgICAgIHNlbGYucGlwZURlc3QoZGVzdClcbiAgICB9KVxuXG4gICAgcmVzcG9uc2VDb250ZW50Lm9uKCdkYXRhJywgZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgICBpZiAoc2VsZi50aW1pbmcgJiYgIXNlbGYucmVzcG9uc2VTdGFydGVkKSB7XG4gICAgICAgIHNlbGYucmVzcG9uc2VTdGFydFRpbWUgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpXG5cbiAgICAgICAgLy8gTk9URTogcmVzcG9uc2VTdGFydFRpbWUgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiAudGltaW5nc1xuICAgICAgICByZXNwb25zZS5yZXNwb25zZVN0YXJ0VGltZSA9IHNlbGYucmVzcG9uc2VTdGFydFRpbWVcbiAgICAgIH1cbiAgICAgIHNlbGYuX2Rlc3RkYXRhID0gdHJ1ZVxuICAgICAgc2VsZi5lbWl0KCdkYXRhJywgY2h1bmspXG4gICAgfSlcbiAgICByZXNwb25zZUNvbnRlbnQub25jZSgnZW5kJywgZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgICBzZWxmLmVtaXQoJ2VuZCcsIGNodW5rKVxuICAgIH0pXG4gICAgcmVzcG9uc2VDb250ZW50Lm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgc2VsZi5lbWl0KCdlcnJvcicsIGVycm9yKVxuICAgIH0pXG4gICAgcmVzcG9uc2VDb250ZW50Lm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHsgc2VsZi5lbWl0KCdjbG9zZScpIH0pXG5cbiAgICBpZiAoc2VsZi5jYWxsYmFjaykge1xuICAgICAgc2VsZi5yZWFkUmVzcG9uc2VCb2R5KHJlc3BvbnNlKVxuICAgIH0gZWxzZSB7IC8vIGlmIG5vIGNhbGxiYWNrXG4gICAgICBzZWxmLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChzZWxmLl9hYm9ydGVkKSB7XG4gICAgICAgICAgZGVidWcoJ2Fib3J0ZWQnLCBzZWxmLnVyaS5ocmVmKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHNlbGYuZW1pdCgnY29tcGxldGUnLCByZXNwb25zZSlcbiAgICAgIH0pXG4gICAgfVxuICB9XG4gIGRlYnVnKCdmaW5pc2ggaW5pdCBmdW5jdGlvbicsIHNlbGYudXJpLmhyZWYpXG59XG5cblJlcXVlc3QucHJvdG90eXBlLnJlYWRSZXNwb25zZUJvZHkgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGRlYnVnKFwicmVhZGluZyByZXNwb25zZSdzIGJvZHlcIilcbiAgdmFyIGJ1ZmZlcnMgPSBbXVxuICB2YXIgYnVmZmVyTGVuZ3RoID0gMFxuICB2YXIgc3RyaW5ncyA9IFtdXG5cbiAgc2VsZi5vbignZGF0YScsIGZ1bmN0aW9uIChjaHVuaykge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGNodW5rKSkge1xuICAgICAgc3RyaW5ncy5wdXNoKGNodW5rKVxuICAgIH0gZWxzZSBpZiAoY2h1bmsubGVuZ3RoKSB7XG4gICAgICBidWZmZXJMZW5ndGggKz0gY2h1bmsubGVuZ3RoXG4gICAgICBidWZmZXJzLnB1c2goY2h1bmspXG4gICAgfVxuICB9KVxuICBzZWxmLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ2VuZCBldmVudCcsIHNlbGYudXJpLmhyZWYpXG4gICAgaWYgKHNlbGYuX2Fib3J0ZWQpIHtcbiAgICAgIGRlYnVnKCdhYm9ydGVkJywgc2VsZi51cmkuaHJlZilcbiAgICAgIC8vIGBidWZmZXJgIGlzIGRlZmluZWQgaW4gdGhlIHBhcmVudCBzY29wZSBhbmQgdXNlZCBpbiBhIGNsb3N1cmUgaXQgZXhpc3RzIGZvciB0aGUgbGlmZSBvZiB0aGUgcmVxdWVzdC5cbiAgICAgIC8vIFRoaXMgY2FuIGxlYWQgdG8gbGVha3kgYmVoYXZpb3IgaWYgdGhlIHVzZXIgcmV0YWlucyBhIHJlZmVyZW5jZSB0byB0aGUgcmVxdWVzdCBvYmplY3QuXG4gICAgICBidWZmZXJzID0gW11cbiAgICAgIGJ1ZmZlckxlbmd0aCA9IDBcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChidWZmZXJMZW5ndGgpIHtcbiAgICAgIGRlYnVnKCdoYXMgYm9keScsIHNlbGYudXJpLmhyZWYsIGJ1ZmZlckxlbmd0aClcbiAgICAgIHJlc3BvbnNlLmJvZHkgPSBCdWZmZXIuY29uY2F0KGJ1ZmZlcnMsIGJ1ZmZlckxlbmd0aClcbiAgICAgIGlmIChzZWxmLmVuY29kaW5nICE9PSBudWxsKSB7XG4gICAgICAgIHJlc3BvbnNlLmJvZHkgPSByZXNwb25zZS5ib2R5LnRvU3RyaW5nKHNlbGYuZW5jb2RpbmcpXG4gICAgICB9XG4gICAgICAvLyBgYnVmZmVyYCBpcyBkZWZpbmVkIGluIHRoZSBwYXJlbnQgc2NvcGUgYW5kIHVzZWQgaW4gYSBjbG9zdXJlIGl0IGV4aXN0cyBmb3IgdGhlIGxpZmUgb2YgdGhlIFJlcXVlc3QuXG4gICAgICAvLyBUaGlzIGNhbiBsZWFkIHRvIGxlYWt5IGJlaGF2aW9yIGlmIHRoZSB1c2VyIHJldGFpbnMgYSByZWZlcmVuY2UgdG8gdGhlIHJlcXVlc3Qgb2JqZWN0LlxuICAgICAgYnVmZmVycyA9IFtdXG4gICAgICBidWZmZXJMZW5ndGggPSAwXG4gICAgfSBlbHNlIGlmIChzdHJpbmdzLmxlbmd0aCkge1xuICAgICAgLy8gVGhlIFVURjggQk9NIFsweEVGLDB4QkIsMHhCRl0gaXMgY29udmVydGVkIHRvIFsweEZFLDB4RkZdIGluIHRoZSBKUyBVVEMxNi9VQ1MyIHJlcHJlc2VudGF0aW9uLlxuICAgICAgLy8gU3RyaXAgdGhpcyB2YWx1ZSBvdXQgd2hlbiB0aGUgZW5jb2RpbmcgaXMgc2V0IHRvICd1dGY4JywgYXMgdXBzdHJlYW0gY29uc3VtZXJzIHdvbid0IGV4cGVjdCBpdCBhbmQgaXQgYnJlYWtzIEpTT04ucGFyc2UoKS5cbiAgICAgIGlmIChzZWxmLmVuY29kaW5nID09PSAndXRmOCcgJiYgc3RyaW5nc1swXS5sZW5ndGggPiAwICYmIHN0cmluZ3NbMF1bMF0gPT09ICdcXHVGRUZGJykge1xuICAgICAgICBzdHJpbmdzWzBdID0gc3RyaW5nc1swXS5zdWJzdHJpbmcoMSlcbiAgICAgIH1cbiAgICAgIHJlc3BvbnNlLmJvZHkgPSBzdHJpbmdzLmpvaW4oJycpXG4gICAgfVxuXG4gICAgaWYgKHNlbGYuX2pzb24pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlc3BvbnNlLmJvZHkgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmJvZHksIHNlbGYuX2pzb25SZXZpdmVyKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBkZWJ1ZygnaW52YWxpZCBKU09OIHJlY2VpdmVkJywgc2VsZi51cmkuaHJlZilcbiAgICAgIH1cbiAgICB9XG4gICAgZGVidWcoJ2VtaXR0aW5nIGNvbXBsZXRlJywgc2VsZi51cmkuaHJlZilcbiAgICBpZiAodHlwZW9mIHJlc3BvbnNlLmJvZHkgPT09ICd1bmRlZmluZWQnICYmICFzZWxmLl9qc29uKSB7XG4gICAgICByZXNwb25zZS5ib2R5ID0gc2VsZi5lbmNvZGluZyA9PT0gbnVsbCA/IEJ1ZmZlci5hbGxvYygwKSA6ICcnXG4gICAgfVxuICAgIHNlbGYuZW1pdCgnY29tcGxldGUnLCByZXNwb25zZSwgcmVzcG9uc2UuYm9keSlcbiAgfSlcbn1cblxuUmVxdWVzdC5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICBzZWxmLl9hYm9ydGVkID0gdHJ1ZVxuXG4gIGlmIChzZWxmLnJlcSkge1xuICAgIHNlbGYucmVxLmFib3J0KClcbiAgfSBlbHNlIGlmIChzZWxmLnJlc3BvbnNlKSB7XG4gICAgc2VsZi5yZXNwb25zZS5kZXN0cm95KClcbiAgfVxuXG4gIHNlbGYuY2xlYXJUaW1lb3V0KClcbiAgc2VsZi5lbWl0KCdhYm9ydCcpXG59XG5cblJlcXVlc3QucHJvdG90eXBlLnBpcGVEZXN0ID0gZnVuY3Rpb24gKGRlc3QpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciByZXNwb25zZSA9IHNlbGYucmVzcG9uc2VcbiAgLy8gQ2FsbGVkIGFmdGVyIHRoZSByZXNwb25zZSBpcyByZWNlaXZlZFxuICBpZiAoZGVzdC5oZWFkZXJzICYmICFkZXN0LmhlYWRlcnNTZW50KSB7XG4gICAgaWYgKHJlc3BvbnNlLmNhc2VsZXNzLmhhcygnY29udGVudC10eXBlJykpIHtcbiAgICAgIHZhciBjdG5hbWUgPSByZXNwb25zZS5jYXNlbGVzcy5oYXMoJ2NvbnRlbnQtdHlwZScpXG4gICAgICBpZiAoZGVzdC5zZXRIZWFkZXIpIHtcbiAgICAgICAgZGVzdC5zZXRIZWFkZXIoY3RuYW1lLCByZXNwb25zZS5oZWFkZXJzW2N0bmFtZV0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZXN0LmhlYWRlcnNbY3RuYW1lXSA9IHJlc3BvbnNlLmhlYWRlcnNbY3RuYW1lXVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChyZXNwb25zZS5jYXNlbGVzcy5oYXMoJ2NvbnRlbnQtbGVuZ3RoJykpIHtcbiAgICAgIHZhciBjbG5hbWUgPSByZXNwb25zZS5jYXNlbGVzcy5oYXMoJ2NvbnRlbnQtbGVuZ3RoJylcbiAgICAgIGlmIChkZXN0LnNldEhlYWRlcikge1xuICAgICAgICBkZXN0LnNldEhlYWRlcihjbG5hbWUsIHJlc3BvbnNlLmhlYWRlcnNbY2xuYW1lXSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlc3QuaGVhZGVyc1tjbG5hbWVdID0gcmVzcG9uc2UuaGVhZGVyc1tjbG5hbWVdXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChkZXN0LnNldEhlYWRlciAmJiAhZGVzdC5oZWFkZXJzU2VudCkge1xuICAgIGZvciAodmFyIGkgaW4gcmVzcG9uc2UuaGVhZGVycykge1xuICAgICAgLy8gSWYgdGhlIHJlc3BvbnNlIGNvbnRlbnQgaXMgYmVpbmcgZGVjb2RlZCwgdGhlIENvbnRlbnQtRW5jb2RpbmcgaGVhZGVyXG4gICAgICAvLyBvZiB0aGUgcmVzcG9uc2UgZG9lc24ndCByZXByZXNlbnQgdGhlIHBpcGVkIGNvbnRlbnQsIHNvIGRvbid0IHBhc3MgaXQuXG4gICAgICBpZiAoIXNlbGYuZ3ppcCB8fCBpICE9PSAnY29udGVudC1lbmNvZGluZycpIHtcbiAgICAgICAgZGVzdC5zZXRIZWFkZXIoaSwgcmVzcG9uc2UuaGVhZGVyc1tpXSlcbiAgICAgIH1cbiAgICB9XG4gICAgZGVzdC5zdGF0dXNDb2RlID0gcmVzcG9uc2Uuc3RhdHVzQ29kZVxuICB9XG4gIGlmIChzZWxmLnBpcGVmaWx0ZXIpIHtcbiAgICBzZWxmLnBpcGVmaWx0ZXIocmVzcG9uc2UsIGRlc3QpXG4gIH1cbn1cblxuUmVxdWVzdC5wcm90b3R5cGUucXMgPSBmdW5jdGlvbiAocSwgY2xvYmJlcikge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIGJhc2VcbiAgaWYgKCFjbG9iYmVyICYmIHNlbGYudXJpLnF1ZXJ5KSB7XG4gICAgYmFzZSA9IHNlbGYuX3FzLnBhcnNlKHNlbGYudXJpLnF1ZXJ5KVxuICB9IGVsc2Uge1xuICAgIGJhc2UgPSB7fVxuICB9XG5cbiAgZm9yICh2YXIgaSBpbiBxKSB7XG4gICAgYmFzZVtpXSA9IHFbaV1cbiAgfVxuXG4gIHZhciBxcyA9IHNlbGYuX3FzLnN0cmluZ2lmeShiYXNlKVxuXG4gIGlmIChxcyA9PT0gJycpIHtcbiAgICByZXR1cm4gc2VsZlxuICB9XG5cbiAgc2VsZi51cmkgPSB1cmwucGFyc2Uoc2VsZi51cmkuaHJlZi5zcGxpdCgnPycpWzBdICsgJz8nICsgcXMpXG4gIHNlbGYudXJsID0gc2VsZi51cmlcbiAgc2VsZi5wYXRoID0gc2VsZi51cmkucGF0aFxuXG4gIGlmIChzZWxmLnVyaS5ob3N0ID09PSAndW5peCcpIHtcbiAgICBzZWxmLmVuYWJsZVVuaXhTb2NrZXQoKVxuICB9XG5cbiAgcmV0dXJuIHNlbGZcbn1cblJlcXVlc3QucHJvdG90eXBlLmZvcm0gPSBmdW5jdGlvbiAoZm9ybSkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgaWYgKGZvcm0pIHtcbiAgICBpZiAoIS9eYXBwbGljYXRpb25cXC94LXd3dy1mb3JtLXVybGVuY29kZWRcXGIvLnRlc3Qoc2VsZi5nZXRIZWFkZXIoJ2NvbnRlbnQtdHlwZScpKSkge1xuICAgICAgc2VsZi5zZXRIZWFkZXIoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKVxuICAgIH1cbiAgICBzZWxmLmJvZHkgPSAodHlwZW9mIGZvcm0gPT09ICdzdHJpbmcnKVxuICAgICAgPyBzZWxmLl9xcy5yZmMzOTg2KGZvcm0udG9TdHJpbmcoJ3V0ZjgnKSlcbiAgICAgIDogc2VsZi5fcXMuc3RyaW5naWZ5KGZvcm0pLnRvU3RyaW5nKCd1dGY4JylcbiAgICByZXR1cm4gc2VsZlxuICB9XG4gIC8vIGNyZWF0ZSBmb3JtLWRhdGEgb2JqZWN0XG4gIHNlbGYuX2Zvcm0gPSBuZXcgRm9ybURhdGEoKVxuICBzZWxmLl9mb3JtLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBlcnIubWVzc2FnZSA9ICdmb3JtLWRhdGE6ICcgKyBlcnIubWVzc2FnZVxuICAgIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpXG4gICAgc2VsZi5hYm9ydCgpXG4gIH0pXG4gIHJldHVybiBzZWxmLl9mb3JtXG59XG5SZXF1ZXN0LnByb3RvdHlwZS5tdWx0aXBhcnQgPSBmdW5jdGlvbiAobXVsdGlwYXJ0KSB7XG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIHNlbGYuX211bHRpcGFydC5vblJlcXVlc3QobXVsdGlwYXJ0KVxuXG4gIGlmICghc2VsZi5fbXVsdGlwYXJ0LmNodW5rZWQpIHtcbiAgICBzZWxmLmJvZHkgPSBzZWxmLl9tdWx0aXBhcnQuYm9keVxuICB9XG5cbiAgcmV0dXJuIHNlbGZcbn1cblJlcXVlc3QucHJvdG90eXBlLmpzb24gPSBmdW5jdGlvbiAodmFsKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIGlmICghc2VsZi5oYXNIZWFkZXIoJ2FjY2VwdCcpKSB7XG4gICAgc2VsZi5zZXRIZWFkZXIoJ2FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJylcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc2VsZi5qc29uUmVwbGFjZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzZWxmLl9qc29uUmVwbGFjZXIgPSBzZWxmLmpzb25SZXBsYWNlclxuICB9XG5cbiAgc2VsZi5fanNvbiA9IHRydWVcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdib29sZWFuJykge1xuICAgIGlmIChzZWxmLmJvZHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCEvXmFwcGxpY2F0aW9uXFwveC13d3ctZm9ybS11cmxlbmNvZGVkXFxiLy50ZXN0KHNlbGYuZ2V0SGVhZGVyKCdjb250ZW50LXR5cGUnKSkpIHtcbiAgICAgICAgc2VsZi5ib2R5ID0gc2FmZVN0cmluZ2lmeShzZWxmLmJvZHksIHNlbGYuX2pzb25SZXBsYWNlcilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYuYm9keSA9IHNlbGYuX3FzLnJmYzM5ODYoc2VsZi5ib2R5KVxuICAgICAgfVxuICAgICAgaWYgKCFzZWxmLmhhc0hlYWRlcignY29udGVudC10eXBlJykpIHtcbiAgICAgICAgc2VsZi5zZXRIZWFkZXIoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9qc29uJylcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc2VsZi5ib2R5ID0gc2FmZVN0cmluZ2lmeSh2YWwsIHNlbGYuX2pzb25SZXBsYWNlcilcbiAgICBpZiAoIXNlbGYuaGFzSGVhZGVyKCdjb250ZW50LXR5cGUnKSkge1xuICAgICAgc2VsZi5zZXRIZWFkZXIoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9qc29uJylcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIHNlbGYuanNvblJldml2ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzZWxmLl9qc29uUmV2aXZlciA9IHNlbGYuanNvblJldml2ZXJcbiAgfVxuXG4gIHJldHVybiBzZWxmXG59XG5SZXF1ZXN0LnByb3RvdHlwZS5nZXRIZWFkZXIgPSBmdW5jdGlvbiAobmFtZSwgaGVhZGVycykge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIHJlc3VsdCwgcmUsIG1hdGNoXG4gIGlmICghaGVhZGVycykge1xuICAgIGhlYWRlcnMgPSBzZWxmLmhlYWRlcnNcbiAgfVxuICBPYmplY3Qua2V5cyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoa2V5Lmxlbmd0aCAhPT0gbmFtZS5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICByZSA9IG5ldyBSZWdFeHAobmFtZSwgJ2knKVxuICAgIG1hdGNoID0ga2V5Lm1hdGNoKHJlKVxuICAgIGlmIChtYXRjaCkge1xuICAgICAgcmVzdWx0ID0gaGVhZGVyc1trZXldXG4gICAgfVxuICB9KVxuICByZXR1cm4gcmVzdWx0XG59XG5SZXF1ZXN0LnByb3RvdHlwZS5lbmFibGVVbml4U29ja2V0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBHZXQgdGhlIHNvY2tldCAmIHJlcXVlc3QgcGF0aHMgZnJvbSB0aGUgVVJMXG4gIHZhciB1bml4UGFydHMgPSB0aGlzLnVyaS5wYXRoLnNwbGl0KCc6JylcbiAgdmFyIGhvc3QgPSB1bml4UGFydHNbMF1cbiAgdmFyIHBhdGggPSB1bml4UGFydHNbMV1cbiAgLy8gQXBwbHkgdW5peCBwcm9wZXJ0aWVzIHRvIHJlcXVlc3RcbiAgdGhpcy5zb2NrZXRQYXRoID0gaG9zdFxuICB0aGlzLnVyaS5wYXRobmFtZSA9IHBhdGhcbiAgdGhpcy51cmkucGF0aCA9IHBhdGhcbiAgdGhpcy51cmkuaG9zdCA9IGhvc3RcbiAgdGhpcy51cmkuaG9zdG5hbWUgPSBob3N0XG4gIHRoaXMudXJpLmlzVW5peCA9IHRydWVcbn1cblxuUmVxdWVzdC5wcm90b3R5cGUuYXV0aCA9IGZ1bmN0aW9uICh1c2VyLCBwYXNzLCBzZW5kSW1tZWRpYXRlbHksIGJlYXJlcikge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICBzZWxmLl9hdXRoLm9uUmVxdWVzdCh1c2VyLCBwYXNzLCBzZW5kSW1tZWRpYXRlbHksIGJlYXJlcilcblxuICByZXR1cm4gc2VsZlxufVxuUmVxdWVzdC5wcm90b3R5cGUuYXdzID0gZnVuY3Rpb24gKG9wdHMsIG5vdykge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICBpZiAoIW5vdykge1xuICAgIHNlbGYuX2F3cyA9IG9wdHNcbiAgICByZXR1cm4gc2VsZlxuICB9XG5cbiAgaWYgKG9wdHMuc2lnbl92ZXJzaW9uID09PSA0IHx8IG9wdHMuc2lnbl92ZXJzaW9uID09PSAnNCcpIHtcbiAgICAvLyB1c2UgYXdzNFxuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgaG9zdDogc2VsZi51cmkuaG9zdCxcbiAgICAgIHBhdGg6IHNlbGYudXJpLnBhdGgsXG4gICAgICBtZXRob2Q6IHNlbGYubWV0aG9kLFxuICAgICAgaGVhZGVyczogc2VsZi5oZWFkZXJzLFxuICAgICAgYm9keTogc2VsZi5ib2R5XG4gICAgfVxuICAgIGlmIChvcHRzLnNlcnZpY2UpIHtcbiAgICAgIG9wdGlvbnMuc2VydmljZSA9IG9wdHMuc2VydmljZVxuICAgIH1cbiAgICB2YXIgc2lnblJlcyA9IGF3czQuc2lnbihvcHRpb25zLCB7XG4gICAgICBhY2Nlc3NLZXlJZDogb3B0cy5rZXksXG4gICAgICBzZWNyZXRBY2Nlc3NLZXk6IG9wdHMuc2VjcmV0LFxuICAgICAgc2Vzc2lvblRva2VuOiBvcHRzLnNlc3Npb25cbiAgICB9KVxuICAgIHNlbGYuc2V0SGVhZGVyKCdhdXRob3JpemF0aW9uJywgc2lnblJlcy5oZWFkZXJzLkF1dGhvcml6YXRpb24pXG4gICAgc2VsZi5zZXRIZWFkZXIoJ3gtYW16LWRhdGUnLCBzaWduUmVzLmhlYWRlcnNbJ1gtQW16LURhdGUnXSlcbiAgICBpZiAoc2lnblJlcy5oZWFkZXJzWydYLUFtei1TZWN1cml0eS1Ub2tlbiddKSB7XG4gICAgICBzZWxmLnNldEhlYWRlcigneC1hbXotc2VjdXJpdHktdG9rZW4nLCBzaWduUmVzLmhlYWRlcnNbJ1gtQW16LVNlY3VyaXR5LVRva2VuJ10pXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGRlZmF1bHQ6IHVzZSBhd3Mtc2lnbjJcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKClcbiAgICBzZWxmLnNldEhlYWRlcignZGF0ZScsIGRhdGUudG9VVENTdHJpbmcoKSlcbiAgICB2YXIgYXV0aCA9IHtcbiAgICAgIGtleTogb3B0cy5rZXksXG4gICAgICBzZWNyZXQ6IG9wdHMuc2VjcmV0LFxuICAgICAgdmVyYjogc2VsZi5tZXRob2QudG9VcHBlckNhc2UoKSxcbiAgICAgIGRhdGU6IGRhdGUsXG4gICAgICBjb250ZW50VHlwZTogc2VsZi5nZXRIZWFkZXIoJ2NvbnRlbnQtdHlwZScpIHx8ICcnLFxuICAgICAgbWQ1OiBzZWxmLmdldEhlYWRlcignY29udGVudC1tZDUnKSB8fCAnJyxcbiAgICAgIGFtYXpvbkhlYWRlcnM6IGF3czIuY2Fub25pY2FsaXplSGVhZGVycyhzZWxmLmhlYWRlcnMpXG4gICAgfVxuICAgIHZhciBwYXRoID0gc2VsZi51cmkucGF0aFxuICAgIGlmIChvcHRzLmJ1Y2tldCAmJiBwYXRoKSB7XG4gICAgICBhdXRoLnJlc291cmNlID0gJy8nICsgb3B0cy5idWNrZXQgKyBwYXRoXG4gICAgfSBlbHNlIGlmIChvcHRzLmJ1Y2tldCAmJiAhcGF0aCkge1xuICAgICAgYXV0aC5yZXNvdXJjZSA9ICcvJyArIG9wdHMuYnVja2V0XG4gICAgfSBlbHNlIGlmICghb3B0cy5idWNrZXQgJiYgcGF0aCkge1xuICAgICAgYXV0aC5yZXNvdXJjZSA9IHBhdGhcbiAgICB9IGVsc2UgaWYgKCFvcHRzLmJ1Y2tldCAmJiAhcGF0aCkge1xuICAgICAgYXV0aC5yZXNvdXJjZSA9ICcvJ1xuICAgIH1cbiAgICBhdXRoLnJlc291cmNlID0gYXdzMi5jYW5vbmljYWxpemVSZXNvdXJjZShhdXRoLnJlc291cmNlKVxuICAgIHNlbGYuc2V0SGVhZGVyKCdhdXRob3JpemF0aW9uJywgYXdzMi5hdXRob3JpemF0aW9uKGF1dGgpKVxuICB9XG5cbiAgcmV0dXJuIHNlbGZcbn1cblJlcXVlc3QucHJvdG90eXBlLmh0dHBTaWduYXR1cmUgPSBmdW5jdGlvbiAob3B0cykge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgaHR0cFNpZ25hdHVyZS5zaWduUmVxdWVzdCh7XG4gICAgZ2V0SGVhZGVyOiBmdW5jdGlvbiAoaGVhZGVyKSB7XG4gICAgICByZXR1cm4gc2VsZi5nZXRIZWFkZXIoaGVhZGVyLCBzZWxmLmhlYWRlcnMpXG4gICAgfSxcbiAgICBzZXRIZWFkZXI6IGZ1bmN0aW9uIChoZWFkZXIsIHZhbHVlKSB7XG4gICAgICBzZWxmLnNldEhlYWRlcihoZWFkZXIsIHZhbHVlKVxuICAgIH0sXG4gICAgbWV0aG9kOiBzZWxmLm1ldGhvZCxcbiAgICBwYXRoOiBzZWxmLnBhdGhcbiAgfSwgb3B0cylcbiAgZGVidWcoJ2h0dHBTaWduYXR1cmUgYXV0aG9yaXphdGlvbicsIHNlbGYuZ2V0SGVhZGVyKCdhdXRob3JpemF0aW9uJykpXG5cbiAgcmV0dXJuIHNlbGZcbn1cblJlcXVlc3QucHJvdG90eXBlLmhhd2sgPSBmdW5jdGlvbiAob3B0cykge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgc2VsZi5zZXRIZWFkZXIoJ0F1dGhvcml6YXRpb24nLCBoYXdrLmhlYWRlcihzZWxmLnVyaSwgc2VsZi5tZXRob2QsIG9wdHMpKVxufVxuUmVxdWVzdC5wcm90b3R5cGUub2F1dGggPSBmdW5jdGlvbiAoX29hdXRoKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIHNlbGYuX29hdXRoLm9uUmVxdWVzdChfb2F1dGgpXG5cbiAgcmV0dXJuIHNlbGZcbn1cblxuUmVxdWVzdC5wcm90b3R5cGUuamFyID0gZnVuY3Rpb24gKGphcikge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIGNvb2tpZXNcblxuICBpZiAoc2VsZi5fcmVkaXJlY3QucmVkaXJlY3RzRm9sbG93ZWQgPT09IDApIHtcbiAgICBzZWxmLm9yaWdpbmFsQ29va2llSGVhZGVyID0gc2VsZi5nZXRIZWFkZXIoJ2Nvb2tpZScpXG4gIH1cblxuICBpZiAoIWphcikge1xuICAgIC8vIGRpc2FibGUgY29va2llc1xuICAgIGNvb2tpZXMgPSBmYWxzZVxuICAgIHNlbGYuX2Rpc2FibGVDb29raWVzID0gdHJ1ZVxuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXRDb29raWVKYXIgPSBqYXIuZ2V0Q29va2llU3RyaW5nID8gamFyIDogZ2xvYmFsQ29va2llSmFyXG4gICAgdmFyIHVyaWhyZWYgPSBzZWxmLnVyaS5ocmVmXG4gICAgLy8gZmV0Y2ggY29va2llIGluIHRoZSBTcGVjaWZpZWQgaG9zdFxuICAgIGlmICh0YXJnZXRDb29raWVKYXIpIHtcbiAgICAgIGNvb2tpZXMgPSB0YXJnZXRDb29raWVKYXIuZ2V0Q29va2llU3RyaW5nKHVyaWhyZWYpXG4gICAgfVxuICB9XG5cbiAgLy8gaWYgbmVlZCBjb29raWUgYW5kIGNvb2tpZSBpcyBub3QgZW1wdHlcbiAgaWYgKGNvb2tpZXMgJiYgY29va2llcy5sZW5ndGgpIHtcbiAgICBpZiAoc2VsZi5vcmlnaW5hbENvb2tpZUhlYWRlcikge1xuICAgICAgLy8gRG9uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIENvb2tpZSBoZWFkZXJcbiAgICAgIHNlbGYuc2V0SGVhZGVyKCdjb29raWUnLCBzZWxmLm9yaWdpbmFsQ29va2llSGVhZGVyICsgJzsgJyArIGNvb2tpZXMpXG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYuc2V0SGVhZGVyKCdjb29raWUnLCBjb29raWVzKVxuICAgIH1cbiAgfVxuICBzZWxmLl9qYXIgPSBqYXJcbiAgcmV0dXJuIHNlbGZcbn1cblxuLy8gU3RyZWFtIEFQSVxuUmVxdWVzdC5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uIChkZXN0LCBvcHRzKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIGlmIChzZWxmLnJlc3BvbnNlKSB7XG4gICAgaWYgKHNlbGYuX2Rlc3RkYXRhKSB7XG4gICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdZb3UgY2Fubm90IHBpcGUgYWZ0ZXIgZGF0YSBoYXMgYmVlbiBlbWl0dGVkIGZyb20gdGhlIHJlc3BvbnNlLicpKVxuICAgIH0gZWxzZSBpZiAoc2VsZi5fZW5kZWQpIHtcbiAgICAgIHNlbGYuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ1lvdSBjYW5ub3QgcGlwZSBhZnRlciB0aGUgcmVzcG9uc2UgaGFzIGJlZW4gZW5kZWQuJykpXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0cmVhbS5TdHJlYW0ucHJvdG90eXBlLnBpcGUuY2FsbChzZWxmLCBkZXN0LCBvcHRzKVxuICAgICAgc2VsZi5waXBlRGVzdChkZXN0KVxuICAgICAgcmV0dXJuIGRlc3RcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc2VsZi5kZXN0cy5wdXNoKGRlc3QpXG4gICAgc3RyZWFtLlN0cmVhbS5wcm90b3R5cGUucGlwZS5jYWxsKHNlbGYsIGRlc3QsIG9wdHMpXG4gICAgcmV0dXJuIGRlc3RcbiAgfVxufVxuUmVxdWVzdC5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICBpZiAoc2VsZi5fYWJvcnRlZCkgeyByZXR1cm4gfVxuXG4gIGlmICghc2VsZi5fc3RhcnRlZCkge1xuICAgIHNlbGYuc3RhcnQoKVxuICB9XG4gIGlmIChzZWxmLnJlcSkge1xuICAgIHJldHVybiBzZWxmLnJlcS53cml0ZS5hcHBseShzZWxmLnJlcSwgYXJndW1lbnRzKVxuICB9XG59XG5SZXF1ZXN0LnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGlmIChzZWxmLl9hYm9ydGVkKSB7IHJldHVybiB9XG5cbiAgaWYgKGNodW5rKSB7XG4gICAgc2VsZi53cml0ZShjaHVuaylcbiAgfVxuICBpZiAoIXNlbGYuX3N0YXJ0ZWQpIHtcbiAgICBzZWxmLnN0YXJ0KClcbiAgfVxuICBpZiAoc2VsZi5yZXEpIHtcbiAgICBzZWxmLnJlcS5lbmQoKVxuICB9XG59XG5SZXF1ZXN0LnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGlmICghc2VsZi5yZXNwb25zZUNvbnRlbnQpIHtcbiAgICBzZWxmLl9wYXVzZWQgPSB0cnVlXG4gIH0gZWxzZSB7XG4gICAgc2VsZi5yZXNwb25zZUNvbnRlbnQucGF1c2UuYXBwbHkoc2VsZi5yZXNwb25zZUNvbnRlbnQsIGFyZ3VtZW50cylcbiAgfVxufVxuUmVxdWVzdC5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgaWYgKCFzZWxmLnJlc3BvbnNlQ29udGVudCkge1xuICAgIHNlbGYuX3BhdXNlZCA9IGZhbHNlXG4gIH0gZWxzZSB7XG4gICAgc2VsZi5yZXNwb25zZUNvbnRlbnQucmVzdW1lLmFwcGx5KHNlbGYucmVzcG9uc2VDb250ZW50LCBhcmd1bWVudHMpXG4gIH1cbn1cblJlcXVlc3QucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB0aGlzLmNsZWFyVGltZW91dCgpXG4gIGlmICghc2VsZi5fZW5kZWQpIHtcbiAgICBzZWxmLmVuZCgpXG4gIH0gZWxzZSBpZiAoc2VsZi5yZXNwb25zZSkge1xuICAgIHNlbGYucmVzcG9uc2UuZGVzdHJveSgpXG4gIH1cbn1cblxuUmVxdWVzdC5wcm90b3R5cGUuY2xlYXJUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy50aW1lb3V0VGltZXIpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0VGltZXIpXG4gICAgdGhpcy50aW1lb3V0VGltZXIgPSBudWxsXG4gIH1cbn1cblxuUmVxdWVzdC5kZWZhdWx0UHJveHlIZWFkZXJXaGl0ZUxpc3QgPVxuICBUdW5uZWwuZGVmYXVsdFByb3h5SGVhZGVyV2hpdGVMaXN0LnNsaWNlKClcblxuUmVxdWVzdC5kZWZhdWx0UHJveHlIZWFkZXJFeGNsdXNpdmVMaXN0ID1cbiAgVHVubmVsLmRlZmF1bHRQcm94eUhlYWRlckV4Y2x1c2l2ZUxpc3Quc2xpY2UoKVxuXG4vLyBFeHBvcnRzXG5cblJlcXVlc3QucHJvdG90eXBlLnRvSlNPTiA9IHJlcXVlc3RUb0pTT05cbm1vZHVsZS5leHBvcnRzID0gUmVxdWVzdFxuIl0sIm5hbWVzIjpbImh0dHAiLCJyZXF1aXJlIiwiaHR0cHMiLCJ1cmwiLCJ1dGlsIiwic3RyZWFtIiwiemxpYiIsImF3czIiLCJhd3M0IiwiaHR0cFNpZ25hdHVyZSIsIm1pbWUiLCJjYXNlbGVzcyIsIkZvcmV2ZXJBZ2VudCIsIkZvcm1EYXRhIiwiZXh0ZW5kIiwiaXNzdHJlYW0iLCJpc1R5cGVkQXJyYXkiLCJzdHJpY3QiLCJoZWxwZXJzIiwiY29va2llcyIsImdldFByb3h5RnJvbVVSSSIsIlF1ZXJ5c3RyaW5nIiwiSGFyIiwiQXV0aCIsIk9BdXRoIiwiaGF3ayIsIk11bHRpcGFydCIsIlJlZGlyZWN0IiwiVHVubmVsIiwibm93IiwiQnVmZmVyIiwic2FmZVN0cmluZ2lmeSIsImlzUmVhZFN0cmVhbSIsInRvQmFzZTY0IiwiZGVmZXIiLCJjb3B5IiwidmVyc2lvbiIsImdsb2JhbENvb2tpZUphciIsImphciIsImdsb2JhbFBvb2wiLCJmaWx0ZXJGb3JOb25SZXNlcnZlZCIsInJlc2VydmVkIiwib3B0aW9ucyIsIm9iamVjdCIsImkiLCJub3RSZXNlcnZlZCIsImluZGV4T2YiLCJmaWx0ZXJPdXRSZXNlcnZlZEZ1bmN0aW9ucyIsImlzUmVzZXJ2ZWQiLCJpc0Z1bmN0aW9uIiwicmVxdWVzdFRvSlNPTiIsInNlbGYiLCJ1cmkiLCJtZXRob2QiLCJoZWFkZXJzIiwicmVzcG9uc2VUb0pTT04iLCJzdGF0dXNDb2RlIiwiYm9keSIsInJlcXVlc3QiLCJjYWxsIiwiUmVxdWVzdCIsImhhciIsIl9oYXIiLCJTdHJlYW0iLCJPYmplY3QiLCJrZXlzIiwicHJvdG90eXBlIiwibm9uUmVzZXJ2ZWQiLCJyZWFkYWJsZSIsIndyaXRhYmxlIiwiZXhwbGljaXRNZXRob2QiLCJfcXMiLCJfYXV0aCIsIl9vYXV0aCIsIl9tdWx0aXBhcnQiLCJfcmVkaXJlY3QiLCJfdHVubmVsIiwiaW5pdCIsImluaGVyaXRzIiwiZGVidWciLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9ERUJVRyIsInRlc3QiLCJjb25zb2xlIiwiZXJyb3IiLCJmb3JtYXQiLCJhcHBseSIsImFyZ3VtZW50cyIsImhlYWRlck5hbWUiLCJodHRwaWZ5IiwibG9jYWxBZGRyZXNzIiwicG9vbCIsImRlc3RzIiwiX19pc1JlcXVlc3RSZXF1ZXN0IiwiX2NhbGxiYWNrIiwiY2FsbGJhY2siLCJfY2FsbGJhY2tDYWxsZWQiLCJvbiIsImJpbmQiLCJiYXNlVXJsIiwiZW1pdCIsIkVycm9yIiwiYmFzZVVybEVuZHNXaXRoU2xhc2giLCJsYXN0SW5kZXhPZiIsImxlbmd0aCIsInVyaVN0YXJ0c1dpdGhTbGFzaCIsInNsaWNlIiwicGFyc2UiLCJocmVmIiwicHJvdG9jb2wiLCJob3N0IiwiZW5hYmxlVW5peFNvY2tldCIsInN0cmljdFNTTCIsInJlamVjdFVuYXV0aG9yaXplZCIsInBhdGhuYW1lIiwiaG9zdG5hbWUiLCJwb3J0IiwiaXNVbml4IiwiZmF1bHR5VXJpIiwibWVzc2FnZSIsImFib3J0IiwiaGFzT3duUHJvcGVydHkiLCJwcm94eSIsInR1bm5lbCIsImlzRW5hYmxlZCIsInNldHVwIiwib25SZXF1ZXN0Iiwic2V0SG9zdCIsImhhc0hlYWRlciIsImhvc3RIZWFkZXJOYW1lIiwib3JpZ2luYWxIb3N0SGVhZGVyTmFtZSIsInNldEhlYWRlciIsIl9qYXIiLCJmb3JtIiwiZm9ybURhdGEiLCJyZXF1ZXN0Rm9ybSIsImFwcGVuZEZvcm1WYWx1ZSIsImtleSIsInZhbHVlIiwiYXBwZW5kIiwiZm9ybUtleSIsImZvcm1WYWx1ZSIsIkFycmF5IiwiaiIsInFzIiwicGF0aCIsInNlYXJjaCIsImF3cyIsImF1dGgiLCJ1c2VyIiwidXNlcm5hbWUiLCJwYXNzIiwicGFzc3dvcmQiLCJzZW5kSW1tZWRpYXRlbHkiLCJiZWFyZXIiLCJnemlwIiwidXJpQXV0aFBpZWNlcyIsInNwbGl0IiwibWFwIiwiaXRlbSIsInVuZXNjYXBlIiwiam9pbiIsInByb3h5QXV0aFBpZWNlcyIsImF1dGhIZWFkZXIiLCJqc29uIiwibXVsdGlwYXJ0IiwidGltZSIsInRpbWluZyIsImVsYXBzZWRUaW1lIiwic2V0Q29udGVudExlbmd0aCIsImZyb20iLCJieXRlTGVuZ3RoIiwiaXNBcnJheSIsInJlZHVjZSIsImEiLCJiIiwib2F1dGgiLCJwYXJhbXMiLCJkZWZhdWx0TW9kdWxlcyIsImh0dHBNb2R1bGVzIiwiaHR0cE1vZHVsZSIsImNhIiwiYWdlbnQiLCJhZ2VudE9wdGlvbnMiLCJhZ2VudENsYXNzIiwiZm9yZXZlciIsInYiLCJtYWpvciIsIm1pbm9yIiwiU1NMIiwiQWdlbnQiLCJrZWVwQWxpdmUiLCJnZXROZXdBZ2VudCIsInNyYyIsIm50aWNrIiwiX3N0YXJ0ZWQiLCJsb29rdXAiLCJfanNvbiIsIl9hYm9ydGVkIiwiZW5kIiwiX2Zvcm0iLCJoYXNBdXRoIiwicGlwZSIsInNlbnRBdXRoIiwiY2h1bmtlZCIsImZvckVhY2giLCJwYXJ0Iiwid3JpdGUiLCJyZXF1ZXN0Qm9keVN0cmVhbSIsIndhcm4iLCJnZXRIZWFkZXJzIiwiZ2V0TGVuZ3RoIiwiZXJyIiwiaXNOYU4iLCJjaXBoZXJzIiwic2VjdXJlUHJvdG9jb2wiLCJzZWN1cmVPcHRpb25zIiwiY2VydCIsInBmeCIsInBhc3NwaHJhc2UiLCJwb29sS2V5IiwibmFtZSIsImlzSHR0cHMiLCJ0b1N0cmluZyIsImdsb2JhbEFnZW50IiwibWF4U29ja2V0cyIsInN0YXJ0Iiwic3RhcnRUaW1lIiwiRGF0ZSIsImdldFRpbWUiLCJzdGFydFRpbWVOb3ciLCJzdGF0Iiwic2l6ZSIsIl9hd3MiLCJyZXFPcHRpb25zIiwidGltZW91dCIsInJlcSIsInRpbWluZ3MiLCJ0aW1lb3V0VGltZXIiLCJpc0Zpbml0ZSIsIm9uUmVxdWVzdFJlc3BvbnNlIiwib25SZXF1ZXN0RXJyb3IiLCJzb2NrZXQiLCJpc0Nvbm5lY3RpbmciLCJfY29ubmVjdGluZyIsImNvbm5lY3RpbmciLCJvbkxvb2t1cFRpbWluZyIsIm9uQ29ubmVjdFRpbWluZyIsImNvbm5lY3QiLCJvbmNlIiwicmVtb3ZlTGlzdGVuZXIiLCJzZXRSZXFUaW1lb3V0Iiwic2V0VGltZW91dCIsImUiLCJjb2RlIiwidW5kZWZpbmVkIiwib25SZXFTb2NrQ29ubmVjdCIsImNsZWFyVGltZW91dCIsIl9yZXVzZWRTb2NrZXQiLCJhZGRSZXF1ZXN0Tm9yZXVzZSIsImFkZFJlcXVlc3QiLCJyZXNwb25zZSIsInRpbWluZ1N0YXJ0IiwiTWF0aCIsInJvdW5kIiwidGltaW5nUGhhc2VzIiwid2FpdCIsImRucyIsInRjcCIsImZpcnN0Qnl0ZSIsImRvd25sb2FkIiwidG90YWwiLCJyZXN1bWUiLCJ0b0pTT04iLCJhdXRob3JpemVkIiwic3NsRXJyIiwiYXV0aG9yaXphdGlvbkVycm9yIiwib3JpZ2luYWxIb3N0IiwiZ2V0SGVhZGVyIiwicmVtb3ZlSGVhZGVyIiwidGFyZ2V0Q29va2llSmFyIiwic2V0Q29va2llIiwiYWRkQ29va2llIiwiY29va2llIiwiaWdub3JlRXJyb3IiLCJoYXMiLCJfZGlzYWJsZUNvb2tpZXMiLCJvblJlc3BvbnNlIiwiX2VuZGVkIiwibm9Cb2R5IiwicmVzcG9uc2VDb250ZW50IiwiY29udGVudEVuY29kaW5nIiwidHJpbSIsInRvTG93ZXJDYXNlIiwiemxpYk9wdGlvbnMiLCJmbHVzaCIsIlpfU1lOQ19GTFVTSCIsImZpbmlzaEZsdXNoIiwiY3JlYXRlR3VuemlwIiwiY3JlYXRlSW5mbGF0ZSIsImVuY29kaW5nIiwic2V0RW5jb2RpbmciLCJfcGF1c2VkIiwicGF1c2UiLCJkZXN0IiwicGlwZURlc3QiLCJjaHVuayIsInJlc3BvbnNlU3RhcnRlZCIsInJlc3BvbnNlU3RhcnRUaW1lIiwiX2Rlc3RkYXRhIiwicmVhZFJlc3BvbnNlQm9keSIsImJ1ZmZlcnMiLCJidWZmZXJMZW5ndGgiLCJzdHJpbmdzIiwiaXNCdWZmZXIiLCJwdXNoIiwiY29uY2F0Iiwic3Vic3RyaW5nIiwiSlNPTiIsIl9qc29uUmV2aXZlciIsImFsbG9jIiwiZGVzdHJveSIsImhlYWRlcnNTZW50IiwiY3RuYW1lIiwiY2xuYW1lIiwicGlwZWZpbHRlciIsInEiLCJjbG9iYmVyIiwiYmFzZSIsInF1ZXJ5Iiwic3RyaW5naWZ5IiwicmZjMzk4NiIsInZhbCIsImpzb25SZXBsYWNlciIsIl9qc29uUmVwbGFjZXIiLCJqc29uUmV2aXZlciIsInJlc3VsdCIsInJlIiwibWF0Y2giLCJSZWdFeHAiLCJ1bml4UGFydHMiLCJzb2NrZXRQYXRoIiwib3B0cyIsInNpZ25fdmVyc2lvbiIsInNlcnZpY2UiLCJzaWduUmVzIiwic2lnbiIsImFjY2Vzc0tleUlkIiwic2VjcmV0QWNjZXNzS2V5Iiwic2VjcmV0Iiwic2Vzc2lvblRva2VuIiwic2Vzc2lvbiIsIkF1dGhvcml6YXRpb24iLCJkYXRlIiwidG9VVENTdHJpbmciLCJ2ZXJiIiwidG9VcHBlckNhc2UiLCJjb250ZW50VHlwZSIsIm1kNSIsImFtYXpvbkhlYWRlcnMiLCJjYW5vbmljYWxpemVIZWFkZXJzIiwiYnVja2V0IiwicmVzb3VyY2UiLCJjYW5vbmljYWxpemVSZXNvdXJjZSIsImF1dGhvcml6YXRpb24iLCJzaWduUmVxdWVzdCIsImhlYWRlciIsInJlZGlyZWN0c0ZvbGxvd2VkIiwib3JpZ2luYWxDb29raWVIZWFkZXIiLCJnZXRDb29raWVTdHJpbmciLCJ1cmlocmVmIiwiZGVmYXVsdFByb3h5SGVhZGVyV2hpdGVMaXN0IiwiZGVmYXVsdFByb3h5SGVhZGVyRXhjbHVzaXZlTGlzdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/request/request.js\n");

/***/ })

};
;